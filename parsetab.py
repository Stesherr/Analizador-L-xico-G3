
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORXORleftLESSTHANGREATERTHANLESSEQUALTHANGREATEREQUALTHANIS_EQUALNOTEQUALrightEQUALABSTRACT AND ARRAY AS BITAND BITNOT BITOR BOOL BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_TAG COLON COMMA CONCAT CONCATASSIGN CONST CONTINUE DECLARE DECREMENT DEFAULT DIE DIVIDE DIVIDEASSIGN DO DOC_COMMENT DOUBLEQUOTE ECHO ELSE ELSEIF EMPTY ENDWHILE EQUAL ERRORCONTROL EVAL EXECUTION EXIT EXP EXPASSIGN EXTENDS FGETS FINAL FINALLY FLOAT FN FNARROW FOR FOREACH FUNCTION GLOBAL GOTO GREATEREQUALTHAN GREATERTHAN ID IDENTICAL IF IMPLEMENTS INCLUDE INCLUDE_ONCE INCREMENT INSTANCEOF INSTEADOF INTEGER INTERFACE ISSET IS_EQUAL LCURLY LESSEQUALTHAN LESSTHAN LIST LOGICALNOT LPAREN LSQUARE MATCH MINUS MINUSASSIGN MOD MODASSIGN NAMESPACE NEW NOTEQUAL NULL OBJOP OPEN_TAG OR PLUS PLUSASSIGN POP PRINT PRIVATE PROTECTED PUBLIC PUSH QUEUE QUOTE RCURLY REQUIRE REQUIRE_ONCE RETURN RPAREN RSQUARE SEMICOLON STACK STATIC STDIN STRING SWITCH THROW TIMES TIMESASSIGN TRAIT TRY UNSET USE VAR WHILE XOR YIELD YIELD_FROM __HALT_COMPILERprograma : cuerpo\n                | programa cuerpo\n    cuerpo : arithmeticExpression\n              | if_elseStatement\n              | forStatement\n              | switchStatement\n              | arrayAsignation\n              | queueDeclaration\n              | queueEnqueue\n              | queueDequeue\n              | defineFunction\n              | anonymousFunction\n              | arrowFunction\n              | echo\n              | fgets\n              | stackDeclaration\n              | stackPush\n              | stackPop\n              | line\n              | print\n              | logicalCondition\n              | OPEN_TAG\n              | CLOSE_TAG\n              | stringConcatenation\n              | callFunction\n    switchStatement : SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLYswitchDefault : DEFAULT COLON programaswitchCase : CASE value COLON programa BREAK SEMICOLONswitchCases : switchCase\n                   | switchCases switchCase\n    if_elseStatement : IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY\n                        | IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody\n                        ifStatementBody : cuerpo\n                       | cuerpo CONTINUE SEMICOLON\n                       | ifStatementBody cuerpo\n                       forStatement : FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLYforStatementCondition :  SEMICOLON SEMICOLON \n                            |  variableAsignation SEMICOLON SEMICOLON variableAsignation\n                            |  variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation\n                            forStatementBody : cuerpo \n                        | forStatementBody cuerpo\n                        arrayAsignation : VAR EQUAL arrayDeclaration SEMICOLON arrayDeclaration : ARRAY arraysValues RPAREN\n                        | LSQUARE arraysValues RSQUARE\n                        | arrayValue \n                         arraysValues : arrayValue \n                    | arraysValues COMMA arrayValue\n                    arrayValue : ARRAY values RPAREN\n                    | LSQUARE values RSQUARE\n                    stackDeclaration : VAR EQUAL NEW STACK SEMICOLONstackPush : VAR OBJOP PUSH LPAREN value RPAREN SEMICOLONstackPop : VAR OBJOP POP SEMICOLONqueueDeclaration : VAR EQUAL NEW QUEUE SEMICOLONqueueEnqueue : VAR OBJOP PUSH LPAREN value RPAREN SEMICOLONqueueDequeue : VAR OBJOP POP SEMICOLONdefineFunction : FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY\n                    | FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY\n                    arguments : ID\n                | ID COMMA arguments\n                anonymousFunction : FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY \n                         | FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY\n                         arrowFunction : FN LPAREN VAR RPAREN FNARROW arrowBody SEMICOLONarrowBody : FN LPAREN VAR RPAREN FNARROW arrowBody\n                 | cuerpo\n    echo : ECHO values SEMICOLON\n    print : PRINT LPAREN values RPAREN SEMICOLON\n          | PRINT value SEMICOLON\n    values : value\n              | values COMMA value\n    fgets : VAR EQUAL FGETS LPAREN STDIN RPAREN SEMICOLONarithmeticExpression : valuearithmeticExpression : STRINGarithmeticExpression : LPAREN arithmeticExpression RPARENarithmeticExpression : arithmeticExpression arithmeticOperator arithmeticExpressioncallFunction : ID LPAREN RPARENcallFunction : ID LPAREN value RPARENvalue : VAR\n             | INTEGER\n             | FLOAT\n             | STRING\n             | stringConcatenation\n    arithmeticOperator : PLUS\n                          | MINUS \n                          | TIMES \n                          | DIVIDE\n                          | MOD\n                          | EXP\n    line : variableAsignation SEMICOLON\n    variableAsignation : VAR EQUAL value\n                          | VAR EQUAL arithmeticExpression\n                          | VAR INCREMENT\n                          | VAR DECREMENT\n                          | VAR EQUAL stringConcatenation\n    comparingSign : IS_EQUAL\n                        | IDENTICAL\n                        | NOTEQUAL\n                        | LESSTHAN\n                        | GREATERTHAN\n                        | LESSEQUALTHAN\n                        | GREATEREQUALTHAN\n    comparingValue : value comparingSign valuelogicalCondition : comparingValue\n                        | comparingValue conditionOperator comparingValue\n                        | LPAREN logicalCondition RPAREN\n    conditionOperator : AND\n                         | OR\n                         | XOR \n    stringConcatenation : value CONCAT valuestringConcatenation : stringConcatenation CONCAT stringConcatenation'
    
_lr_action_items = {'OPEN_TAG':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[22,22,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,22,-76,22,22,-53,-50,22,22,22,-66,22,-33,22,-40,22,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,22,22,-56,22,22,22,22,22,-31,]),'CLOSE_TAG':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[23,23,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,23,-76,23,23,-53,-50,23,23,23,-66,23,-33,23,-40,23,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,23,23,-56,23,23,23,23,23,-31,]),'STRING':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,74,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,109,110,119,122,123,125,126,130,131,133,137,141,144,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,184,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[27,27,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,27,-77,78,78,-102,-78,-79,-2,27,-82,-83,-84,-85,-86,-87,78,78,78,-94,-95,-96,-97,-98,-99,-100,-77,-81,78,78,112,78,-80,-88,78,78,-105,-106,-107,-74,-71,27,-109,-108,-101,-73,-104,78,78,78,-75,-65,78,-67,-103,78,112,-42,78,78,78,-52,27,-76,27,27,-53,-50,27,27,27,-66,27,-33,27,-40,78,27,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,27,27,-56,27,27,27,27,27,-31,]),'LPAREN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,39,40,41,42,43,44,45,46,47,48,49,63,64,65,68,72,78,79,86,87,88,89,91,92,93,94,95,105,113,119,122,125,126,131,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,192,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[28,28,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,28,65,66,67,-77,73,74,75,80,-102,-78,-79,-2,88,-82,-83,-84,-85,-86,-87,-77,-81,95,88,115,-80,-88,-74,-71,88,-109,-108,-101,-73,-104,95,136,144,-75,-65,-67,-103,88,-42,-52,28,-76,28,28,-53,-50,28,28,28,-66,28,-33,28,-40,28,-60,210,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,28,28,-56,28,28,28,28,28,-31,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[29,29,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,29,-76,29,29,-53,-50,29,29,29,-66,29,-33,29,-40,29,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,29,29,-56,29,29,29,29,29,-31,]),'FOR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[30,30,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,30,-76,30,30,-53,-50,30,30,30,-66,30,-33,30,-40,30,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,30,30,-56,30,30,30,30,30,-31,]),'SWITCH':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[31,31,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,31,-76,31,31,-53,-50,31,31,31,-66,31,-33,31,-40,31,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,31,31,-56,31,31,31,31,31,-31,]),'VAR':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,66,67,68,74,75,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,109,110,119,122,123,125,126,130,131,133,137,141,144,145,148,151,155,156,157,160,161,170,172,174,175,176,177,178,179,181,184,188,190,196,198,199,205,206,208,209,210,211,213,214,215,216,217,219,220,221,223,225,226,],[32,32,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,63,-77,63,63,-102,-78,-79,-2,63,-82,-83,-84,-85,-86,-87,63,63,63,-94,-95,-96,-97,-98,-99,-100,-77,-81,63,101,63,63,63,121,-80,-88,63,63,-105,-106,-107,-74,-71,63,-109,-108,-101,-73,-104,63,63,63,-75,-65,63,-67,-103,63,63,-42,63,63,63,-52,32,-76,32,32,101,-53,-50,32,32,32,-66,32,-33,32,-40,101,63,32,-60,-35,-36,-41,-70,-51,-57,-61,218,-62,-34,-26,32,32,-56,32,32,32,32,32,-31,]),'FUNCTION':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[33,33,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,33,-76,33,33,-53,-50,33,33,33,-66,33,-33,33,-40,33,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,33,33,-56,33,33,33,33,33,-31,]),'FN':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[35,35,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,35,-76,35,35,-53,-50,35,35,192,-66,35,-33,35,-40,35,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,35,35,-56,35,35,35,35,192,-31,]),'ECHO':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[36,36,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,36,-76,36,36,-53,-50,36,36,36,-66,36,-33,36,-40,36,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,36,36,-56,36,36,36,36,36,-31,]),'PRINT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[38,38,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,38,-76,38,38,-53,-50,38,38,38,-66,38,-33,38,-40,38,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,38,38,-56,38,38,38,38,38,-31,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,33,39,40,41,42,63,64,73,78,79,86,87,89,91,92,93,94,115,119,122,125,126,133,145,148,150,151,155,156,160,161,170,172,174,175,176,177,178,179,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[34,34,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,72,-102,-78,-79,-2,-77,-81,118,-80,-88,-74,-71,-109,-108,-101,-73,-104,118,-75,-65,-67,-103,-42,-52,34,118,-76,34,34,-53,-50,34,34,34,-66,34,-33,34,-40,34,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,34,34,-56,34,34,34,34,34,-31,]),'INTEGER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,74,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,109,110,119,122,123,125,126,130,131,133,137,141,144,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,184,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[40,40,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,40,-77,40,40,-102,-78,-79,-2,40,-82,-83,-84,-85,-86,-87,40,40,40,-94,-95,-96,-97,-98,-99,-100,-77,-81,40,40,40,40,-80,-88,40,40,-105,-106,-107,-74,-71,40,-109,-108,-101,-73,-104,40,40,40,-75,-65,40,-67,-103,40,40,-42,40,40,40,-52,40,-76,40,40,-53,-50,40,40,40,-66,40,-33,40,-40,40,40,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,40,40,-56,40,40,40,40,40,-31,]),'FLOAT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,32,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,67,68,74,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,109,110,119,122,123,125,126,130,131,133,137,141,144,145,148,151,155,156,160,161,170,172,174,175,176,177,178,179,184,188,190,196,198,199,205,206,208,209,211,213,214,215,216,217,219,220,221,223,225,226,],[41,41,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,41,-77,41,41,-102,-78,-79,-2,41,-82,-83,-84,-85,-86,-87,41,41,41,-94,-95,-96,-97,-98,-99,-100,-77,-81,41,41,41,41,-80,-88,41,41,-105,-106,-107,-74,-71,41,-109,-108,-101,-73,-104,41,41,41,-75,-65,41,-67,-103,41,41,-42,41,41,41,-52,41,-76,41,41,-53,-50,41,41,41,-66,41,-33,41,-40,41,41,-60,-35,-36,-41,-70,-51,-57,-61,-62,-34,-26,41,41,-56,41,41,41,41,41,-31,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,151,160,161,175,176,177,190,196,198,205,206,208,209,211,213,214,217,226,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,-76,-53,-50,-66,-32,-33,-60,-35,-36,-70,-51,-57,-61,-62,-34,-26,-56,-31,]),'RCURLY':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,151,160,161,171,175,176,177,178,179,189,190,191,196,198,199,201,205,206,207,208,209,211,213,214,217,220,223,226,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,-76,-53,-50,190,-66,195,-33,198,-40,208,-60,209,-35,-36,-41,214,-70,-51,217,-57,-61,-62,-34,-26,-56,-27,226,-31,]),'BREAK':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,42,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,151,160,161,175,176,177,190,196,198,205,206,208,209,211,213,214,217,221,226,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-2,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,-76,-53,-50,-66,-32,-33,-60,-35,-36,-70,-51,-57,-61,-62,-34,-26,-56,224,-31,]),'CONTINUE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,39,40,41,63,64,78,79,86,87,89,91,92,93,94,119,122,125,126,133,145,151,160,161,175,176,177,190,196,198,205,206,208,209,211,213,214,217,226,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,-102,-78,-79,-77,-81,-80,-88,-74,-71,-109,-108,-101,-73,-104,-75,-65,-67,-103,-42,-52,-76,-53,-50,-66,-32,197,-60,-35,-36,-70,-51,-57,-61,-62,-34,-26,-56,-31,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,37,39,40,41,63,64,66,70,71,76,77,78,79,81,86,87,89,91,92,93,94,99,100,103,106,107,108,111,112,114,119,122,125,126,130,133,134,135,145,151,153,154,158,160,161,163,165,166,167,175,176,177,185,187,190,193,194,196,197,198,205,206,208,209,211,213,214,217,224,226,228,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-71,-72,-77,79,-102,-78,-79,-77,-81,99,-91,-92,122,-68,-80,-88,125,-74,-71,-109,-108,-101,-73,-104,129,130,133,-71,-90,-81,-45,-72,145,-75,-65,-67,-103,157,-42,160,161,-52,-76,-69,175,181,-53,-50,-43,-48,-44,-49,-66,-32,-33,205,206,-60,211,-64,-35,213,-36,-70,-51,-57,-61,-62,-34,-26,-56,227,-31,211,]),'PLUS':([3,24,26,27,32,40,41,60,62,63,64,78,86,87,89,91,93,106,107,108,112,],[44,-81,-71,-72,-77,-78,-79,44,-71,-77,-81,-80,44,-71,-109,-108,-73,-71,44,-81,-72,]),'MINUS':([3,24,26,27,32,40,41,60,62,63,64,78,86,87,89,91,93,106,107,108,112,],[45,-81,-71,-72,-77,-78,-79,45,-71,-77,-81,-80,45,-71,-109,-108,-73,-71,45,-81,-72,]),'TIMES':([3,24,26,27,32,40,41,60,62,63,64,78,86,87,89,91,93,106,107,108,112,],[46,-81,-71,-72,-77,-78,-79,46,-71,-77,-81,-80,46,-71,-109,-108,-73,-71,46,-81,-72,]),'DIVIDE':([3,24,26,27,32,40,41,60,62,63,64,78,86,87,89,91,93,106,107,108,112,],[47,-81,-71,-72,-77,-78,-79,47,-71,-77,-81,-80,47,-71,-109,-108,-73,-71,47,-81,-72,]),'MOD':([3,24,26,27,32,40,41,60,62,63,64,78,86,87,89,91,93,106,107,108,112,],[48,-81,-71,-72,-77,-78,-79,48,-71,-77,-81,-80,48,-71,-109,-108,-73,-71,48,-81,-72,]),'EXP':([3,24,26,27,32,40,41,60,62,63,64,78,86,87,89,91,93,106,107,108,112,],[49,-81,-71,-72,-77,-78,-79,49,-71,-77,-81,-80,49,-71,-109,-108,-73,-71,49,-81,-72,]),'CONCAT':([24,26,27,32,40,41,62,63,64,77,78,81,87,89,90,91,92,97,102,106,108,112,120,153,168,204,],[50,51,-80,-77,-78,-79,51,-77,50,51,-80,51,51,50,51,51,51,51,51,51,50,-80,51,51,51,51,]),'IS_EQUAL':([24,26,27,32,40,41,62,63,64,78,89,91,97,],[-81,53,-80,-77,-78,-79,53,-77,-81,-80,-109,-108,53,]),'IDENTICAL':([24,26,27,32,40,41,62,63,64,78,89,91,97,],[-81,54,-80,-77,-78,-79,54,-77,-81,-80,-109,-108,54,]),'NOTEQUAL':([24,26,27,32,40,41,62,63,64,78,89,91,97,],[-81,55,-80,-77,-78,-79,55,-77,-81,-80,-109,-108,55,]),'LESSTHAN':([24,26,27,32,40,41,62,63,64,78,89,91,97,],[-81,56,-80,-77,-78,-79,56,-77,-81,-80,-109,-108,56,]),'GREATERTHAN':([24,26,27,32,40,41,62,63,64,78,89,91,97,],[-81,57,-80,-77,-78,-79,57,-77,-81,-80,-109,-108,57,]),'LESSEQUALTHAN':([24,26,27,32,40,41,62,63,64,78,89,91,97,],[-81,58,-80,-77,-78,-79,58,-77,-81,-80,-109,-108,58,]),'GREATEREQUALTHAN':([24,26,27,32,40,41,62,63,64,78,89,91,97,],[-81,59,-80,-77,-78,-79,59,-77,-81,-80,-109,-108,59,]),'RPAREN':([27,39,40,41,60,61,62,63,64,70,71,73,74,77,78,86,87,89,91,92,93,94,96,98,102,106,107,108,112,115,117,118,120,121,124,126,129,138,139,140,146,153,162,165,167,168,173,180,186,200,218,],[-72,-102,-78,-79,93,94,-71,-77,-81,-91,-92,116,119,-68,-80,-74,-71,-109,-108,-101,-73,-104,127,128,132,-71,-90,-81,-72,147,149,-58,151,152,154,-103,-37,163,165,-46,169,-69,185,-48,-49,187,-59,-38,-47,-39,222,]),'EQUAL':([32,101,],[68,131,]),'OBJOP':([32,],[69,]),'INCREMENT':([32,101,],[70,70,]),'DECREMENT':([32,101,],[71,71,]),'AND':([39,40,41,63,64,78,89,91,92,],[83,-78,-79,-77,-81,-80,-109,-108,-101,]),'OR':([39,40,41,63,64,78,89,91,92,],[84,-78,-79,-77,-81,-80,-109,-108,-101,]),'XOR':([39,40,41,63,64,78,89,91,92,],[85,-78,-79,-77,-81,-80,-109,-108,-101,]),'COMMA':([40,41,63,64,76,77,78,89,91,118,124,138,139,140,142,143,153,165,167,186,],[-78,-79,-77,-81,123,-68,-80,-109,-108,150,123,164,123,-46,164,123,-69,-48,-49,-47,]),'RSQUARE':([40,41,63,64,77,78,89,91,140,142,143,153,165,167,186,],[-78,-79,-77,-81,-68,-80,-109,-108,-46,166,167,-69,-48,-49,-47,]),'COLON':([40,41,63,64,78,89,91,203,204,],[-78,-79,-77,-81,-80,-109,-108,215,216,]),'NEW':([68,],[104,]),'FGETS':([68,],[105,]),'ARRAY':([68,109,110,164,],[109,137,137,137,]),'LSQUARE':([68,109,110,164,],[110,141,141,141,]),'PUSH':([69,],[113,]),'POP':([69,],[114,]),'QUEUE':([104,],[134,]),'STACK':([104,],[135,]),'LCURLY':([116,127,128,132,147,149,169,212,],[148,155,156,159,170,172,188,219,]),'STDIN':([136,],[162,]),'FNARROW':([152,222,],[174,225,]),'CASE':([159,182,183,202,227,],[184,184,-29,-30,-28,]),'DEFAULT':([182,183,202,227,],[203,-29,-30,-28,]),'ELSE':([195,],[212,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,215,216,],[1,220,221,]),'cuerpo':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[2,42,171,177,179,189,191,194,196,199,207,2,2,177,42,42,196,194,]),'arithmeticExpression':([0,1,28,43,68,88,131,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[3,3,60,86,107,60,107,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'if_elseStatement':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'forStatement':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'switchStatement':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'arrayAsignation':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'queueDeclaration':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'queueEnqueue':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'queueDequeue':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'defineFunction':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'anonymousFunction':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'arrowFunction':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'echo':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'fgets':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'stackDeclaration':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'stackPush':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'stackPop':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'line':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'print':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'logicalCondition':([0,1,28,65,95,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[21,21,61,96,61,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'stringConcatenation':([0,1,28,36,38,43,50,51,52,65,67,68,74,80,82,88,95,109,110,123,130,131,137,141,144,148,155,156,170,172,174,176,178,184,188,215,216,219,220,221,223,225,],[24,24,64,64,64,64,89,64,64,64,64,108,64,64,64,64,64,64,64,64,64,108,64,64,64,24,24,24,24,24,24,24,24,64,24,24,24,24,24,24,24,24,]),'callFunction':([0,1,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'value':([0,1,28,36,38,43,50,51,52,65,67,68,74,80,82,88,95,109,110,123,130,131,137,141,144,148,155,156,170,172,174,176,178,184,188,215,216,219,220,221,223,225,],[26,26,62,77,81,87,90,91,92,97,102,106,120,77,97,87,97,77,77,153,97,106,77,77,168,26,26,26,26,26,26,26,26,204,26,26,26,26,26,26,26,26,]),'variableAsignation':([0,1,66,148,155,156,157,170,172,174,176,178,181,188,215,216,219,220,221,223,225,],[37,37,100,37,37,37,180,37,37,37,37,37,200,37,37,37,37,37,37,37,37,]),'comparingValue':([0,1,28,65,82,95,130,148,155,156,170,172,174,176,178,188,215,216,219,220,221,223,225,],[39,39,39,39,126,39,158,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'arithmeticOperator':([3,60,86,107,],[43,43,43,43,]),'comparingSign':([26,62,97,],[52,52,52,]),'values':([36,80,109,110,137,141,],[76,124,139,143,139,143,]),'conditionOperator':([39,],[82,]),'forStatementCondition':([66,],[98,]),'arrayDeclaration':([68,],[103,]),'arrayValue':([68,109,110,164,],[111,140,140,186,]),'arguments':([73,115,150,],[117,146,173,]),'arraysValues':([109,110,],[138,142,]),'ifStatementBody':([155,219,],[176,223,]),'forStatementBody':([156,],[178,]),'switchCases':([159,],[182,]),'switchCase':([159,182,],[183,202,]),'arrowBody':([174,225,],[193,228,]),'switchDefault':([182,],[201,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> cuerpo','programa',1,'p_programa','Analizador_sintactico.py',19),
  ('programa -> programa cuerpo','programa',2,'p_programa','Analizador_sintactico.py',20),
  ('cuerpo -> arithmeticExpression','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',24),
  ('cuerpo -> if_elseStatement','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',25),
  ('cuerpo -> forStatement','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',26),
  ('cuerpo -> switchStatement','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',27),
  ('cuerpo -> arrayAsignation','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',28),
  ('cuerpo -> queueDeclaration','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',29),
  ('cuerpo -> queueEnqueue','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',30),
  ('cuerpo -> queueDequeue','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',31),
  ('cuerpo -> defineFunction','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',32),
  ('cuerpo -> anonymousFunction','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',33),
  ('cuerpo -> arrowFunction','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',34),
  ('cuerpo -> echo','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',35),
  ('cuerpo -> fgets','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',36),
  ('cuerpo -> stackDeclaration','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',37),
  ('cuerpo -> stackPush','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',38),
  ('cuerpo -> stackPop','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',39),
  ('cuerpo -> line','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',40),
  ('cuerpo -> print','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',41),
  ('cuerpo -> logicalCondition','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',42),
  ('cuerpo -> OPEN_TAG','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',43),
  ('cuerpo -> CLOSE_TAG','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',44),
  ('cuerpo -> stringConcatenation','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',45),
  ('cuerpo -> callFunction','cuerpo',1,'p_cuerpo','Analizador_sintactico.py',46),
  ('switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY','switchStatement',8,'p_switchStatement','Analizador_sintactico.py',53),
  ('switchDefault -> DEFAULT COLON programa','switchDefault',3,'p_switchDefault','Analizador_sintactico.py',57),
  ('switchCase -> CASE value COLON programa BREAK SEMICOLON','switchCase',6,'p_switchCase','Analizador_sintactico.py',60),
  ('switchCases -> switchCase','switchCases',1,'p_switchCases','Analizador_sintactico.py',63),
  ('switchCases -> switchCases switchCase','switchCases',2,'p_switchCases','Analizador_sintactico.py',64),
  ('if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY','if_elseStatement',11,'p_if_elseStatement','Analizador_sintactico.py',69),
  ('if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody','if_elseStatement',6,'p_if_elseStatement','Analizador_sintactico.py',70),
  ('ifStatementBody -> cuerpo','ifStatementBody',1,'p_ifStatementBody','Analizador_sintactico.py',82),
  ('ifStatementBody -> cuerpo CONTINUE SEMICOLON','ifStatementBody',3,'p_ifStatementBody','Analizador_sintactico.py',83),
  ('ifStatementBody -> ifStatementBody cuerpo','ifStatementBody',2,'p_ifStatementBody','Analizador_sintactico.py',84),
  ('forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY','forStatement',7,'p_forStatement','Analizador_sintactico.py',96),
  ('forStatementCondition -> SEMICOLON SEMICOLON','forStatementCondition',2,'p_forStatementCondition','Analizador_sintactico.py',101),
  ('forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation','forStatementCondition',4,'p_forStatementCondition','Analizador_sintactico.py',102),
  ('forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation','forStatementCondition',5,'p_forStatementCondition','Analizador_sintactico.py',103),
  ('forStatementBody -> cuerpo','forStatementBody',1,'p_forStatementBody','Analizador_sintactico.py',118),
  ('forStatementBody -> forStatementBody cuerpo','forStatementBody',2,'p_forStatementBody','Analizador_sintactico.py',119),
  ('arrayAsignation -> VAR EQUAL arrayDeclaration SEMICOLON','arrayAsignation',4,'p_arrayAsignation','Analizador_sintactico.py',129),
  ('arrayDeclaration -> ARRAY arraysValues RPAREN','arrayDeclaration',3,'p_arrayDeclaration','Analizador_sintactico.py',132),
  ('arrayDeclaration -> LSQUARE arraysValues RSQUARE','arrayDeclaration',3,'p_arrayDeclaration','Analizador_sintactico.py',133),
  ('arrayDeclaration -> arrayValue','arrayDeclaration',1,'p_arrayDeclaration','Analizador_sintactico.py',134),
  ('arraysValues -> arrayValue','arraysValues',1,'p_arraysValues','Analizador_sintactico.py',138),
  ('arraysValues -> arraysValues COMMA arrayValue','arraysValues',3,'p_arraysValues','Analizador_sintactico.py',139),
  ('arrayValue -> ARRAY values RPAREN','arrayValue',3,'p_arrayValue','Analizador_sintactico.py',143),
  ('arrayValue -> LSQUARE values RSQUARE','arrayValue',3,'p_arrayValue','Analizador_sintactico.py',144),
  ('stackDeclaration -> VAR EQUAL NEW STACK SEMICOLON','stackDeclaration',5,'p_stackDeclaration','Analizador_sintactico.py',149),
  ('stackPush -> VAR OBJOP PUSH LPAREN value RPAREN SEMICOLON','stackPush',7,'p_stackPush','Analizador_sintactico.py',152),
  ('stackPop -> VAR OBJOP POP SEMICOLON','stackPop',4,'p_stackPop','Analizador_sintactico.py',155),
  ('queueDeclaration -> VAR EQUAL NEW QUEUE SEMICOLON','queueDeclaration',5,'p_queueDeclaration','Analizador_sintactico.py',159),
  ('queueEnqueue -> VAR OBJOP PUSH LPAREN value RPAREN SEMICOLON','queueEnqueue',7,'p_queueEnqueue','Analizador_sintactico.py',162),
  ('queueDequeue -> VAR OBJOP POP SEMICOLON','queueDequeue',4,'p_queueDequeue','Analizador_sintactico.py',165),
  ('defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY','defineFunction',8,'p_defineFunction','Analizador_sintactico.py',169),
  ('defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY','defineFunction',7,'p_defineFunction','Analizador_sintactico.py',170),
  ('arguments -> ID','arguments',1,'p_arguments','Analizador_sintactico.py',175),
  ('arguments -> ID COMMA arguments','arguments',3,'p_arguments','Analizador_sintactico.py',176),
  ('anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY','anonymousFunction',6,'p_anonymousFunction','Analizador_sintactico.py',181),
  ('anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY','anonymousFunction',7,'p_anonymousFunction','Analizador_sintactico.py',182),
  ('arrowFunction -> FN LPAREN VAR RPAREN FNARROW arrowBody SEMICOLON','arrowFunction',7,'p_arrowFunction','Analizador_sintactico.py',187),
  ('arrowBody -> FN LPAREN VAR RPAREN FNARROW arrowBody','arrowBody',6,'p_arrowBody','Analizador_sintactico.py',190),
  ('arrowBody -> cuerpo','arrowBody',1,'p_arrowBody','Analizador_sintactico.py',191),
  ('echo -> ECHO values SEMICOLON','echo',3,'p_echo','Analizador_sintactico.py',196),
  ('print -> PRINT LPAREN values RPAREN SEMICOLON','print',5,'p_print','Analizador_sintactico.py',200),
  ('print -> PRINT value SEMICOLON','print',3,'p_print','Analizador_sintactico.py',201),
  ('values -> value','values',1,'p_values','Analizador_sintactico.py',205),
  ('values -> values COMMA value','values',3,'p_values','Analizador_sintactico.py',206),
  ('fgets -> VAR EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON','fgets',7,'p_fgets','Analizador_sintactico.py',211),
  ('arithmeticExpression -> value','arithmeticExpression',1,'p_arithmeticExpressionNumber','Analizador_sintactico.py',214),
  ('arithmeticExpression -> STRING','arithmeticExpression',1,'p_arithmeticExpressionCastInt','Analizador_sintactico.py',220),
  ('arithmeticExpression -> LPAREN arithmeticExpression RPAREN','arithmeticExpression',3,'p_arithmeticExpressionGroup','Analizador_sintactico.py',227),
  ('arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression','arithmeticExpression',3,'p_arithmeticExpression','Analizador_sintactico.py',232),
  ('callFunction -> ID LPAREN RPAREN','callFunction',3,'p_callFunction','Analizador_sintactico.py',266),
  ('callFunction -> ID LPAREN value RPAREN','callFunction',4,'p_callFunctionArguments','Analizador_sintactico.py',276),
  ('value -> VAR','value',1,'p_value','Analizador_sintactico.py',297),
  ('value -> INTEGER','value',1,'p_value','Analizador_sintactico.py',298),
  ('value -> FLOAT','value',1,'p_value','Analizador_sintactico.py',299),
  ('value -> STRING','value',1,'p_value','Analizador_sintactico.py',300),
  ('value -> stringConcatenation','value',1,'p_value','Analizador_sintactico.py',301),
  ('arithmeticOperator -> PLUS','arithmeticOperator',1,'p_arithmeticOperator','Analizador_sintactico.py',310),
  ('arithmeticOperator -> MINUS','arithmeticOperator',1,'p_arithmeticOperator','Analizador_sintactico.py',311),
  ('arithmeticOperator -> TIMES','arithmeticOperator',1,'p_arithmeticOperator','Analizador_sintactico.py',312),
  ('arithmeticOperator -> DIVIDE','arithmeticOperator',1,'p_arithmeticOperator','Analizador_sintactico.py',313),
  ('arithmeticOperator -> MOD','arithmeticOperator',1,'p_arithmeticOperator','Analizador_sintactico.py',314),
  ('arithmeticOperator -> EXP','arithmeticOperator',1,'p_arithmeticOperator','Analizador_sintactico.py',315),
  ('line -> variableAsignation SEMICOLON','line',2,'p_line','Analizador_sintactico.py',322),
  ('variableAsignation -> VAR EQUAL value','variableAsignation',3,'p_variableAsignation','Analizador_sintactico.py',328),
  ('variableAsignation -> VAR EQUAL arithmeticExpression','variableAsignation',3,'p_variableAsignation','Analizador_sintactico.py',329),
  ('variableAsignation -> VAR INCREMENT','variableAsignation',2,'p_variableAsignation','Analizador_sintactico.py',330),
  ('variableAsignation -> VAR DECREMENT','variableAsignation',2,'p_variableAsignation','Analizador_sintactico.py',331),
  ('variableAsignation -> VAR EQUAL stringConcatenation','variableAsignation',3,'p_variableAsignation','Analizador_sintactico.py',332),
  ('comparingSign -> IS_EQUAL','comparingSign',1,'p_comparingSign','Analizador_sintactico.py',353),
  ('comparingSign -> IDENTICAL','comparingSign',1,'p_comparingSign','Analizador_sintactico.py',354),
  ('comparingSign -> NOTEQUAL','comparingSign',1,'p_comparingSign','Analizador_sintactico.py',355),
  ('comparingSign -> LESSTHAN','comparingSign',1,'p_comparingSign','Analizador_sintactico.py',356),
  ('comparingSign -> GREATERTHAN','comparingSign',1,'p_comparingSign','Analizador_sintactico.py',357),
  ('comparingSign -> LESSEQUALTHAN','comparingSign',1,'p_comparingSign','Analizador_sintactico.py',358),
  ('comparingSign -> GREATEREQUALTHAN','comparingSign',1,'p_comparingSign','Analizador_sintactico.py',359),
  ('comparingValue -> value comparingSign value','comparingValue',3,'p_comparingValue','Analizador_sintactico.py',366),
  ('logicalCondition -> comparingValue','logicalCondition',1,'p_logicalCondition','Analizador_sintactico.py',389),
  ('logicalCondition -> comparingValue conditionOperator comparingValue','logicalCondition',3,'p_logicalCondition','Analizador_sintactico.py',390),
  ('logicalCondition -> LPAREN logicalCondition RPAREN','logicalCondition',3,'p_logicalCondition','Analizador_sintactico.py',391),
  ('conditionOperator -> AND','conditionOperator',1,'p_conditionOperator','Analizador_sintactico.py',407),
  ('conditionOperator -> OR','conditionOperator',1,'p_conditionOperator','Analizador_sintactico.py',408),
  ('conditionOperator -> XOR','conditionOperator',1,'p_conditionOperator','Analizador_sintactico.py',409),
  ('stringConcatenation -> value CONCAT value','stringConcatenation',3,'p_stringConcatenationGroup','Analizador_sintactico.py',417),
  ('stringConcatenation -> stringConcatenation CONCAT stringConcatenation','stringConcatenation',3,'p_stringConcatenation','Analizador_sintactico.py',424),
]
