Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    ARRAY
    AS
    BITAND
    BITNOT
    BITOR
    CALLABLE
    CATCH
    CLASS
    CLONE
    CLOSE_TAG
    CONCAT
    CONCATASSIGN
    CONST
    CONTINUE
    DECLARE
    DECREMENT
    DIE
    DIVIDEASSIGN
    DO
    DOC_COMMENT
    DOUBLEQUOTE
    ELSE
    ELSEIF
    EMPTY
    ENDWHILE
    ERRORCONTROL
    EVAL
    EXECUTION
    EXIT
    EXPASSIGN
    EXTENDS
    FINAL
    FINALLY
    FOREACH
    GLOBAL
    GOTO
    IF
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INCREMENT
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    LOGICALNOT
    LSQUARE
    MATCH
    MINUSASSIGN
    MODASSIGN
    NAMESPACE
    OPEN_TAG
    OR
    PLUSASSIGN
    PRIVATE
    PROTECTED
    PUBLIC
    QUOTE
    REQUIRE
    REQUIRE_ONCE
    RETURN
    RSQUARE
    STATIC
    THROW
    TIMESASSIGN
    TRAIT
    TRY
    UNSET
    USE
    VAR
    WHILE
    XOR
    YIELD
    YIELD_FROM
    __HALT_COMPILER

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> arithmeticExpression
Rule 4     cuerpo -> forStatement
Rule 5     cuerpo -> switchStatement
Rule 6     cuerpo -> queueDeclaration
Rule 7     cuerpo -> queueEnqueue
Rule 8     cuerpo -> queueDequeue
Rule 9     cuerpo -> defineFunction
Rule 10    cuerpo -> arrowFunction
Rule 11    cuerpo -> echo
Rule 12    cuerpo -> fgets
Rule 13    cuerpo -> stackDeclaration
Rule 14    cuerpo -> stackPush
Rule 15    cuerpo -> stackPop
Rule 16    cuerpo -> line
Rule 17    cuerpo -> print
Rule 18    switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
Rule 19    switchDefault -> DEFAULT COLON cuerpo
Rule 20    switchCase -> CASE value COLON cuerpo BREAK SEMICOLON
Rule 21    switchCases -> switchCase
Rule 22    switchCases -> switchCases switchCase
Rule 23    forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
Rule 24    forStatementCondition -> SEMICOLON SEMICOLON
Rule 25    forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation
Rule 26    forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation
Rule 27    forStatementBody -> cuerpo
Rule 28    forStatementBody -> forStatementBody cuerpo
Rule 29    stackDeclaration -> ID EQUAL NEW STACK SEMICOLON
Rule 30    stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
Rule 31    stackPop -> ID OBJOP POP SEMICOLON
Rule 32    queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON
Rule 33    queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
Rule 34    queueDequeue -> ID OBJOP POP SEMICOLON
Rule 35    defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
Rule 36    defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
Rule 37    arguments -> ID
Rule 38    arguments -> ID COMMA arguments
Rule 39    arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
Rule 40    arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody
Rule 41    arrowBody -> cuerpo
Rule 42    echo -> ECHO values SEMICOLON
Rule 43    print -> PRINT LPAREN values RPAREN SEMICOLON
Rule 44    print -> PRINT value SEMICOLON
Rule 45    values -> value
Rule 46    values -> values COMMA value
Rule 47    fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
Rule 48    arithmeticExpression -> value arithmeticOperator value
Rule 49    value -> ID
Rule 50    value -> INTEGER
Rule 51    value -> FLOAT
Rule 52    value -> STRING
Rule 53    value -> BOOL
Rule 54    value -> NULL
Rule 55    arithmeticOperator -> PLUS
Rule 56    arithmeticOperator -> MINUS
Rule 57    arithmeticOperator -> TIMES
Rule 58    arithmeticOperator -> DIVIDE
Rule 59    arithmeticOperator -> MOD
Rule 60    arithmeticOperator -> EXP
Rule 61    line -> variableAsignation SEMICOLON
Rule 62    variableAsignation -> ID EQUAL value
Rule 63    variableAsignation -> ID EQUAL arithmeticExpression
Rule 64    comparingSign -> IS_EQUAL
Rule 65    comparingSign -> IDENTICAL
Rule 66    comparingSign -> NOTEQUAL
Rule 67    comparingSign -> LESSTHAN
Rule 68    comparingSign -> GREATERTHAN
Rule 69    comparingSign -> LESSEQUALTHAN
Rule 70    comparingSign -> GREATEREQUALTHAN
Rule 71    comparingValue -> value comparingSign value

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ARRAY                : 
AS                   : 
BITAND               : 
BITNOT               : 
BITOR                : 
BOOL                 : 53
BREAK                : 20
CALLABLE             : 
CASE                 : 20
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_TAG            : 
COLON                : 19 20
COMMA                : 38 46
CONCAT               : 
CONCATASSIGN         : 
CONST                : 
CONTINUE             : 
DECLARE              : 
DECREMENT            : 
DEFAULT              : 19
DIE                  : 
DIVIDE               : 58
DIVIDEASSIGN         : 
DO                   : 
DOC_COMMENT          : 
DOUBLEQUOTE          : 
ECHO                 : 42
ELSE                 : 
ELSEIF               : 
EMPTY                : 
ENDWHILE             : 
EQUAL                : 29 32 47 62 63
ERRORCONTROL         : 
EVAL                 : 
EXECUTION            : 
EXIT                 : 
EXP                  : 60
EXPASSIGN            : 
EXTENDS              : 
FGETS                : 47
FINAL                : 
FINALLY              : 
FLOAT                : 51
FN                   : 39 40
FNARROW              : 39 40
FOR                  : 23
FOREACH              : 
FUNCTION             : 35 36
GLOBAL               : 
GOTO                 : 
GREATEREQUALTHAN     : 70
GREATERTHAN          : 68
ID                   : 29 30 31 32 33 34 35 36 37 38 39 40 47 49 62 63
IDENTICAL            : 65
IF                   : 
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREMENT            : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 50
INTERFACE            : 
ISSET                : 
IS_EQUAL             : 64
LCURLY               : 18 23 35 36
LESSEQUALTHAN        : 69
LESSTHAN             : 67
LIST                 : 
LOGICALNOT           : 
LPAREN               : 18 23 30 33 35 36 39 40 43 47
LSQUARE              : 
MATCH                : 
MINUS                : 56
MINUSASSIGN          : 
MOD                  : 59
MODASSIGN            : 
NAMESPACE            : 
NEW                  : 29 32
NOTEQUAL             : 66
NULL                 : 54
OBJOP                : 30 31 33 34
OPEN_TAG             : 
OR                   : 
PLUS                 : 55
PLUSASSIGN           : 
POP                  : 31 34
PRINT                : 43 44
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUSH                 : 30 33
QUEUE                : 32
QUOTE                : 
RCURLY               : 18 23 35 36
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 
RPAREN               : 18 23 30 33 35 36 39 40 43 47
RSQUARE              : 
SEMICOLON            : 20 24 24 25 25 26 26 29 30 31 32 33 34 39 42 43 44 47 61
STACK                : 29
STATIC               : 
STDIN                : 47
STRING               : 52
SWITCH               : 18
THROW                : 
TIMES                : 57
TIMESASSIGN          : 
TRAIT                : 
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
WHILE                : 
XOR                  : 
YIELD                : 
YIELD_FROM           : 
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

arguments            : 35 38
arithmeticExpression : 3 63
arithmeticOperator   : 48
arrowBody            : 39 40
arrowFunction        : 10
comparingSign        : 71
comparingValue       : 26
cuerpo               : 1 2 19 20 27 28 35 36 41
defineFunction       : 9
echo                 : 11
fgets                : 12
forStatement         : 4
forStatementBody     : 23 28
forStatementCondition : 23
line                 : 16
print                : 17
programa             : 2 0
queueDeclaration     : 6
queueDequeue         : 8
queueEnqueue         : 7
stackDeclaration     : 13
stackPop             : 15
stackPush            : 14
switchCase           : 21 22
switchCases          : 18 22
switchDefault        : 18
switchStatement      : 5
value                : 18 20 30 33 44 45 46 48 48 62 71 71
values               : 42 43 46
variableAsignation   : 25 25 26 26 61

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    cuerpo                         shift and go to state 32
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 2

    (1) programa -> cuerpo .

    FOR             reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    ID              reduce using rule 1 (programa -> cuerpo .)
    FUNCTION        reduce using rule 1 (programa -> cuerpo .)
    FN              reduce using rule 1 (programa -> cuerpo .)
    ECHO            reduce using rule 1 (programa -> cuerpo .)
    PRINT           reduce using rule 1 (programa -> cuerpo .)
    INTEGER         reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    BOOL            reduce using rule 1 (programa -> cuerpo .)
    NULL            reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> arithmeticExpression .

    FOR             reduce using rule 3 (cuerpo -> arithmeticExpression .)
    SWITCH          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    ID              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FUNCTION        reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FN              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    ECHO            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    PRINT           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    INTEGER         reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FLOAT           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    STRING          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    BOOL            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    NULL            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    $end            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    RCURLY          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    SEMICOLON       reduce using rule 3 (cuerpo -> arithmeticExpression .)
    BREAK           reduce using rule 3 (cuerpo -> arithmeticExpression .)


state 4

    (4) cuerpo -> forStatement .

    FOR             reduce using rule 4 (cuerpo -> forStatement .)
    SWITCH          reduce using rule 4 (cuerpo -> forStatement .)
    ID              reduce using rule 4 (cuerpo -> forStatement .)
    FUNCTION        reduce using rule 4 (cuerpo -> forStatement .)
    FN              reduce using rule 4 (cuerpo -> forStatement .)
    ECHO            reduce using rule 4 (cuerpo -> forStatement .)
    PRINT           reduce using rule 4 (cuerpo -> forStatement .)
    INTEGER         reduce using rule 4 (cuerpo -> forStatement .)
    FLOAT           reduce using rule 4 (cuerpo -> forStatement .)
    STRING          reduce using rule 4 (cuerpo -> forStatement .)
    BOOL            reduce using rule 4 (cuerpo -> forStatement .)
    NULL            reduce using rule 4 (cuerpo -> forStatement .)
    $end            reduce using rule 4 (cuerpo -> forStatement .)
    RCURLY          reduce using rule 4 (cuerpo -> forStatement .)
    SEMICOLON       reduce using rule 4 (cuerpo -> forStatement .)
    BREAK           reduce using rule 4 (cuerpo -> forStatement .)


state 5

    (5) cuerpo -> switchStatement .

    FOR             reduce using rule 5 (cuerpo -> switchStatement .)
    SWITCH          reduce using rule 5 (cuerpo -> switchStatement .)
    ID              reduce using rule 5 (cuerpo -> switchStatement .)
    FUNCTION        reduce using rule 5 (cuerpo -> switchStatement .)
    FN              reduce using rule 5 (cuerpo -> switchStatement .)
    ECHO            reduce using rule 5 (cuerpo -> switchStatement .)
    PRINT           reduce using rule 5 (cuerpo -> switchStatement .)
    INTEGER         reduce using rule 5 (cuerpo -> switchStatement .)
    FLOAT           reduce using rule 5 (cuerpo -> switchStatement .)
    STRING          reduce using rule 5 (cuerpo -> switchStatement .)
    BOOL            reduce using rule 5 (cuerpo -> switchStatement .)
    NULL            reduce using rule 5 (cuerpo -> switchStatement .)
    $end            reduce using rule 5 (cuerpo -> switchStatement .)
    RCURLY          reduce using rule 5 (cuerpo -> switchStatement .)
    SEMICOLON       reduce using rule 5 (cuerpo -> switchStatement .)
    BREAK           reduce using rule 5 (cuerpo -> switchStatement .)


state 6

    (6) cuerpo -> queueDeclaration .

    FOR             reduce using rule 6 (cuerpo -> queueDeclaration .)
    SWITCH          reduce using rule 6 (cuerpo -> queueDeclaration .)
    ID              reduce using rule 6 (cuerpo -> queueDeclaration .)
    FUNCTION        reduce using rule 6 (cuerpo -> queueDeclaration .)
    FN              reduce using rule 6 (cuerpo -> queueDeclaration .)
    ECHO            reduce using rule 6 (cuerpo -> queueDeclaration .)
    PRINT           reduce using rule 6 (cuerpo -> queueDeclaration .)
    INTEGER         reduce using rule 6 (cuerpo -> queueDeclaration .)
    FLOAT           reduce using rule 6 (cuerpo -> queueDeclaration .)
    STRING          reduce using rule 6 (cuerpo -> queueDeclaration .)
    BOOL            reduce using rule 6 (cuerpo -> queueDeclaration .)
    NULL            reduce using rule 6 (cuerpo -> queueDeclaration .)
    $end            reduce using rule 6 (cuerpo -> queueDeclaration .)
    RCURLY          reduce using rule 6 (cuerpo -> queueDeclaration .)
    SEMICOLON       reduce using rule 6 (cuerpo -> queueDeclaration .)
    BREAK           reduce using rule 6 (cuerpo -> queueDeclaration .)


state 7

    (7) cuerpo -> queueEnqueue .

    FOR             reduce using rule 7 (cuerpo -> queueEnqueue .)
    SWITCH          reduce using rule 7 (cuerpo -> queueEnqueue .)
    ID              reduce using rule 7 (cuerpo -> queueEnqueue .)
    FUNCTION        reduce using rule 7 (cuerpo -> queueEnqueue .)
    FN              reduce using rule 7 (cuerpo -> queueEnqueue .)
    ECHO            reduce using rule 7 (cuerpo -> queueEnqueue .)
    PRINT           reduce using rule 7 (cuerpo -> queueEnqueue .)
    INTEGER         reduce using rule 7 (cuerpo -> queueEnqueue .)
    FLOAT           reduce using rule 7 (cuerpo -> queueEnqueue .)
    STRING          reduce using rule 7 (cuerpo -> queueEnqueue .)
    BOOL            reduce using rule 7 (cuerpo -> queueEnqueue .)
    NULL            reduce using rule 7 (cuerpo -> queueEnqueue .)
    $end            reduce using rule 7 (cuerpo -> queueEnqueue .)
    RCURLY          reduce using rule 7 (cuerpo -> queueEnqueue .)
    SEMICOLON       reduce using rule 7 (cuerpo -> queueEnqueue .)
    BREAK           reduce using rule 7 (cuerpo -> queueEnqueue .)


state 8

    (8) cuerpo -> queueDequeue .

    FOR             reduce using rule 8 (cuerpo -> queueDequeue .)
    SWITCH          reduce using rule 8 (cuerpo -> queueDequeue .)
    ID              reduce using rule 8 (cuerpo -> queueDequeue .)
    FUNCTION        reduce using rule 8 (cuerpo -> queueDequeue .)
    FN              reduce using rule 8 (cuerpo -> queueDequeue .)
    ECHO            reduce using rule 8 (cuerpo -> queueDequeue .)
    PRINT           reduce using rule 8 (cuerpo -> queueDequeue .)
    INTEGER         reduce using rule 8 (cuerpo -> queueDequeue .)
    FLOAT           reduce using rule 8 (cuerpo -> queueDequeue .)
    STRING          reduce using rule 8 (cuerpo -> queueDequeue .)
    BOOL            reduce using rule 8 (cuerpo -> queueDequeue .)
    NULL            reduce using rule 8 (cuerpo -> queueDequeue .)
    $end            reduce using rule 8 (cuerpo -> queueDequeue .)
    RCURLY          reduce using rule 8 (cuerpo -> queueDequeue .)
    SEMICOLON       reduce using rule 8 (cuerpo -> queueDequeue .)
    BREAK           reduce using rule 8 (cuerpo -> queueDequeue .)


state 9

    (9) cuerpo -> defineFunction .

    FOR             reduce using rule 9 (cuerpo -> defineFunction .)
    SWITCH          reduce using rule 9 (cuerpo -> defineFunction .)
    ID              reduce using rule 9 (cuerpo -> defineFunction .)
    FUNCTION        reduce using rule 9 (cuerpo -> defineFunction .)
    FN              reduce using rule 9 (cuerpo -> defineFunction .)
    ECHO            reduce using rule 9 (cuerpo -> defineFunction .)
    PRINT           reduce using rule 9 (cuerpo -> defineFunction .)
    INTEGER         reduce using rule 9 (cuerpo -> defineFunction .)
    FLOAT           reduce using rule 9 (cuerpo -> defineFunction .)
    STRING          reduce using rule 9 (cuerpo -> defineFunction .)
    BOOL            reduce using rule 9 (cuerpo -> defineFunction .)
    NULL            reduce using rule 9 (cuerpo -> defineFunction .)
    $end            reduce using rule 9 (cuerpo -> defineFunction .)
    RCURLY          reduce using rule 9 (cuerpo -> defineFunction .)
    SEMICOLON       reduce using rule 9 (cuerpo -> defineFunction .)
    BREAK           reduce using rule 9 (cuerpo -> defineFunction .)


state 10

    (10) cuerpo -> arrowFunction .

    FOR             reduce using rule 10 (cuerpo -> arrowFunction .)
    SWITCH          reduce using rule 10 (cuerpo -> arrowFunction .)
    ID              reduce using rule 10 (cuerpo -> arrowFunction .)
    FUNCTION        reduce using rule 10 (cuerpo -> arrowFunction .)
    FN              reduce using rule 10 (cuerpo -> arrowFunction .)
    ECHO            reduce using rule 10 (cuerpo -> arrowFunction .)
    PRINT           reduce using rule 10 (cuerpo -> arrowFunction .)
    INTEGER         reduce using rule 10 (cuerpo -> arrowFunction .)
    FLOAT           reduce using rule 10 (cuerpo -> arrowFunction .)
    STRING          reduce using rule 10 (cuerpo -> arrowFunction .)
    BOOL            reduce using rule 10 (cuerpo -> arrowFunction .)
    NULL            reduce using rule 10 (cuerpo -> arrowFunction .)
    $end            reduce using rule 10 (cuerpo -> arrowFunction .)
    RCURLY          reduce using rule 10 (cuerpo -> arrowFunction .)
    SEMICOLON       reduce using rule 10 (cuerpo -> arrowFunction .)
    BREAK           reduce using rule 10 (cuerpo -> arrowFunction .)


state 11

    (11) cuerpo -> echo .

    FOR             reduce using rule 11 (cuerpo -> echo .)
    SWITCH          reduce using rule 11 (cuerpo -> echo .)
    ID              reduce using rule 11 (cuerpo -> echo .)
    FUNCTION        reduce using rule 11 (cuerpo -> echo .)
    FN              reduce using rule 11 (cuerpo -> echo .)
    ECHO            reduce using rule 11 (cuerpo -> echo .)
    PRINT           reduce using rule 11 (cuerpo -> echo .)
    INTEGER         reduce using rule 11 (cuerpo -> echo .)
    FLOAT           reduce using rule 11 (cuerpo -> echo .)
    STRING          reduce using rule 11 (cuerpo -> echo .)
    BOOL            reduce using rule 11 (cuerpo -> echo .)
    NULL            reduce using rule 11 (cuerpo -> echo .)
    $end            reduce using rule 11 (cuerpo -> echo .)
    RCURLY          reduce using rule 11 (cuerpo -> echo .)
    SEMICOLON       reduce using rule 11 (cuerpo -> echo .)
    BREAK           reduce using rule 11 (cuerpo -> echo .)


state 12

    (12) cuerpo -> fgets .

    FOR             reduce using rule 12 (cuerpo -> fgets .)
    SWITCH          reduce using rule 12 (cuerpo -> fgets .)
    ID              reduce using rule 12 (cuerpo -> fgets .)
    FUNCTION        reduce using rule 12 (cuerpo -> fgets .)
    FN              reduce using rule 12 (cuerpo -> fgets .)
    ECHO            reduce using rule 12 (cuerpo -> fgets .)
    PRINT           reduce using rule 12 (cuerpo -> fgets .)
    INTEGER         reduce using rule 12 (cuerpo -> fgets .)
    FLOAT           reduce using rule 12 (cuerpo -> fgets .)
    STRING          reduce using rule 12 (cuerpo -> fgets .)
    BOOL            reduce using rule 12 (cuerpo -> fgets .)
    NULL            reduce using rule 12 (cuerpo -> fgets .)
    $end            reduce using rule 12 (cuerpo -> fgets .)
    RCURLY          reduce using rule 12 (cuerpo -> fgets .)
    SEMICOLON       reduce using rule 12 (cuerpo -> fgets .)
    BREAK           reduce using rule 12 (cuerpo -> fgets .)


state 13

    (13) cuerpo -> stackDeclaration .

    FOR             reduce using rule 13 (cuerpo -> stackDeclaration .)
    SWITCH          reduce using rule 13 (cuerpo -> stackDeclaration .)
    ID              reduce using rule 13 (cuerpo -> stackDeclaration .)
    FUNCTION        reduce using rule 13 (cuerpo -> stackDeclaration .)
    FN              reduce using rule 13 (cuerpo -> stackDeclaration .)
    ECHO            reduce using rule 13 (cuerpo -> stackDeclaration .)
    PRINT           reduce using rule 13 (cuerpo -> stackDeclaration .)
    INTEGER         reduce using rule 13 (cuerpo -> stackDeclaration .)
    FLOAT           reduce using rule 13 (cuerpo -> stackDeclaration .)
    STRING          reduce using rule 13 (cuerpo -> stackDeclaration .)
    BOOL            reduce using rule 13 (cuerpo -> stackDeclaration .)
    NULL            reduce using rule 13 (cuerpo -> stackDeclaration .)
    $end            reduce using rule 13 (cuerpo -> stackDeclaration .)
    RCURLY          reduce using rule 13 (cuerpo -> stackDeclaration .)
    SEMICOLON       reduce using rule 13 (cuerpo -> stackDeclaration .)
    BREAK           reduce using rule 13 (cuerpo -> stackDeclaration .)


state 14

    (14) cuerpo -> stackPush .

    FOR             reduce using rule 14 (cuerpo -> stackPush .)
    SWITCH          reduce using rule 14 (cuerpo -> stackPush .)
    ID              reduce using rule 14 (cuerpo -> stackPush .)
    FUNCTION        reduce using rule 14 (cuerpo -> stackPush .)
    FN              reduce using rule 14 (cuerpo -> stackPush .)
    ECHO            reduce using rule 14 (cuerpo -> stackPush .)
    PRINT           reduce using rule 14 (cuerpo -> stackPush .)
    INTEGER         reduce using rule 14 (cuerpo -> stackPush .)
    FLOAT           reduce using rule 14 (cuerpo -> stackPush .)
    STRING          reduce using rule 14 (cuerpo -> stackPush .)
    BOOL            reduce using rule 14 (cuerpo -> stackPush .)
    NULL            reduce using rule 14 (cuerpo -> stackPush .)
    $end            reduce using rule 14 (cuerpo -> stackPush .)
    RCURLY          reduce using rule 14 (cuerpo -> stackPush .)
    SEMICOLON       reduce using rule 14 (cuerpo -> stackPush .)
    BREAK           reduce using rule 14 (cuerpo -> stackPush .)


state 15

    (15) cuerpo -> stackPop .

    FOR             reduce using rule 15 (cuerpo -> stackPop .)
    SWITCH          reduce using rule 15 (cuerpo -> stackPop .)
    ID              reduce using rule 15 (cuerpo -> stackPop .)
    FUNCTION        reduce using rule 15 (cuerpo -> stackPop .)
    FN              reduce using rule 15 (cuerpo -> stackPop .)
    ECHO            reduce using rule 15 (cuerpo -> stackPop .)
    PRINT           reduce using rule 15 (cuerpo -> stackPop .)
    INTEGER         reduce using rule 15 (cuerpo -> stackPop .)
    FLOAT           reduce using rule 15 (cuerpo -> stackPop .)
    STRING          reduce using rule 15 (cuerpo -> stackPop .)
    BOOL            reduce using rule 15 (cuerpo -> stackPop .)
    NULL            reduce using rule 15 (cuerpo -> stackPop .)
    $end            reduce using rule 15 (cuerpo -> stackPop .)
    RCURLY          reduce using rule 15 (cuerpo -> stackPop .)
    SEMICOLON       reduce using rule 15 (cuerpo -> stackPop .)
    BREAK           reduce using rule 15 (cuerpo -> stackPop .)


state 16

    (16) cuerpo -> line .

    FOR             reduce using rule 16 (cuerpo -> line .)
    SWITCH          reduce using rule 16 (cuerpo -> line .)
    ID              reduce using rule 16 (cuerpo -> line .)
    FUNCTION        reduce using rule 16 (cuerpo -> line .)
    FN              reduce using rule 16 (cuerpo -> line .)
    ECHO            reduce using rule 16 (cuerpo -> line .)
    PRINT           reduce using rule 16 (cuerpo -> line .)
    INTEGER         reduce using rule 16 (cuerpo -> line .)
    FLOAT           reduce using rule 16 (cuerpo -> line .)
    STRING          reduce using rule 16 (cuerpo -> line .)
    BOOL            reduce using rule 16 (cuerpo -> line .)
    NULL            reduce using rule 16 (cuerpo -> line .)
    $end            reduce using rule 16 (cuerpo -> line .)
    RCURLY          reduce using rule 16 (cuerpo -> line .)
    SEMICOLON       reduce using rule 16 (cuerpo -> line .)
    BREAK           reduce using rule 16 (cuerpo -> line .)


state 17

    (17) cuerpo -> print .

    FOR             reduce using rule 17 (cuerpo -> print .)
    SWITCH          reduce using rule 17 (cuerpo -> print .)
    ID              reduce using rule 17 (cuerpo -> print .)
    FUNCTION        reduce using rule 17 (cuerpo -> print .)
    FN              reduce using rule 17 (cuerpo -> print .)
    ECHO            reduce using rule 17 (cuerpo -> print .)
    PRINT           reduce using rule 17 (cuerpo -> print .)
    INTEGER         reduce using rule 17 (cuerpo -> print .)
    FLOAT           reduce using rule 17 (cuerpo -> print .)
    STRING          reduce using rule 17 (cuerpo -> print .)
    BOOL            reduce using rule 17 (cuerpo -> print .)
    NULL            reduce using rule 17 (cuerpo -> print .)
    $end            reduce using rule 17 (cuerpo -> print .)
    RCURLY          reduce using rule 17 (cuerpo -> print .)
    SEMICOLON       reduce using rule 17 (cuerpo -> print .)
    BREAK           reduce using rule 17 (cuerpo -> print .)


state 18

    (48) arithmeticExpression -> value . arithmeticOperator value
    (55) arithmeticOperator -> . PLUS
    (56) arithmeticOperator -> . MINUS
    (57) arithmeticOperator -> . TIMES
    (58) arithmeticOperator -> . DIVIDE
    (59) arithmeticOperator -> . MOD
    (60) arithmeticOperator -> . EXP

    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39

    arithmeticOperator             shift and go to state 33

state 19

    (23) forStatement -> FOR . LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY

    LPAREN          shift and go to state 40


state 20

    (18) switchStatement -> SWITCH . LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY

    LPAREN          shift and go to state 41


state 21

    (32) queueDeclaration -> ID . EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> ID . OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> ID . OBJOP POP SEMICOLON
    (47) fgets -> ID . EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> ID . EQUAL NEW STACK SEMICOLON
    (30) stackPush -> ID . OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> ID . OBJOP POP SEMICOLON
    (49) value -> ID .
    (62) variableAsignation -> ID . EQUAL value
    (63) variableAsignation -> ID . EQUAL arithmeticExpression

    EQUAL           shift and go to state 42
    OBJOP           shift and go to state 43
    PLUS            reduce using rule 49 (value -> ID .)
    MINUS           reduce using rule 49 (value -> ID .)
    TIMES           reduce using rule 49 (value -> ID .)
    DIVIDE          reduce using rule 49 (value -> ID .)
    MOD             reduce using rule 49 (value -> ID .)
    EXP             reduce using rule 49 (value -> ID .)


state 22

    (35) defineFunction -> FUNCTION . ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> FUNCTION . ID LPAREN RPAREN LCURLY cuerpo RCURLY

    ID              shift and go to state 44


state 23

    (39) arrowFunction -> FN . LPAREN ID RPAREN FNARROW arrowBody SEMICOLON

    LPAREN          shift and go to state 45


state 24

    (42) echo -> ECHO . values SEMICOLON
    (45) values -> . value
    (46) values -> . values COMMA value
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    values                         shift and go to state 46
    value                          shift and go to state 47

state 25

    (61) line -> variableAsignation . SEMICOLON

    SEMICOLON       shift and go to state 49


state 26

    (43) print -> PRINT . LPAREN values RPAREN SEMICOLON
    (44) print -> PRINT . value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    LPAREN          shift and go to state 50
    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 51

state 27

    (50) value -> INTEGER .

    PLUS            reduce using rule 50 (value -> INTEGER .)
    MINUS           reduce using rule 50 (value -> INTEGER .)
    TIMES           reduce using rule 50 (value -> INTEGER .)
    DIVIDE          reduce using rule 50 (value -> INTEGER .)
    MOD             reduce using rule 50 (value -> INTEGER .)
    EXP             reduce using rule 50 (value -> INTEGER .)
    SEMICOLON       reduce using rule 50 (value -> INTEGER .)
    COMMA           reduce using rule 50 (value -> INTEGER .)
    FOR             reduce using rule 50 (value -> INTEGER .)
    SWITCH          reduce using rule 50 (value -> INTEGER .)
    ID              reduce using rule 50 (value -> INTEGER .)
    FUNCTION        reduce using rule 50 (value -> INTEGER .)
    FN              reduce using rule 50 (value -> INTEGER .)
    ECHO            reduce using rule 50 (value -> INTEGER .)
    PRINT           reduce using rule 50 (value -> INTEGER .)
    INTEGER         reduce using rule 50 (value -> INTEGER .)
    FLOAT           reduce using rule 50 (value -> INTEGER .)
    STRING          reduce using rule 50 (value -> INTEGER .)
    BOOL            reduce using rule 50 (value -> INTEGER .)
    NULL            reduce using rule 50 (value -> INTEGER .)
    $end            reduce using rule 50 (value -> INTEGER .)
    RPAREN          reduce using rule 50 (value -> INTEGER .)
    RCURLY          reduce using rule 50 (value -> INTEGER .)
    BREAK           reduce using rule 50 (value -> INTEGER .)
    IS_EQUAL        reduce using rule 50 (value -> INTEGER .)
    IDENTICAL       reduce using rule 50 (value -> INTEGER .)
    NOTEQUAL        reduce using rule 50 (value -> INTEGER .)
    LESSTHAN        reduce using rule 50 (value -> INTEGER .)
    GREATERTHAN     reduce using rule 50 (value -> INTEGER .)
    LESSEQUALTHAN   reduce using rule 50 (value -> INTEGER .)
    GREATEREQUALTHAN reduce using rule 50 (value -> INTEGER .)
    COLON           reduce using rule 50 (value -> INTEGER .)


state 28

    (51) value -> FLOAT .

    PLUS            reduce using rule 51 (value -> FLOAT .)
    MINUS           reduce using rule 51 (value -> FLOAT .)
    TIMES           reduce using rule 51 (value -> FLOAT .)
    DIVIDE          reduce using rule 51 (value -> FLOAT .)
    MOD             reduce using rule 51 (value -> FLOAT .)
    EXP             reduce using rule 51 (value -> FLOAT .)
    SEMICOLON       reduce using rule 51 (value -> FLOAT .)
    COMMA           reduce using rule 51 (value -> FLOAT .)
    FOR             reduce using rule 51 (value -> FLOAT .)
    SWITCH          reduce using rule 51 (value -> FLOAT .)
    ID              reduce using rule 51 (value -> FLOAT .)
    FUNCTION        reduce using rule 51 (value -> FLOAT .)
    FN              reduce using rule 51 (value -> FLOAT .)
    ECHO            reduce using rule 51 (value -> FLOAT .)
    PRINT           reduce using rule 51 (value -> FLOAT .)
    INTEGER         reduce using rule 51 (value -> FLOAT .)
    FLOAT           reduce using rule 51 (value -> FLOAT .)
    STRING          reduce using rule 51 (value -> FLOAT .)
    BOOL            reduce using rule 51 (value -> FLOAT .)
    NULL            reduce using rule 51 (value -> FLOAT .)
    $end            reduce using rule 51 (value -> FLOAT .)
    RPAREN          reduce using rule 51 (value -> FLOAT .)
    RCURLY          reduce using rule 51 (value -> FLOAT .)
    BREAK           reduce using rule 51 (value -> FLOAT .)
    IS_EQUAL        reduce using rule 51 (value -> FLOAT .)
    IDENTICAL       reduce using rule 51 (value -> FLOAT .)
    NOTEQUAL        reduce using rule 51 (value -> FLOAT .)
    LESSTHAN        reduce using rule 51 (value -> FLOAT .)
    GREATERTHAN     reduce using rule 51 (value -> FLOAT .)
    LESSEQUALTHAN   reduce using rule 51 (value -> FLOAT .)
    GREATEREQUALTHAN reduce using rule 51 (value -> FLOAT .)
    COLON           reduce using rule 51 (value -> FLOAT .)


state 29

    (52) value -> STRING .

    PLUS            reduce using rule 52 (value -> STRING .)
    MINUS           reduce using rule 52 (value -> STRING .)
    TIMES           reduce using rule 52 (value -> STRING .)
    DIVIDE          reduce using rule 52 (value -> STRING .)
    MOD             reduce using rule 52 (value -> STRING .)
    EXP             reduce using rule 52 (value -> STRING .)
    SEMICOLON       reduce using rule 52 (value -> STRING .)
    COMMA           reduce using rule 52 (value -> STRING .)
    FOR             reduce using rule 52 (value -> STRING .)
    SWITCH          reduce using rule 52 (value -> STRING .)
    ID              reduce using rule 52 (value -> STRING .)
    FUNCTION        reduce using rule 52 (value -> STRING .)
    FN              reduce using rule 52 (value -> STRING .)
    ECHO            reduce using rule 52 (value -> STRING .)
    PRINT           reduce using rule 52 (value -> STRING .)
    INTEGER         reduce using rule 52 (value -> STRING .)
    FLOAT           reduce using rule 52 (value -> STRING .)
    STRING          reduce using rule 52 (value -> STRING .)
    BOOL            reduce using rule 52 (value -> STRING .)
    NULL            reduce using rule 52 (value -> STRING .)
    $end            reduce using rule 52 (value -> STRING .)
    RPAREN          reduce using rule 52 (value -> STRING .)
    RCURLY          reduce using rule 52 (value -> STRING .)
    BREAK           reduce using rule 52 (value -> STRING .)
    IS_EQUAL        reduce using rule 52 (value -> STRING .)
    IDENTICAL       reduce using rule 52 (value -> STRING .)
    NOTEQUAL        reduce using rule 52 (value -> STRING .)
    LESSTHAN        reduce using rule 52 (value -> STRING .)
    GREATERTHAN     reduce using rule 52 (value -> STRING .)
    LESSEQUALTHAN   reduce using rule 52 (value -> STRING .)
    GREATEREQUALTHAN reduce using rule 52 (value -> STRING .)
    COLON           reduce using rule 52 (value -> STRING .)


state 30

    (53) value -> BOOL .

    PLUS            reduce using rule 53 (value -> BOOL .)
    MINUS           reduce using rule 53 (value -> BOOL .)
    TIMES           reduce using rule 53 (value -> BOOL .)
    DIVIDE          reduce using rule 53 (value -> BOOL .)
    MOD             reduce using rule 53 (value -> BOOL .)
    EXP             reduce using rule 53 (value -> BOOL .)
    SEMICOLON       reduce using rule 53 (value -> BOOL .)
    COMMA           reduce using rule 53 (value -> BOOL .)
    FOR             reduce using rule 53 (value -> BOOL .)
    SWITCH          reduce using rule 53 (value -> BOOL .)
    ID              reduce using rule 53 (value -> BOOL .)
    FUNCTION        reduce using rule 53 (value -> BOOL .)
    FN              reduce using rule 53 (value -> BOOL .)
    ECHO            reduce using rule 53 (value -> BOOL .)
    PRINT           reduce using rule 53 (value -> BOOL .)
    INTEGER         reduce using rule 53 (value -> BOOL .)
    FLOAT           reduce using rule 53 (value -> BOOL .)
    STRING          reduce using rule 53 (value -> BOOL .)
    BOOL            reduce using rule 53 (value -> BOOL .)
    NULL            reduce using rule 53 (value -> BOOL .)
    $end            reduce using rule 53 (value -> BOOL .)
    RPAREN          reduce using rule 53 (value -> BOOL .)
    RCURLY          reduce using rule 53 (value -> BOOL .)
    BREAK           reduce using rule 53 (value -> BOOL .)
    IS_EQUAL        reduce using rule 53 (value -> BOOL .)
    IDENTICAL       reduce using rule 53 (value -> BOOL .)
    NOTEQUAL        reduce using rule 53 (value -> BOOL .)
    LESSTHAN        reduce using rule 53 (value -> BOOL .)
    GREATERTHAN     reduce using rule 53 (value -> BOOL .)
    LESSEQUALTHAN   reduce using rule 53 (value -> BOOL .)
    GREATEREQUALTHAN reduce using rule 53 (value -> BOOL .)
    COLON           reduce using rule 53 (value -> BOOL .)


state 31

    (54) value -> NULL .

    PLUS            reduce using rule 54 (value -> NULL .)
    MINUS           reduce using rule 54 (value -> NULL .)
    TIMES           reduce using rule 54 (value -> NULL .)
    DIVIDE          reduce using rule 54 (value -> NULL .)
    MOD             reduce using rule 54 (value -> NULL .)
    EXP             reduce using rule 54 (value -> NULL .)
    SEMICOLON       reduce using rule 54 (value -> NULL .)
    COMMA           reduce using rule 54 (value -> NULL .)
    FOR             reduce using rule 54 (value -> NULL .)
    SWITCH          reduce using rule 54 (value -> NULL .)
    ID              reduce using rule 54 (value -> NULL .)
    FUNCTION        reduce using rule 54 (value -> NULL .)
    FN              reduce using rule 54 (value -> NULL .)
    ECHO            reduce using rule 54 (value -> NULL .)
    PRINT           reduce using rule 54 (value -> NULL .)
    INTEGER         reduce using rule 54 (value -> NULL .)
    FLOAT           reduce using rule 54 (value -> NULL .)
    STRING          reduce using rule 54 (value -> NULL .)
    BOOL            reduce using rule 54 (value -> NULL .)
    NULL            reduce using rule 54 (value -> NULL .)
    $end            reduce using rule 54 (value -> NULL .)
    RPAREN          reduce using rule 54 (value -> NULL .)
    RCURLY          reduce using rule 54 (value -> NULL .)
    BREAK           reduce using rule 54 (value -> NULL .)
    IS_EQUAL        reduce using rule 54 (value -> NULL .)
    IDENTICAL       reduce using rule 54 (value -> NULL .)
    NOTEQUAL        reduce using rule 54 (value -> NULL .)
    LESSTHAN        reduce using rule 54 (value -> NULL .)
    GREATERTHAN     reduce using rule 54 (value -> NULL .)
    LESSEQUALTHAN   reduce using rule 54 (value -> NULL .)
    GREATEREQUALTHAN reduce using rule 54 (value -> NULL .)
    COLON           reduce using rule 54 (value -> NULL .)


state 32

    (2) programa -> programa cuerpo .

    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    ID              reduce using rule 2 (programa -> programa cuerpo .)
    FUNCTION        reduce using rule 2 (programa -> programa cuerpo .)
    FN              reduce using rule 2 (programa -> programa cuerpo .)
    ECHO            reduce using rule 2 (programa -> programa cuerpo .)
    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    INTEGER         reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    BOOL            reduce using rule 2 (programa -> programa cuerpo .)
    NULL            reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)


state 33

    (48) arithmeticExpression -> value arithmeticOperator . value
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 52

state 34

    (55) arithmeticOperator -> PLUS .

    ID              reduce using rule 55 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 55 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 55 (arithmeticOperator -> PLUS .)
    STRING          reduce using rule 55 (arithmeticOperator -> PLUS .)
    BOOL            reduce using rule 55 (arithmeticOperator -> PLUS .)
    NULL            reduce using rule 55 (arithmeticOperator -> PLUS .)


state 35

    (56) arithmeticOperator -> MINUS .

    ID              reduce using rule 56 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 56 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 56 (arithmeticOperator -> MINUS .)
    STRING          reduce using rule 56 (arithmeticOperator -> MINUS .)
    BOOL            reduce using rule 56 (arithmeticOperator -> MINUS .)
    NULL            reduce using rule 56 (arithmeticOperator -> MINUS .)


state 36

    (57) arithmeticOperator -> TIMES .

    ID              reduce using rule 57 (arithmeticOperator -> TIMES .)
    INTEGER         reduce using rule 57 (arithmeticOperator -> TIMES .)
    FLOAT           reduce using rule 57 (arithmeticOperator -> TIMES .)
    STRING          reduce using rule 57 (arithmeticOperator -> TIMES .)
    BOOL            reduce using rule 57 (arithmeticOperator -> TIMES .)
    NULL            reduce using rule 57 (arithmeticOperator -> TIMES .)


state 37

    (58) arithmeticOperator -> DIVIDE .

    ID              reduce using rule 58 (arithmeticOperator -> DIVIDE .)
    INTEGER         reduce using rule 58 (arithmeticOperator -> DIVIDE .)
    FLOAT           reduce using rule 58 (arithmeticOperator -> DIVIDE .)
    STRING          reduce using rule 58 (arithmeticOperator -> DIVIDE .)
    BOOL            reduce using rule 58 (arithmeticOperator -> DIVIDE .)
    NULL            reduce using rule 58 (arithmeticOperator -> DIVIDE .)


state 38

    (59) arithmeticOperator -> MOD .

    ID              reduce using rule 59 (arithmeticOperator -> MOD .)
    INTEGER         reduce using rule 59 (arithmeticOperator -> MOD .)
    FLOAT           reduce using rule 59 (arithmeticOperator -> MOD .)
    STRING          reduce using rule 59 (arithmeticOperator -> MOD .)
    BOOL            reduce using rule 59 (arithmeticOperator -> MOD .)
    NULL            reduce using rule 59 (arithmeticOperator -> MOD .)


state 39

    (60) arithmeticOperator -> EXP .

    ID              reduce using rule 60 (arithmeticOperator -> EXP .)
    INTEGER         reduce using rule 60 (arithmeticOperator -> EXP .)
    FLOAT           reduce using rule 60 (arithmeticOperator -> EXP .)
    STRING          reduce using rule 60 (arithmeticOperator -> EXP .)
    BOOL            reduce using rule 60 (arithmeticOperator -> EXP .)
    NULL            reduce using rule 60 (arithmeticOperator -> EXP .)


state 40

    (23) forStatement -> FOR LPAREN . forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) forStatementCondition -> . SEMICOLON SEMICOLON
    (25) forStatementCondition -> . variableAsignation SEMICOLON SEMICOLON variableAsignation
    (26) forStatementCondition -> . variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    SEMICOLON       shift and go to state 54
    ID              shift and go to state 56

    forStatementCondition          shift and go to state 53
    variableAsignation             shift and go to state 55

state 41

    (18) switchStatement -> SWITCH LPAREN . value RPAREN LCURLY switchCases switchDefault RCURLY
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 57

state 42

    (32) queueDeclaration -> ID EQUAL . NEW QUEUE SEMICOLON
    (47) fgets -> ID EQUAL . FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> ID EQUAL . NEW STACK SEMICOLON
    (62) variableAsignation -> ID EQUAL . value
    (63) variableAsignation -> ID EQUAL . arithmeticExpression
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (48) arithmeticExpression -> . value arithmeticOperator value

    NEW             shift and go to state 58
    FGETS           shift and go to state 59
    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 60
    arithmeticExpression           shift and go to state 61

state 43

    (33) queueEnqueue -> ID OBJOP . PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> ID OBJOP . POP SEMICOLON
    (30) stackPush -> ID OBJOP . PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> ID OBJOP . POP SEMICOLON

    PUSH            shift and go to state 62
    POP             shift and go to state 63


state 44

    (35) defineFunction -> FUNCTION ID . LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> FUNCTION ID . LPAREN RPAREN LCURLY cuerpo RCURLY

    LPAREN          shift and go to state 64


state 45

    (39) arrowFunction -> FN LPAREN . ID RPAREN FNARROW arrowBody SEMICOLON

    ID              shift and go to state 65


state 46

    (42) echo -> ECHO values . SEMICOLON
    (46) values -> values . COMMA value

    SEMICOLON       shift and go to state 66
    COMMA           shift and go to state 67


state 47

    (45) values -> value .

    SEMICOLON       reduce using rule 45 (values -> value .)
    COMMA           reduce using rule 45 (values -> value .)
    RPAREN          reduce using rule 45 (values -> value .)


state 48

    (49) value -> ID .

    SEMICOLON       reduce using rule 49 (value -> ID .)
    COMMA           reduce using rule 49 (value -> ID .)
    FOR             reduce using rule 49 (value -> ID .)
    SWITCH          reduce using rule 49 (value -> ID .)
    ID              reduce using rule 49 (value -> ID .)
    FUNCTION        reduce using rule 49 (value -> ID .)
    FN              reduce using rule 49 (value -> ID .)
    ECHO            reduce using rule 49 (value -> ID .)
    PRINT           reduce using rule 49 (value -> ID .)
    INTEGER         reduce using rule 49 (value -> ID .)
    FLOAT           reduce using rule 49 (value -> ID .)
    STRING          reduce using rule 49 (value -> ID .)
    BOOL            reduce using rule 49 (value -> ID .)
    NULL            reduce using rule 49 (value -> ID .)
    $end            reduce using rule 49 (value -> ID .)
    RPAREN          reduce using rule 49 (value -> ID .)
    RCURLY          reduce using rule 49 (value -> ID .)
    BREAK           reduce using rule 49 (value -> ID .)
    PLUS            reduce using rule 49 (value -> ID .)
    MINUS           reduce using rule 49 (value -> ID .)
    TIMES           reduce using rule 49 (value -> ID .)
    DIVIDE          reduce using rule 49 (value -> ID .)
    MOD             reduce using rule 49 (value -> ID .)
    EXP             reduce using rule 49 (value -> ID .)
    IS_EQUAL        reduce using rule 49 (value -> ID .)
    IDENTICAL       reduce using rule 49 (value -> ID .)
    NOTEQUAL        reduce using rule 49 (value -> ID .)
    LESSTHAN        reduce using rule 49 (value -> ID .)
    GREATERTHAN     reduce using rule 49 (value -> ID .)
    LESSEQUALTHAN   reduce using rule 49 (value -> ID .)
    GREATEREQUALTHAN reduce using rule 49 (value -> ID .)
    COLON           reduce using rule 49 (value -> ID .)


state 49

    (61) line -> variableAsignation SEMICOLON .

    FOR             reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    SWITCH          reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    ID              reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    FUNCTION        reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    FN              reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    ECHO            reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    PRINT           reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    INTEGER         reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    FLOAT           reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    STRING          reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    BOOL            reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    NULL            reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    $end            reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    RCURLY          reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    SEMICOLON       reduce using rule 61 (line -> variableAsignation SEMICOLON .)
    BREAK           reduce using rule 61 (line -> variableAsignation SEMICOLON .)


state 50

    (43) print -> PRINT LPAREN . values RPAREN SEMICOLON
    (45) values -> . value
    (46) values -> . values COMMA value
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    values                         shift and go to state 68
    value                          shift and go to state 47

state 51

    (44) print -> PRINT value . SEMICOLON

    SEMICOLON       shift and go to state 69


state 52

    (48) arithmeticExpression -> value arithmeticOperator value .

    FOR             reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    SWITCH          reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    ID              reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    FUNCTION        reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    FN              reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    ECHO            reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    PRINT           reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    INTEGER         reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    FLOAT           reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    STRING          reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    BOOL            reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    NULL            reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    $end            reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    SEMICOLON       reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    RPAREN          reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    RCURLY          reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)
    BREAK           reduce using rule 48 (arithmeticExpression -> value arithmeticOperator value .)


state 53

    (23) forStatement -> FOR LPAREN forStatementCondition . RPAREN LCURLY forStatementBody RCURLY

    RPAREN          shift and go to state 70


state 54

    (24) forStatementCondition -> SEMICOLON . SEMICOLON

    SEMICOLON       shift and go to state 71


state 55

    (25) forStatementCondition -> variableAsignation . SEMICOLON SEMICOLON variableAsignation
    (26) forStatementCondition -> variableAsignation . SEMICOLON comparingValue SEMICOLON variableAsignation

    SEMICOLON       shift and go to state 72


state 56

    (62) variableAsignation -> ID . EQUAL value
    (63) variableAsignation -> ID . EQUAL arithmeticExpression

    EQUAL           shift and go to state 73


state 57

    (18) switchStatement -> SWITCH LPAREN value . RPAREN LCURLY switchCases switchDefault RCURLY

    RPAREN          shift and go to state 74


state 58

    (32) queueDeclaration -> ID EQUAL NEW . QUEUE SEMICOLON
    (29) stackDeclaration -> ID EQUAL NEW . STACK SEMICOLON

    QUEUE           shift and go to state 75
    STACK           shift and go to state 76


state 59

    (47) fgets -> ID EQUAL FGETS . LPAREN STDIN RPAREN SEMICOLON

    LPAREN          shift and go to state 77


state 60

    (62) variableAsignation -> ID EQUAL value .
    (48) arithmeticExpression -> value . arithmeticOperator value
    (55) arithmeticOperator -> . PLUS
    (56) arithmeticOperator -> . MINUS
    (57) arithmeticOperator -> . TIMES
    (58) arithmeticOperator -> . DIVIDE
    (59) arithmeticOperator -> . MOD
    (60) arithmeticOperator -> . EXP

    SEMICOLON       reduce using rule 62 (variableAsignation -> ID EQUAL value .)
    RPAREN          reduce using rule 62 (variableAsignation -> ID EQUAL value .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 37
    MOD             shift and go to state 38
    EXP             shift and go to state 39

    arithmeticOperator             shift and go to state 33

state 61

    (63) variableAsignation -> ID EQUAL arithmeticExpression .

    SEMICOLON       reduce using rule 63 (variableAsignation -> ID EQUAL arithmeticExpression .)
    RPAREN          reduce using rule 63 (variableAsignation -> ID EQUAL arithmeticExpression .)


state 62

    (33) queueEnqueue -> ID OBJOP PUSH . LPAREN value RPAREN SEMICOLON
    (30) stackPush -> ID OBJOP PUSH . LPAREN value RPAREN SEMICOLON

    LPAREN          shift and go to state 78


state 63

    (34) queueDequeue -> ID OBJOP POP . SEMICOLON
    (31) stackPop -> ID OBJOP POP . SEMICOLON

    SEMICOLON       shift and go to state 79


state 64

    (35) defineFunction -> FUNCTION ID LPAREN . arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> FUNCTION ID LPAREN . RPAREN LCURLY cuerpo RCURLY
    (37) arguments -> . ID
    (38) arguments -> . ID COMMA arguments

    RPAREN          shift and go to state 82
    ID              shift and go to state 80

    arguments                      shift and go to state 81

state 65

    (39) arrowFunction -> FN LPAREN ID . RPAREN FNARROW arrowBody SEMICOLON

    RPAREN          shift and go to state 83


state 66

    (42) echo -> ECHO values SEMICOLON .

    FOR             reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    SWITCH          reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    ID              reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    FUNCTION        reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    FN              reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    ECHO            reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    PRINT           reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    INTEGER         reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    FLOAT           reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    STRING          reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    BOOL            reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    NULL            reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    $end            reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    RCURLY          reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    SEMICOLON       reduce using rule 42 (echo -> ECHO values SEMICOLON .)
    BREAK           reduce using rule 42 (echo -> ECHO values SEMICOLON .)


state 67

    (46) values -> values COMMA . value
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 84

state 68

    (43) print -> PRINT LPAREN values . RPAREN SEMICOLON
    (46) values -> values . COMMA value

    RPAREN          shift and go to state 85
    COMMA           shift and go to state 67


state 69

    (44) print -> PRINT value SEMICOLON .

    FOR             reduce using rule 44 (print -> PRINT value SEMICOLON .)
    SWITCH          reduce using rule 44 (print -> PRINT value SEMICOLON .)
    ID              reduce using rule 44 (print -> PRINT value SEMICOLON .)
    FUNCTION        reduce using rule 44 (print -> PRINT value SEMICOLON .)
    FN              reduce using rule 44 (print -> PRINT value SEMICOLON .)
    ECHO            reduce using rule 44 (print -> PRINT value SEMICOLON .)
    PRINT           reduce using rule 44 (print -> PRINT value SEMICOLON .)
    INTEGER         reduce using rule 44 (print -> PRINT value SEMICOLON .)
    FLOAT           reduce using rule 44 (print -> PRINT value SEMICOLON .)
    STRING          reduce using rule 44 (print -> PRINT value SEMICOLON .)
    BOOL            reduce using rule 44 (print -> PRINT value SEMICOLON .)
    NULL            reduce using rule 44 (print -> PRINT value SEMICOLON .)
    $end            reduce using rule 44 (print -> PRINT value SEMICOLON .)
    RCURLY          reduce using rule 44 (print -> PRINT value SEMICOLON .)
    SEMICOLON       reduce using rule 44 (print -> PRINT value SEMICOLON .)
    BREAK           reduce using rule 44 (print -> PRINT value SEMICOLON .)


state 70

    (23) forStatement -> FOR LPAREN forStatementCondition RPAREN . LCURLY forStatementBody RCURLY

    LCURLY          shift and go to state 86


state 71

    (24) forStatementCondition -> SEMICOLON SEMICOLON .

    RPAREN          reduce using rule 24 (forStatementCondition -> SEMICOLON SEMICOLON .)


state 72

    (25) forStatementCondition -> variableAsignation SEMICOLON . SEMICOLON variableAsignation
    (26) forStatementCondition -> variableAsignation SEMICOLON . comparingValue SEMICOLON variableAsignation
    (71) comparingValue -> . value comparingSign value
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    SEMICOLON       shift and go to state 87
    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    comparingValue                 shift and go to state 88
    value                          shift and go to state 89

state 73

    (62) variableAsignation -> ID EQUAL . value
    (63) variableAsignation -> ID EQUAL . arithmeticExpression
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (48) arithmeticExpression -> . value arithmeticOperator value

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 60
    arithmeticExpression           shift and go to state 61

state 74

    (18) switchStatement -> SWITCH LPAREN value RPAREN . LCURLY switchCases switchDefault RCURLY

    LCURLY          shift and go to state 90


state 75

    (32) queueDeclaration -> ID EQUAL NEW QUEUE . SEMICOLON

    SEMICOLON       shift and go to state 91


state 76

    (29) stackDeclaration -> ID EQUAL NEW STACK . SEMICOLON

    SEMICOLON       shift and go to state 92


state 77

    (47) fgets -> ID EQUAL FGETS LPAREN . STDIN RPAREN SEMICOLON

    STDIN           shift and go to state 93


state 78

    (33) queueEnqueue -> ID OBJOP PUSH LPAREN . value RPAREN SEMICOLON
    (30) stackPush -> ID OBJOP PUSH LPAREN . value RPAREN SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 94

state 79

    (34) queueDequeue -> ID OBJOP POP SEMICOLON .
    (31) stackPop -> ID OBJOP POP SEMICOLON .

  ! reduce/reduce conflict for FOR resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for ID resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for BOOL resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for NULL resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for RCURLY resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    FOR             reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    SWITCH          reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    ID              reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    FUNCTION        reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    FN              reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    ECHO            reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    PRINT           reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    INTEGER         reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    FLOAT           reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    STRING          reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    BOOL            reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    NULL            reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    $end            reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    RCURLY          reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    SEMICOLON       reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)
    BREAK           reduce using rule 31 (stackPop -> ID OBJOP POP SEMICOLON .)

  ! FOR             [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! ID              [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FN              [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! ECHO            [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! PRINT           [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! STRING          [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! BOOL            [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! NULL            [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! $end            [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! RCURLY          [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! BREAK           [ reduce using rule 34 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]


state 80

    (37) arguments -> ID .
    (38) arguments -> ID . COMMA arguments

    RPAREN          reduce using rule 37 (arguments -> ID .)
    COMMA           shift and go to state 95


state 81

    (35) defineFunction -> FUNCTION ID LPAREN arguments . RPAREN LCURLY cuerpo RCURLY

    RPAREN          shift and go to state 96


state 82

    (36) defineFunction -> FUNCTION ID LPAREN RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 97


state 83

    (39) arrowFunction -> FN LPAREN ID RPAREN . FNARROW arrowBody SEMICOLON

    FNARROW         shift and go to state 98


state 84

    (46) values -> values COMMA value .

    SEMICOLON       reduce using rule 46 (values -> values COMMA value .)
    COMMA           reduce using rule 46 (values -> values COMMA value .)
    RPAREN          reduce using rule 46 (values -> values COMMA value .)


state 85

    (43) print -> PRINT LPAREN values RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 99


state 86

    (23) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY . forStatementBody RCURLY
    (27) forStatementBody -> . cuerpo
    (28) forStatementBody -> . forStatementBody cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    forStatementBody               shift and go to state 100
    cuerpo                         shift and go to state 101
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 87

    (25) forStatementCondition -> variableAsignation SEMICOLON SEMICOLON . variableAsignation
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    ID              shift and go to state 56

    variableAsignation             shift and go to state 102

state 88

    (26) forStatementCondition -> variableAsignation SEMICOLON comparingValue . SEMICOLON variableAsignation

    SEMICOLON       shift and go to state 103


state 89

    (71) comparingValue -> value . comparingSign value
    (64) comparingSign -> . IS_EQUAL
    (65) comparingSign -> . IDENTICAL
    (66) comparingSign -> . NOTEQUAL
    (67) comparingSign -> . LESSTHAN
    (68) comparingSign -> . GREATERTHAN
    (69) comparingSign -> . LESSEQUALTHAN
    (70) comparingSign -> . GREATEREQUALTHAN

    IS_EQUAL        shift and go to state 105
    IDENTICAL       shift and go to state 106
    NOTEQUAL        shift and go to state 107
    LESSTHAN        shift and go to state 108
    GREATERTHAN     shift and go to state 109
    LESSEQUALTHAN   shift and go to state 110
    GREATEREQUALTHAN shift and go to state 111

    comparingSign                  shift and go to state 104

state 90

    (18) switchStatement -> SWITCH LPAREN value RPAREN LCURLY . switchCases switchDefault RCURLY
    (21) switchCases -> . switchCase
    (22) switchCases -> . switchCases switchCase
    (20) switchCase -> . CASE value COLON cuerpo BREAK SEMICOLON

    CASE            shift and go to state 114

    switchCases                    shift and go to state 112
    switchCase                     shift and go to state 113

state 91

    (32) queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .

    FOR             reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    SWITCH          reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    ID              reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FUNCTION        reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FN              reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    ECHO            reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    PRINT           reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    INTEGER         reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FLOAT           reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    STRING          reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    BOOL            reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    NULL            reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    $end            reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    RCURLY          reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    SEMICOLON       reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    BREAK           reduce using rule 32 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)


state 92

    (29) stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .

    FOR             reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    SWITCH          reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    ID              reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FUNCTION        reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FN              reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    ECHO            reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    PRINT           reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    INTEGER         reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FLOAT           reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    STRING          reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    BOOL            reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    NULL            reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    $end            reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    RCURLY          reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    SEMICOLON       reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    BREAK           reduce using rule 29 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)


state 93

    (47) fgets -> ID EQUAL FGETS LPAREN STDIN . RPAREN SEMICOLON

    RPAREN          shift and go to state 115


state 94

    (33) queueEnqueue -> ID OBJOP PUSH LPAREN value . RPAREN SEMICOLON
    (30) stackPush -> ID OBJOP PUSH LPAREN value . RPAREN SEMICOLON

    RPAREN          shift and go to state 116


state 95

    (38) arguments -> ID COMMA . arguments
    (37) arguments -> . ID
    (38) arguments -> . ID COMMA arguments

    ID              shift and go to state 80

    arguments                      shift and go to state 117

state 96

    (35) defineFunction -> FUNCTION ID LPAREN arguments RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 118


state 97

    (36) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    cuerpo                         shift and go to state 119
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 98

    (39) arrowFunction -> FN LPAREN ID RPAREN FNARROW . arrowBody SEMICOLON
    (40) arrowBody -> . FN LPAREN ID RPAREN FNARROW arrowBody
    (41) arrowBody -> . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FN              shift and go to state 120
    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    arrowBody                      shift and go to state 121
    cuerpo                         shift and go to state 122
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 99

    (43) print -> PRINT LPAREN values RPAREN SEMICOLON .

    FOR             reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    SWITCH          reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    ID              reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FN              reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    ECHO            reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    PRINT           reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    INTEGER         reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FLOAT           reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    STRING          reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    BOOL            reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    NULL            reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    $end            reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    RCURLY          reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    BREAK           reduce using rule 43 (print -> PRINT LPAREN values RPAREN SEMICOLON .)


state 100

    (23) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody . RCURLY
    (28) forStatementBody -> forStatementBody . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    RCURLY          shift and go to state 123
    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    cuerpo                         shift and go to state 124
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 101

    (27) forStatementBody -> cuerpo .

    RCURLY          reduce using rule 27 (forStatementBody -> cuerpo .)
    FOR             reduce using rule 27 (forStatementBody -> cuerpo .)
    SWITCH          reduce using rule 27 (forStatementBody -> cuerpo .)
    ID              reduce using rule 27 (forStatementBody -> cuerpo .)
    FUNCTION        reduce using rule 27 (forStatementBody -> cuerpo .)
    FN              reduce using rule 27 (forStatementBody -> cuerpo .)
    ECHO            reduce using rule 27 (forStatementBody -> cuerpo .)
    PRINT           reduce using rule 27 (forStatementBody -> cuerpo .)
    INTEGER         reduce using rule 27 (forStatementBody -> cuerpo .)
    FLOAT           reduce using rule 27 (forStatementBody -> cuerpo .)
    STRING          reduce using rule 27 (forStatementBody -> cuerpo .)
    BOOL            reduce using rule 27 (forStatementBody -> cuerpo .)
    NULL            reduce using rule 27 (forStatementBody -> cuerpo .)


state 102

    (25) forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation .

    RPAREN          reduce using rule 25 (forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation .)


state 103

    (26) forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON . variableAsignation
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    ID              shift and go to state 56

    variableAsignation             shift and go to state 125

state 104

    (71) comparingValue -> value comparingSign . value
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 126

state 105

    (64) comparingSign -> IS_EQUAL .

    ID              reduce using rule 64 (comparingSign -> IS_EQUAL .)
    INTEGER         reduce using rule 64 (comparingSign -> IS_EQUAL .)
    FLOAT           reduce using rule 64 (comparingSign -> IS_EQUAL .)
    STRING          reduce using rule 64 (comparingSign -> IS_EQUAL .)
    BOOL            reduce using rule 64 (comparingSign -> IS_EQUAL .)
    NULL            reduce using rule 64 (comparingSign -> IS_EQUAL .)


state 106

    (65) comparingSign -> IDENTICAL .

    ID              reduce using rule 65 (comparingSign -> IDENTICAL .)
    INTEGER         reduce using rule 65 (comparingSign -> IDENTICAL .)
    FLOAT           reduce using rule 65 (comparingSign -> IDENTICAL .)
    STRING          reduce using rule 65 (comparingSign -> IDENTICAL .)
    BOOL            reduce using rule 65 (comparingSign -> IDENTICAL .)
    NULL            reduce using rule 65 (comparingSign -> IDENTICAL .)


state 107

    (66) comparingSign -> NOTEQUAL .

    ID              reduce using rule 66 (comparingSign -> NOTEQUAL .)
    INTEGER         reduce using rule 66 (comparingSign -> NOTEQUAL .)
    FLOAT           reduce using rule 66 (comparingSign -> NOTEQUAL .)
    STRING          reduce using rule 66 (comparingSign -> NOTEQUAL .)
    BOOL            reduce using rule 66 (comparingSign -> NOTEQUAL .)
    NULL            reduce using rule 66 (comparingSign -> NOTEQUAL .)


state 108

    (67) comparingSign -> LESSTHAN .

    ID              reduce using rule 67 (comparingSign -> LESSTHAN .)
    INTEGER         reduce using rule 67 (comparingSign -> LESSTHAN .)
    FLOAT           reduce using rule 67 (comparingSign -> LESSTHAN .)
    STRING          reduce using rule 67 (comparingSign -> LESSTHAN .)
    BOOL            reduce using rule 67 (comparingSign -> LESSTHAN .)
    NULL            reduce using rule 67 (comparingSign -> LESSTHAN .)


state 109

    (68) comparingSign -> GREATERTHAN .

    ID              reduce using rule 68 (comparingSign -> GREATERTHAN .)
    INTEGER         reduce using rule 68 (comparingSign -> GREATERTHAN .)
    FLOAT           reduce using rule 68 (comparingSign -> GREATERTHAN .)
    STRING          reduce using rule 68 (comparingSign -> GREATERTHAN .)
    BOOL            reduce using rule 68 (comparingSign -> GREATERTHAN .)
    NULL            reduce using rule 68 (comparingSign -> GREATERTHAN .)


state 110

    (69) comparingSign -> LESSEQUALTHAN .

    ID              reduce using rule 69 (comparingSign -> LESSEQUALTHAN .)
    INTEGER         reduce using rule 69 (comparingSign -> LESSEQUALTHAN .)
    FLOAT           reduce using rule 69 (comparingSign -> LESSEQUALTHAN .)
    STRING          reduce using rule 69 (comparingSign -> LESSEQUALTHAN .)
    BOOL            reduce using rule 69 (comparingSign -> LESSEQUALTHAN .)
    NULL            reduce using rule 69 (comparingSign -> LESSEQUALTHAN .)


state 111

    (70) comparingSign -> GREATEREQUALTHAN .

    ID              reduce using rule 70 (comparingSign -> GREATEREQUALTHAN .)
    INTEGER         reduce using rule 70 (comparingSign -> GREATEREQUALTHAN .)
    FLOAT           reduce using rule 70 (comparingSign -> GREATEREQUALTHAN .)
    STRING          reduce using rule 70 (comparingSign -> GREATEREQUALTHAN .)
    BOOL            reduce using rule 70 (comparingSign -> GREATEREQUALTHAN .)
    NULL            reduce using rule 70 (comparingSign -> GREATEREQUALTHAN .)


state 112

    (18) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases . switchDefault RCURLY
    (22) switchCases -> switchCases . switchCase
    (19) switchDefault -> . DEFAULT COLON cuerpo
    (20) switchCase -> . CASE value COLON cuerpo BREAK SEMICOLON

    DEFAULT         shift and go to state 129
    CASE            shift and go to state 114

    switchDefault                  shift and go to state 127
    switchCase                     shift and go to state 128

state 113

    (21) switchCases -> switchCase .

    DEFAULT         reduce using rule 21 (switchCases -> switchCase .)
    CASE            reduce using rule 21 (switchCases -> switchCase .)


state 114

    (20) switchCase -> CASE . value COLON cuerpo BREAK SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL

    ID              shift and go to state 48
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 130

state 115

    (47) fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 131


state 116

    (33) queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN . SEMICOLON
    (30) stackPush -> ID OBJOP PUSH LPAREN value RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 132


state 117

    (38) arguments -> ID COMMA arguments .

    RPAREN          reduce using rule 38 (arguments -> ID COMMA arguments .)


state 118

    (35) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    cuerpo                         shift and go to state 133
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 119

    (36) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 134


state 120

    (40) arrowBody -> FN . LPAREN ID RPAREN FNARROW arrowBody
    (39) arrowFunction -> FN . LPAREN ID RPAREN FNARROW arrowBody SEMICOLON

    LPAREN          shift and go to state 135


state 121

    (39) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody . SEMICOLON

    SEMICOLON       shift and go to state 136


state 122

    (41) arrowBody -> cuerpo .

    SEMICOLON       reduce using rule 41 (arrowBody -> cuerpo .)


state 123

    (23) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .

    FOR             reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    SWITCH          reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    ID              reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FUNCTION        reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FN              reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    ECHO            reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    PRINT           reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    INTEGER         reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FLOAT           reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    STRING          reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    BOOL            reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    NULL            reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    $end            reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    RCURLY          reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    SEMICOLON       reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    BREAK           reduce using rule 23 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)


state 124

    (28) forStatementBody -> forStatementBody cuerpo .

    RCURLY          reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    FOR             reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    SWITCH          reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    ID              reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    FUNCTION        reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    FN              reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    ECHO            reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    PRINT           reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    INTEGER         reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    FLOAT           reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    STRING          reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    BOOL            reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)
    NULL            reduce using rule 28 (forStatementBody -> forStatementBody cuerpo .)


state 125

    (26) forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation .

    RPAREN          reduce using rule 26 (forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation .)


state 126

    (71) comparingValue -> value comparingSign value .

    SEMICOLON       reduce using rule 71 (comparingValue -> value comparingSign value .)


state 127

    (18) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault . RCURLY

    RCURLY          shift and go to state 137


state 128

    (22) switchCases -> switchCases switchCase .

    DEFAULT         reduce using rule 22 (switchCases -> switchCases switchCase .)
    CASE            reduce using rule 22 (switchCases -> switchCases switchCase .)


state 129

    (19) switchDefault -> DEFAULT . COLON cuerpo

    COLON           shift and go to state 138


state 130

    (20) switchCase -> CASE value . COLON cuerpo BREAK SEMICOLON

    COLON           shift and go to state 139


state 131

    (47) fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .

    FOR             reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ID              reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FN              reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ECHO            reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRINT           reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INTEGER         reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STRING          reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BOOL            reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    NULL            reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    $end            reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BREAK           reduce using rule 47 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)


state 132

    (33) queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .
    (30) stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .

  ! reduce/reduce conflict for FOR resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ID resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BOOL resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for NULL resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RCURLY resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FOR             reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    SWITCH          reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    ID              reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FN              reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    ECHO            reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    PRINT           reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    INTEGER         reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FLOAT           reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    STRING          reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    BOOL            reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    NULL            reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    $end            reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    RCURLY          reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    BREAK           reduce using rule 30 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)

  ! FOR             [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! ID              [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! ECHO            [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! PRINT           [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! BOOL            [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! NULL            [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! RCURLY          [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 33 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]


state 133

    (35) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 140


state 134

    (36) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .

    FOR             reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    BOOL            reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    NULL            reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 36 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)


state 135

    (40) arrowBody -> FN LPAREN . ID RPAREN FNARROW arrowBody
    (39) arrowFunction -> FN LPAREN . ID RPAREN FNARROW arrowBody SEMICOLON

    ID              shift and go to state 141


state 136

    (39) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .

    FOR             reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    SWITCH          reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    ID              reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FUNCTION        reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FN              reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    ECHO            reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    PRINT           reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    INTEGER         reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FLOAT           reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    STRING          reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    BOOL            reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    NULL            reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    $end            reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    RCURLY          reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    SEMICOLON       reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    BREAK           reduce using rule 39 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)


state 137

    (18) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .

    FOR             reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    SWITCH          reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    ID              reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FUNCTION        reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FN              reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    ECHO            reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    PRINT           reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    INTEGER         reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FLOAT           reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    STRING          reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    BOOL            reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    NULL            reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    $end            reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    RCURLY          reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    SEMICOLON       reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    BREAK           reduce using rule 18 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)


state 138

    (19) switchDefault -> DEFAULT COLON . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    cuerpo                         shift and go to state 142
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 139

    (20) switchCase -> CASE value COLON . cuerpo BREAK SEMICOLON
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    FN              shift and go to state 23
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    value                          shift and go to state 18
    cuerpo                         shift and go to state 143
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    variableAsignation             shift and go to state 25

state 140

    (35) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .

    FOR             reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    BOOL            reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    NULL            reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 35 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)


state 141

    (40) arrowBody -> FN LPAREN ID . RPAREN FNARROW arrowBody
    (39) arrowFunction -> FN LPAREN ID . RPAREN FNARROW arrowBody SEMICOLON

    RPAREN          shift and go to state 144


state 142

    (19) switchDefault -> DEFAULT COLON cuerpo .

    RCURLY          reduce using rule 19 (switchDefault -> DEFAULT COLON cuerpo .)


state 143

    (20) switchCase -> CASE value COLON cuerpo . BREAK SEMICOLON

    BREAK           shift and go to state 145


state 144

    (40) arrowBody -> FN LPAREN ID RPAREN . FNARROW arrowBody
    (39) arrowFunction -> FN LPAREN ID RPAREN . FNARROW arrowBody SEMICOLON

    FNARROW         shift and go to state 146


state 145

    (20) switchCase -> CASE value COLON cuerpo BREAK . SEMICOLON

    SEMICOLON       shift and go to state 147


state 146

    (40) arrowBody -> FN LPAREN ID RPAREN FNARROW . arrowBody
    (39) arrowFunction -> FN LPAREN ID RPAREN FNARROW . arrowBody SEMICOLON
    (40) arrowBody -> . FN LPAREN ID RPAREN FNARROW arrowBody
    (41) arrowBody -> . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . forStatement
    (5) cuerpo -> . switchStatement
    (6) cuerpo -> . queueDeclaration
    (7) cuerpo -> . queueEnqueue
    (8) cuerpo -> . queueDequeue
    (9) cuerpo -> . defineFunction
    (10) cuerpo -> . arrowFunction
    (11) cuerpo -> . echo
    (12) cuerpo -> . fgets
    (13) cuerpo -> . stackDeclaration
    (14) cuerpo -> . stackPush
    (15) cuerpo -> . stackPop
    (16) cuerpo -> . line
    (17) cuerpo -> . print
    (48) arithmeticExpression -> . value arithmeticOperator value
    (23) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (18) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (32) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (33) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (34) queueDequeue -> . ID OBJOP POP SEMICOLON
    (35) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (36) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (39) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (42) echo -> . ECHO values SEMICOLON
    (47) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (29) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (30) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (31) stackPop -> . ID OBJOP POP SEMICOLON
    (61) line -> . variableAsignation SEMICOLON
    (43) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (44) print -> . PRINT value SEMICOLON
    (49) value -> . ID
    (50) value -> . INTEGER
    (51) value -> . FLOAT
    (52) value -> . STRING
    (53) value -> . BOOL
    (54) value -> . NULL
    (62) variableAsignation -> . ID EQUAL value
    (63) variableAsignation -> . ID EQUAL arithmeticExpression

    FN              shift and go to state 120
    FOR             shift and go to state 19
    SWITCH          shift and go to state 20
    ID              shift and go to state 21
    FUNCTION        shift and go to state 22
    ECHO            shift and go to state 24
    PRINT           shift and go to state 26
    INTEGER         shift and go to state 27
    FLOAT           shift and go to state 28
    STRING          shift and go to state 29
    BOOL            shift and go to state 30
    NULL            shift and go to state 31

    arrowBody                      shift and go to state 148
    cuerpo                         shift and go to state 122
    arithmeticExpression           shift and go to state 3
    forStatement                   shift and go to state 4
    switchStatement                shift and go to state 5
    queueDeclaration               shift and go to state 6
    queueEnqueue                   shift and go to state 7
    queueDequeue                   shift and go to state 8
    defineFunction                 shift and go to state 9
    arrowFunction                  shift and go to state 10
    echo                           shift and go to state 11
    fgets                          shift and go to state 12
    stackDeclaration               shift and go to state 13
    stackPush                      shift and go to state 14
    stackPop                       shift and go to state 15
    line                           shift and go to state 16
    print                          shift and go to state 17
    value                          shift and go to state 18
    variableAsignation             shift and go to state 25

state 147

    (20) switchCase -> CASE value COLON cuerpo BREAK SEMICOLON .

    DEFAULT         reduce using rule 20 (switchCase -> CASE value COLON cuerpo BREAK SEMICOLON .)
    CASE            reduce using rule 20 (switchCase -> CASE value COLON cuerpo BREAK SEMICOLON .)


state 148

    (40) arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody .
    (39) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 136

  ! SEMICOLON       [ reduce using rule 40 (arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 148 resolved as shift
WARNING: reduce/reduce conflict in state 79 resolved using rule (stackPop -> ID OBJOP POP SEMICOLON)
WARNING: rejected rule (queueDequeue -> ID OBJOP POP SEMICOLON) in state 79
WARNING: reduce/reduce conflict in state 132 resolved using rule (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON)
WARNING: rejected rule (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON) in state 132
WARNING: Rule (queueDequeue -> ID OBJOP POP SEMICOLON) is never reduced
WARNING: Rule (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON) is never reduced
