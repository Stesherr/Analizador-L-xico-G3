Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BITAND
    BITNOT
    BITOR
    BOOL
    CALLABLE
    CATCH
    CLASS
    CLONE
    CONCATASSIGN
    CONST
    DECLARE
    DECREMENT
    DIE
    DIVIDEASSIGN
    DO
    DOC_COMMENT
    DOUBLEQUOTE
    ELSEIF
    EMPTY
    ENDWHILE
    ERRORCONTROL
    EVAL
    EXECUTION
    EXIT
    EXPASSIGN
    EXTENDS
    FINAL
    FINALLY
    FOREACH
    GLOBAL
    GOTO
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INCREMENT
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    LOGICALNOT
    MATCH
    MINUSASSIGN
    MODASSIGN
    NAMESPACE
    NULL
    PLUSASSIGN
    PRIVATE
    PROTECTED
    PUBLIC
    QUOTE
    REQUIRE
    REQUIRE_ONCE
    RETURN
    STATIC
    THROW
    TIMESASSIGN
    TRAIT
    TRY
    UNSET
    USE
    VAR
    WHILE
    YIELD
    YIELD_FROM
    __HALT_COMPILER

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> arithmeticExpression
Rule 4     cuerpo -> if_elseStatement
Rule 5     cuerpo -> forStatement
Rule 6     cuerpo -> switchStatement
Rule 7     cuerpo -> arrayAsignation
Rule 8     cuerpo -> queueDeclaration
Rule 9     cuerpo -> queueEnqueue
Rule 10    cuerpo -> queueDequeue
Rule 11    cuerpo -> defineFunction
Rule 12    cuerpo -> anonymousFunction
Rule 13    cuerpo -> arrowFunction
Rule 14    cuerpo -> echo
Rule 15    cuerpo -> fgets
Rule 16    cuerpo -> stackDeclaration
Rule 17    cuerpo -> stackPush
Rule 18    cuerpo -> stackPop
Rule 19    cuerpo -> line
Rule 20    cuerpo -> print
Rule 21    cuerpo -> logicalCondition
Rule 22    cuerpo -> OPEN_TAG
Rule 23    cuerpo -> CLOSE_TAG
Rule 24    switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
Rule 25    switchDefault -> DEFAULT COLON programa
Rule 26    switchCase -> CASE value COLON programa BREAK SEMICOLON
Rule 27    switchCases -> switchCase
Rule 28    switchCases -> switchCases switchCase
Rule 29    if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
Rule 30    if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
Rule 31    ifStatementBody -> cuerpo
Rule 32    ifStatementBody -> cuerpo CONTINUE SEMICOLON
Rule 33    ifStatementBody -> ifStatementBody cuerpo
Rule 34    forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
Rule 35    forStatementCondition -> SEMICOLON SEMICOLON
Rule 36    forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation
Rule 37    forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation
Rule 38    forStatementBody -> cuerpo
Rule 39    forStatementBody -> forStatementBody cuerpo
Rule 40    arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON
Rule 41    arrayDeclaration -> ARRAY arraysValues RPAREN
Rule 42    arrayDeclaration -> LSQUARE arraysValues RSQUARE
Rule 43    arrayDeclaration -> arrayValue
Rule 44    arraysValues -> arrayValue
Rule 45    arraysValues -> arraysValues COMMA arrayValue
Rule 46    arrayValue -> ARRAY values RPAREN
Rule 47    arrayValue -> LSQUARE values RSQUARE
Rule 48    stackDeclaration -> ID EQUAL NEW STACK SEMICOLON
Rule 49    stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
Rule 50    stackPop -> ID OBJOP POP SEMICOLON
Rule 51    queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON
Rule 52    queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
Rule 53    queueDequeue -> ID OBJOP POP SEMICOLON
Rule 54    defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
Rule 55    defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
Rule 56    arguments -> ID
Rule 57    arguments -> ID COMMA arguments
Rule 58    anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
Rule 59    anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
Rule 60    arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
Rule 61    arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody
Rule 62    arrowBody -> cuerpo
Rule 63    echo -> ECHO values SEMICOLON
Rule 64    print -> PRINT LPAREN values RPAREN SEMICOLON
Rule 65    print -> PRINT value SEMICOLON
Rule 66    values -> value
Rule 67    values -> values COMMA value
Rule 68    fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
Rule 69    arithmeticExpression -> value
Rule 70    arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression
Rule 71    arithmeticExpression -> LPAREN arithmeticExpression RPAREN
Rule 72    value -> ID
Rule 73    value -> INTEGER
Rule 74    value -> FLOAT
Rule 75    value -> STRING
Rule 76    arithmeticOperator -> PLUS
Rule 77    arithmeticOperator -> MINUS
Rule 78    arithmeticOperator -> TIMES
Rule 79    arithmeticOperator -> DIVIDE
Rule 80    arithmeticOperator -> MOD
Rule 81    arithmeticOperator -> EXP
Rule 82    line -> variableAsignation SEMICOLON
Rule 83    line -> stringConcatenation SEMICOLON
Rule 84    variableAsignation -> ID EQUAL value
Rule 85    variableAsignation -> ID EQUAL arithmeticExpression
Rule 86    comparingSign -> IS_EQUAL
Rule 87    comparingSign -> IDENTICAL
Rule 88    comparingSign -> NOTEQUAL
Rule 89    comparingSign -> LESSTHAN
Rule 90    comparingSign -> GREATERTHAN
Rule 91    comparingSign -> LESSEQUALTHAN
Rule 92    comparingSign -> GREATEREQUALTHAN
Rule 93    comparingValue -> value comparingSign value
Rule 94    logicalCondition -> comparingValue
Rule 95    logicalCondition -> comparingValue conditionOperator comparingValue
Rule 96    logicalCondition -> LPAREN logicalCondition RPAREN
Rule 97    conditionOperator -> AND
Rule 98    conditionOperator -> OR
Rule 99    conditionOperator -> XOR
Rule 100   stringConcatenation -> value CONCAT value
Rule 101   stringConcatenation -> value CONCAT stringConcatenation
Rule 102   stringConcatenation -> stringConcatenation CONCAT value

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 97
ARRAY                : 41 46
AS                   : 
BITAND               : 
BITNOT               : 
BITOR                : 
BOOL                 : 
BREAK                : 26
CALLABLE             : 
CASE                 : 26
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_TAG            : 23
COLON                : 25 26
COMMA                : 45 57 67
CONCAT               : 100 101 102
CONCATASSIGN         : 
CONST                : 
CONTINUE             : 32
DECLARE              : 
DECREMENT            : 
DEFAULT              : 25
DIE                  : 
DIVIDE               : 79
DIVIDEASSIGN         : 
DO                   : 
DOC_COMMENT          : 
DOUBLEQUOTE          : 
ECHO                 : 63
ELSE                 : 29
ELSEIF               : 
EMPTY                : 
ENDWHILE             : 
EQUAL                : 40 48 51 68 84 85
ERRORCONTROL         : 
EVAL                 : 
EXECUTION            : 
EXIT                 : 
EXP                  : 81
EXPASSIGN            : 
EXTENDS              : 
FGETS                : 68
FINAL                : 
FINALLY              : 
FLOAT                : 74
FN                   : 60 61
FNARROW              : 60 61
FOR                  : 34
FOREACH              : 
FUNCTION             : 54 55 58 59
GLOBAL               : 
GOTO                 : 
GREATEREQUALTHAN     : 92
GREATERTHAN          : 90
ID                   : 40 48 49 50 51 52 53 54 55 56 57 60 61 68 72 84 85
IDENTICAL            : 87
IF                   : 29 30
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREMENT            : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 73
INTERFACE            : 
ISSET                : 
IS_EQUAL             : 86
LCURLY               : 24 29 30 34 54 55 58 59
LESSEQUALTHAN        : 91
LESSTHAN             : 89
LIST                 : 
LOGICALNOT           : 
LPAREN               : 24 29 30 34 49 52 54 55 58 59 60 61 64 68 71 96
LSQUARE              : 42 47
MATCH                : 
MINUS                : 77
MINUSASSIGN          : 
MOD                  : 80
MODASSIGN            : 
NAMESPACE            : 
NEW                  : 48 51
NOTEQUAL             : 88
NULL                 : 
OBJOP                : 49 50 52 53
OPEN_TAG             : 22
OR                   : 98
PLUS                 : 76
PLUSASSIGN           : 
POP                  : 50 53
PRINT                : 64 65
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUSH                 : 49 52
QUEUE                : 51
QUOTE                : 
RCURLY               : 24 29 34 54 55 58 59
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 
RPAREN               : 24 29 30 34 41 46 49 52 54 55 58 59 60 61 64 68 71 96
RSQUARE              : 42 47
SEMICOLON            : 26 32 35 35 36 36 37 37 40 48 49 50 51 52 53 60 63 64 65 68 82 83
STACK                : 48
STATIC               : 
STDIN                : 68
STRING               : 75
SWITCH               : 24
THROW                : 
TIMES                : 78
TIMESASSIGN          : 
TRAIT                : 
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
WHILE                : 
XOR                  : 99
YIELD                : 
YIELD_FROM           : 
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

anonymousFunction    : 12
arguments            : 54 57 59
arithmeticExpression : 3 70 70 71 85
arithmeticOperator   : 70
arrayAsignation      : 7
arrayDeclaration     : 40
arrayValue           : 43 44 45
arraysValues         : 41 42 45
arrowBody            : 60 61
arrowFunction        : 13
comparingSign        : 93
comparingValue       : 37 94 95 95
conditionOperator    : 95
cuerpo               : 1 2 31 32 33 38 39 54 55 58 59 62
defineFunction       : 11
echo                 : 14
fgets                : 15
forStatement         : 5
forStatementBody     : 34 39
forStatementCondition : 34
ifStatementBody      : 29 29 30 33
if_elseStatement     : 4
line                 : 19
logicalCondition     : 21 29 30 96
print                : 20
programa             : 2 25 26 0
queueDeclaration     : 8
queueDequeue         : 10
queueEnqueue         : 9
stackDeclaration     : 16
stackPop             : 18
stackPush            : 17
stringConcatenation  : 83 101 102
switchCase           : 27 28
switchCases          : 24 28
switchDefault        : 24
switchStatement      : 6
value                : 24 26 49 52 65 66 67 69 84 93 93 100 100 101 102
values               : 46 47 63 64 67
variableAsignation   : 36 36 37 37 82

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    cuerpo                         shift and go to state 40
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 2

    (1) programa -> cuerpo .

    OPEN_TAG        reduce using rule 1 (programa -> cuerpo .)
    CLOSE_TAG       reduce using rule 1 (programa -> cuerpo .)
    LPAREN          reduce using rule 1 (programa -> cuerpo .)
    IF              reduce using rule 1 (programa -> cuerpo .)
    FOR             reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    ID              reduce using rule 1 (programa -> cuerpo .)
    FUNCTION        reduce using rule 1 (programa -> cuerpo .)
    FN              reduce using rule 1 (programa -> cuerpo .)
    ECHO            reduce using rule 1 (programa -> cuerpo .)
    PRINT           reduce using rule 1 (programa -> cuerpo .)
    INTEGER         reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)
    RCURLY          reduce using rule 1 (programa -> cuerpo .)
    BREAK           reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> arithmeticExpression .
    (70) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (76) arithmeticOperator -> . PLUS
    (77) arithmeticOperator -> . MINUS
    (78) arithmeticOperator -> . TIMES
    (79) arithmeticOperator -> . DIVIDE
    (80) arithmeticOperator -> . MOD
    (81) arithmeticOperator -> . EXP

    OPEN_TAG        reduce using rule 3 (cuerpo -> arithmeticExpression .)
    CLOSE_TAG       reduce using rule 3 (cuerpo -> arithmeticExpression .)
    LPAREN          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    IF              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FOR             reduce using rule 3 (cuerpo -> arithmeticExpression .)
    SWITCH          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    ID              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FUNCTION        reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FN              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    ECHO            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    PRINT           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    INTEGER         reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FLOAT           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    STRING          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    $end            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    RCURLY          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    CONTINUE        reduce using rule 3 (cuerpo -> arithmeticExpression .)
    SEMICOLON       reduce using rule 3 (cuerpo -> arithmeticExpression .)
    BREAK           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    EXP             shift and go to state 47

    arithmeticOperator             shift and go to state 41

state 4

    (4) cuerpo -> if_elseStatement .

    OPEN_TAG        reduce using rule 4 (cuerpo -> if_elseStatement .)
    CLOSE_TAG       reduce using rule 4 (cuerpo -> if_elseStatement .)
    LPAREN          reduce using rule 4 (cuerpo -> if_elseStatement .)
    IF              reduce using rule 4 (cuerpo -> if_elseStatement .)
    FOR             reduce using rule 4 (cuerpo -> if_elseStatement .)
    SWITCH          reduce using rule 4 (cuerpo -> if_elseStatement .)
    ID              reduce using rule 4 (cuerpo -> if_elseStatement .)
    FUNCTION        reduce using rule 4 (cuerpo -> if_elseStatement .)
    FN              reduce using rule 4 (cuerpo -> if_elseStatement .)
    ECHO            reduce using rule 4 (cuerpo -> if_elseStatement .)
    PRINT           reduce using rule 4 (cuerpo -> if_elseStatement .)
    INTEGER         reduce using rule 4 (cuerpo -> if_elseStatement .)
    FLOAT           reduce using rule 4 (cuerpo -> if_elseStatement .)
    STRING          reduce using rule 4 (cuerpo -> if_elseStatement .)
    $end            reduce using rule 4 (cuerpo -> if_elseStatement .)
    RCURLY          reduce using rule 4 (cuerpo -> if_elseStatement .)
    CONTINUE        reduce using rule 4 (cuerpo -> if_elseStatement .)
    SEMICOLON       reduce using rule 4 (cuerpo -> if_elseStatement .)
    BREAK           reduce using rule 4 (cuerpo -> if_elseStatement .)


state 5

    (5) cuerpo -> forStatement .

    OPEN_TAG        reduce using rule 5 (cuerpo -> forStatement .)
    CLOSE_TAG       reduce using rule 5 (cuerpo -> forStatement .)
    LPAREN          reduce using rule 5 (cuerpo -> forStatement .)
    IF              reduce using rule 5 (cuerpo -> forStatement .)
    FOR             reduce using rule 5 (cuerpo -> forStatement .)
    SWITCH          reduce using rule 5 (cuerpo -> forStatement .)
    ID              reduce using rule 5 (cuerpo -> forStatement .)
    FUNCTION        reduce using rule 5 (cuerpo -> forStatement .)
    FN              reduce using rule 5 (cuerpo -> forStatement .)
    ECHO            reduce using rule 5 (cuerpo -> forStatement .)
    PRINT           reduce using rule 5 (cuerpo -> forStatement .)
    INTEGER         reduce using rule 5 (cuerpo -> forStatement .)
    FLOAT           reduce using rule 5 (cuerpo -> forStatement .)
    STRING          reduce using rule 5 (cuerpo -> forStatement .)
    $end            reduce using rule 5 (cuerpo -> forStatement .)
    RCURLY          reduce using rule 5 (cuerpo -> forStatement .)
    CONTINUE        reduce using rule 5 (cuerpo -> forStatement .)
    SEMICOLON       reduce using rule 5 (cuerpo -> forStatement .)
    BREAK           reduce using rule 5 (cuerpo -> forStatement .)


state 6

    (6) cuerpo -> switchStatement .

    OPEN_TAG        reduce using rule 6 (cuerpo -> switchStatement .)
    CLOSE_TAG       reduce using rule 6 (cuerpo -> switchStatement .)
    LPAREN          reduce using rule 6 (cuerpo -> switchStatement .)
    IF              reduce using rule 6 (cuerpo -> switchStatement .)
    FOR             reduce using rule 6 (cuerpo -> switchStatement .)
    SWITCH          reduce using rule 6 (cuerpo -> switchStatement .)
    ID              reduce using rule 6 (cuerpo -> switchStatement .)
    FUNCTION        reduce using rule 6 (cuerpo -> switchStatement .)
    FN              reduce using rule 6 (cuerpo -> switchStatement .)
    ECHO            reduce using rule 6 (cuerpo -> switchStatement .)
    PRINT           reduce using rule 6 (cuerpo -> switchStatement .)
    INTEGER         reduce using rule 6 (cuerpo -> switchStatement .)
    FLOAT           reduce using rule 6 (cuerpo -> switchStatement .)
    STRING          reduce using rule 6 (cuerpo -> switchStatement .)
    $end            reduce using rule 6 (cuerpo -> switchStatement .)
    RCURLY          reduce using rule 6 (cuerpo -> switchStatement .)
    CONTINUE        reduce using rule 6 (cuerpo -> switchStatement .)
    SEMICOLON       reduce using rule 6 (cuerpo -> switchStatement .)
    BREAK           reduce using rule 6 (cuerpo -> switchStatement .)


state 7

    (7) cuerpo -> arrayAsignation .

    OPEN_TAG        reduce using rule 7 (cuerpo -> arrayAsignation .)
    CLOSE_TAG       reduce using rule 7 (cuerpo -> arrayAsignation .)
    LPAREN          reduce using rule 7 (cuerpo -> arrayAsignation .)
    IF              reduce using rule 7 (cuerpo -> arrayAsignation .)
    FOR             reduce using rule 7 (cuerpo -> arrayAsignation .)
    SWITCH          reduce using rule 7 (cuerpo -> arrayAsignation .)
    ID              reduce using rule 7 (cuerpo -> arrayAsignation .)
    FUNCTION        reduce using rule 7 (cuerpo -> arrayAsignation .)
    FN              reduce using rule 7 (cuerpo -> arrayAsignation .)
    ECHO            reduce using rule 7 (cuerpo -> arrayAsignation .)
    PRINT           reduce using rule 7 (cuerpo -> arrayAsignation .)
    INTEGER         reduce using rule 7 (cuerpo -> arrayAsignation .)
    FLOAT           reduce using rule 7 (cuerpo -> arrayAsignation .)
    STRING          reduce using rule 7 (cuerpo -> arrayAsignation .)
    $end            reduce using rule 7 (cuerpo -> arrayAsignation .)
    RCURLY          reduce using rule 7 (cuerpo -> arrayAsignation .)
    CONTINUE        reduce using rule 7 (cuerpo -> arrayAsignation .)
    SEMICOLON       reduce using rule 7 (cuerpo -> arrayAsignation .)
    BREAK           reduce using rule 7 (cuerpo -> arrayAsignation .)


state 8

    (8) cuerpo -> queueDeclaration .

    OPEN_TAG        reduce using rule 8 (cuerpo -> queueDeclaration .)
    CLOSE_TAG       reduce using rule 8 (cuerpo -> queueDeclaration .)
    LPAREN          reduce using rule 8 (cuerpo -> queueDeclaration .)
    IF              reduce using rule 8 (cuerpo -> queueDeclaration .)
    FOR             reduce using rule 8 (cuerpo -> queueDeclaration .)
    SWITCH          reduce using rule 8 (cuerpo -> queueDeclaration .)
    ID              reduce using rule 8 (cuerpo -> queueDeclaration .)
    FUNCTION        reduce using rule 8 (cuerpo -> queueDeclaration .)
    FN              reduce using rule 8 (cuerpo -> queueDeclaration .)
    ECHO            reduce using rule 8 (cuerpo -> queueDeclaration .)
    PRINT           reduce using rule 8 (cuerpo -> queueDeclaration .)
    INTEGER         reduce using rule 8 (cuerpo -> queueDeclaration .)
    FLOAT           reduce using rule 8 (cuerpo -> queueDeclaration .)
    STRING          reduce using rule 8 (cuerpo -> queueDeclaration .)
    $end            reduce using rule 8 (cuerpo -> queueDeclaration .)
    RCURLY          reduce using rule 8 (cuerpo -> queueDeclaration .)
    CONTINUE        reduce using rule 8 (cuerpo -> queueDeclaration .)
    SEMICOLON       reduce using rule 8 (cuerpo -> queueDeclaration .)
    BREAK           reduce using rule 8 (cuerpo -> queueDeclaration .)


state 9

    (9) cuerpo -> queueEnqueue .

    OPEN_TAG        reduce using rule 9 (cuerpo -> queueEnqueue .)
    CLOSE_TAG       reduce using rule 9 (cuerpo -> queueEnqueue .)
    LPAREN          reduce using rule 9 (cuerpo -> queueEnqueue .)
    IF              reduce using rule 9 (cuerpo -> queueEnqueue .)
    FOR             reduce using rule 9 (cuerpo -> queueEnqueue .)
    SWITCH          reduce using rule 9 (cuerpo -> queueEnqueue .)
    ID              reduce using rule 9 (cuerpo -> queueEnqueue .)
    FUNCTION        reduce using rule 9 (cuerpo -> queueEnqueue .)
    FN              reduce using rule 9 (cuerpo -> queueEnqueue .)
    ECHO            reduce using rule 9 (cuerpo -> queueEnqueue .)
    PRINT           reduce using rule 9 (cuerpo -> queueEnqueue .)
    INTEGER         reduce using rule 9 (cuerpo -> queueEnqueue .)
    FLOAT           reduce using rule 9 (cuerpo -> queueEnqueue .)
    STRING          reduce using rule 9 (cuerpo -> queueEnqueue .)
    $end            reduce using rule 9 (cuerpo -> queueEnqueue .)
    RCURLY          reduce using rule 9 (cuerpo -> queueEnqueue .)
    CONTINUE        reduce using rule 9 (cuerpo -> queueEnqueue .)
    SEMICOLON       reduce using rule 9 (cuerpo -> queueEnqueue .)
    BREAK           reduce using rule 9 (cuerpo -> queueEnqueue .)


state 10

    (10) cuerpo -> queueDequeue .

    OPEN_TAG        reduce using rule 10 (cuerpo -> queueDequeue .)
    CLOSE_TAG       reduce using rule 10 (cuerpo -> queueDequeue .)
    LPAREN          reduce using rule 10 (cuerpo -> queueDequeue .)
    IF              reduce using rule 10 (cuerpo -> queueDequeue .)
    FOR             reduce using rule 10 (cuerpo -> queueDequeue .)
    SWITCH          reduce using rule 10 (cuerpo -> queueDequeue .)
    ID              reduce using rule 10 (cuerpo -> queueDequeue .)
    FUNCTION        reduce using rule 10 (cuerpo -> queueDequeue .)
    FN              reduce using rule 10 (cuerpo -> queueDequeue .)
    ECHO            reduce using rule 10 (cuerpo -> queueDequeue .)
    PRINT           reduce using rule 10 (cuerpo -> queueDequeue .)
    INTEGER         reduce using rule 10 (cuerpo -> queueDequeue .)
    FLOAT           reduce using rule 10 (cuerpo -> queueDequeue .)
    STRING          reduce using rule 10 (cuerpo -> queueDequeue .)
    $end            reduce using rule 10 (cuerpo -> queueDequeue .)
    RCURLY          reduce using rule 10 (cuerpo -> queueDequeue .)
    CONTINUE        reduce using rule 10 (cuerpo -> queueDequeue .)
    SEMICOLON       reduce using rule 10 (cuerpo -> queueDequeue .)
    BREAK           reduce using rule 10 (cuerpo -> queueDequeue .)


state 11

    (11) cuerpo -> defineFunction .

    OPEN_TAG        reduce using rule 11 (cuerpo -> defineFunction .)
    CLOSE_TAG       reduce using rule 11 (cuerpo -> defineFunction .)
    LPAREN          reduce using rule 11 (cuerpo -> defineFunction .)
    IF              reduce using rule 11 (cuerpo -> defineFunction .)
    FOR             reduce using rule 11 (cuerpo -> defineFunction .)
    SWITCH          reduce using rule 11 (cuerpo -> defineFunction .)
    ID              reduce using rule 11 (cuerpo -> defineFunction .)
    FUNCTION        reduce using rule 11 (cuerpo -> defineFunction .)
    FN              reduce using rule 11 (cuerpo -> defineFunction .)
    ECHO            reduce using rule 11 (cuerpo -> defineFunction .)
    PRINT           reduce using rule 11 (cuerpo -> defineFunction .)
    INTEGER         reduce using rule 11 (cuerpo -> defineFunction .)
    FLOAT           reduce using rule 11 (cuerpo -> defineFunction .)
    STRING          reduce using rule 11 (cuerpo -> defineFunction .)
    $end            reduce using rule 11 (cuerpo -> defineFunction .)
    RCURLY          reduce using rule 11 (cuerpo -> defineFunction .)
    CONTINUE        reduce using rule 11 (cuerpo -> defineFunction .)
    SEMICOLON       reduce using rule 11 (cuerpo -> defineFunction .)
    BREAK           reduce using rule 11 (cuerpo -> defineFunction .)


state 12

    (12) cuerpo -> anonymousFunction .

    OPEN_TAG        reduce using rule 12 (cuerpo -> anonymousFunction .)
    CLOSE_TAG       reduce using rule 12 (cuerpo -> anonymousFunction .)
    LPAREN          reduce using rule 12 (cuerpo -> anonymousFunction .)
    IF              reduce using rule 12 (cuerpo -> anonymousFunction .)
    FOR             reduce using rule 12 (cuerpo -> anonymousFunction .)
    SWITCH          reduce using rule 12 (cuerpo -> anonymousFunction .)
    ID              reduce using rule 12 (cuerpo -> anonymousFunction .)
    FUNCTION        reduce using rule 12 (cuerpo -> anonymousFunction .)
    FN              reduce using rule 12 (cuerpo -> anonymousFunction .)
    ECHO            reduce using rule 12 (cuerpo -> anonymousFunction .)
    PRINT           reduce using rule 12 (cuerpo -> anonymousFunction .)
    INTEGER         reduce using rule 12 (cuerpo -> anonymousFunction .)
    FLOAT           reduce using rule 12 (cuerpo -> anonymousFunction .)
    STRING          reduce using rule 12 (cuerpo -> anonymousFunction .)
    $end            reduce using rule 12 (cuerpo -> anonymousFunction .)
    RCURLY          reduce using rule 12 (cuerpo -> anonymousFunction .)
    CONTINUE        reduce using rule 12 (cuerpo -> anonymousFunction .)
    SEMICOLON       reduce using rule 12 (cuerpo -> anonymousFunction .)
    BREAK           reduce using rule 12 (cuerpo -> anonymousFunction .)


state 13

    (13) cuerpo -> arrowFunction .

    OPEN_TAG        reduce using rule 13 (cuerpo -> arrowFunction .)
    CLOSE_TAG       reduce using rule 13 (cuerpo -> arrowFunction .)
    LPAREN          reduce using rule 13 (cuerpo -> arrowFunction .)
    IF              reduce using rule 13 (cuerpo -> arrowFunction .)
    FOR             reduce using rule 13 (cuerpo -> arrowFunction .)
    SWITCH          reduce using rule 13 (cuerpo -> arrowFunction .)
    ID              reduce using rule 13 (cuerpo -> arrowFunction .)
    FUNCTION        reduce using rule 13 (cuerpo -> arrowFunction .)
    FN              reduce using rule 13 (cuerpo -> arrowFunction .)
    ECHO            reduce using rule 13 (cuerpo -> arrowFunction .)
    PRINT           reduce using rule 13 (cuerpo -> arrowFunction .)
    INTEGER         reduce using rule 13 (cuerpo -> arrowFunction .)
    FLOAT           reduce using rule 13 (cuerpo -> arrowFunction .)
    STRING          reduce using rule 13 (cuerpo -> arrowFunction .)
    $end            reduce using rule 13 (cuerpo -> arrowFunction .)
    RCURLY          reduce using rule 13 (cuerpo -> arrowFunction .)
    CONTINUE        reduce using rule 13 (cuerpo -> arrowFunction .)
    SEMICOLON       reduce using rule 13 (cuerpo -> arrowFunction .)
    BREAK           reduce using rule 13 (cuerpo -> arrowFunction .)


state 14

    (14) cuerpo -> echo .

    OPEN_TAG        reduce using rule 14 (cuerpo -> echo .)
    CLOSE_TAG       reduce using rule 14 (cuerpo -> echo .)
    LPAREN          reduce using rule 14 (cuerpo -> echo .)
    IF              reduce using rule 14 (cuerpo -> echo .)
    FOR             reduce using rule 14 (cuerpo -> echo .)
    SWITCH          reduce using rule 14 (cuerpo -> echo .)
    ID              reduce using rule 14 (cuerpo -> echo .)
    FUNCTION        reduce using rule 14 (cuerpo -> echo .)
    FN              reduce using rule 14 (cuerpo -> echo .)
    ECHO            reduce using rule 14 (cuerpo -> echo .)
    PRINT           reduce using rule 14 (cuerpo -> echo .)
    INTEGER         reduce using rule 14 (cuerpo -> echo .)
    FLOAT           reduce using rule 14 (cuerpo -> echo .)
    STRING          reduce using rule 14 (cuerpo -> echo .)
    $end            reduce using rule 14 (cuerpo -> echo .)
    RCURLY          reduce using rule 14 (cuerpo -> echo .)
    CONTINUE        reduce using rule 14 (cuerpo -> echo .)
    SEMICOLON       reduce using rule 14 (cuerpo -> echo .)
    BREAK           reduce using rule 14 (cuerpo -> echo .)


state 15

    (15) cuerpo -> fgets .

    OPEN_TAG        reduce using rule 15 (cuerpo -> fgets .)
    CLOSE_TAG       reduce using rule 15 (cuerpo -> fgets .)
    LPAREN          reduce using rule 15 (cuerpo -> fgets .)
    IF              reduce using rule 15 (cuerpo -> fgets .)
    FOR             reduce using rule 15 (cuerpo -> fgets .)
    SWITCH          reduce using rule 15 (cuerpo -> fgets .)
    ID              reduce using rule 15 (cuerpo -> fgets .)
    FUNCTION        reduce using rule 15 (cuerpo -> fgets .)
    FN              reduce using rule 15 (cuerpo -> fgets .)
    ECHO            reduce using rule 15 (cuerpo -> fgets .)
    PRINT           reduce using rule 15 (cuerpo -> fgets .)
    INTEGER         reduce using rule 15 (cuerpo -> fgets .)
    FLOAT           reduce using rule 15 (cuerpo -> fgets .)
    STRING          reduce using rule 15 (cuerpo -> fgets .)
    $end            reduce using rule 15 (cuerpo -> fgets .)
    RCURLY          reduce using rule 15 (cuerpo -> fgets .)
    CONTINUE        reduce using rule 15 (cuerpo -> fgets .)
    SEMICOLON       reduce using rule 15 (cuerpo -> fgets .)
    BREAK           reduce using rule 15 (cuerpo -> fgets .)


state 16

    (16) cuerpo -> stackDeclaration .

    OPEN_TAG        reduce using rule 16 (cuerpo -> stackDeclaration .)
    CLOSE_TAG       reduce using rule 16 (cuerpo -> stackDeclaration .)
    LPAREN          reduce using rule 16 (cuerpo -> stackDeclaration .)
    IF              reduce using rule 16 (cuerpo -> stackDeclaration .)
    FOR             reduce using rule 16 (cuerpo -> stackDeclaration .)
    SWITCH          reduce using rule 16 (cuerpo -> stackDeclaration .)
    ID              reduce using rule 16 (cuerpo -> stackDeclaration .)
    FUNCTION        reduce using rule 16 (cuerpo -> stackDeclaration .)
    FN              reduce using rule 16 (cuerpo -> stackDeclaration .)
    ECHO            reduce using rule 16 (cuerpo -> stackDeclaration .)
    PRINT           reduce using rule 16 (cuerpo -> stackDeclaration .)
    INTEGER         reduce using rule 16 (cuerpo -> stackDeclaration .)
    FLOAT           reduce using rule 16 (cuerpo -> stackDeclaration .)
    STRING          reduce using rule 16 (cuerpo -> stackDeclaration .)
    $end            reduce using rule 16 (cuerpo -> stackDeclaration .)
    RCURLY          reduce using rule 16 (cuerpo -> stackDeclaration .)
    CONTINUE        reduce using rule 16 (cuerpo -> stackDeclaration .)
    SEMICOLON       reduce using rule 16 (cuerpo -> stackDeclaration .)
    BREAK           reduce using rule 16 (cuerpo -> stackDeclaration .)


state 17

    (17) cuerpo -> stackPush .

    OPEN_TAG        reduce using rule 17 (cuerpo -> stackPush .)
    CLOSE_TAG       reduce using rule 17 (cuerpo -> stackPush .)
    LPAREN          reduce using rule 17 (cuerpo -> stackPush .)
    IF              reduce using rule 17 (cuerpo -> stackPush .)
    FOR             reduce using rule 17 (cuerpo -> stackPush .)
    SWITCH          reduce using rule 17 (cuerpo -> stackPush .)
    ID              reduce using rule 17 (cuerpo -> stackPush .)
    FUNCTION        reduce using rule 17 (cuerpo -> stackPush .)
    FN              reduce using rule 17 (cuerpo -> stackPush .)
    ECHO            reduce using rule 17 (cuerpo -> stackPush .)
    PRINT           reduce using rule 17 (cuerpo -> stackPush .)
    INTEGER         reduce using rule 17 (cuerpo -> stackPush .)
    FLOAT           reduce using rule 17 (cuerpo -> stackPush .)
    STRING          reduce using rule 17 (cuerpo -> stackPush .)
    $end            reduce using rule 17 (cuerpo -> stackPush .)
    RCURLY          reduce using rule 17 (cuerpo -> stackPush .)
    CONTINUE        reduce using rule 17 (cuerpo -> stackPush .)
    SEMICOLON       reduce using rule 17 (cuerpo -> stackPush .)
    BREAK           reduce using rule 17 (cuerpo -> stackPush .)


state 18

    (18) cuerpo -> stackPop .

    OPEN_TAG        reduce using rule 18 (cuerpo -> stackPop .)
    CLOSE_TAG       reduce using rule 18 (cuerpo -> stackPop .)
    LPAREN          reduce using rule 18 (cuerpo -> stackPop .)
    IF              reduce using rule 18 (cuerpo -> stackPop .)
    FOR             reduce using rule 18 (cuerpo -> stackPop .)
    SWITCH          reduce using rule 18 (cuerpo -> stackPop .)
    ID              reduce using rule 18 (cuerpo -> stackPop .)
    FUNCTION        reduce using rule 18 (cuerpo -> stackPop .)
    FN              reduce using rule 18 (cuerpo -> stackPop .)
    ECHO            reduce using rule 18 (cuerpo -> stackPop .)
    PRINT           reduce using rule 18 (cuerpo -> stackPop .)
    INTEGER         reduce using rule 18 (cuerpo -> stackPop .)
    FLOAT           reduce using rule 18 (cuerpo -> stackPop .)
    STRING          reduce using rule 18 (cuerpo -> stackPop .)
    $end            reduce using rule 18 (cuerpo -> stackPop .)
    RCURLY          reduce using rule 18 (cuerpo -> stackPop .)
    CONTINUE        reduce using rule 18 (cuerpo -> stackPop .)
    SEMICOLON       reduce using rule 18 (cuerpo -> stackPop .)
    BREAK           reduce using rule 18 (cuerpo -> stackPop .)


state 19

    (19) cuerpo -> line .

    OPEN_TAG        reduce using rule 19 (cuerpo -> line .)
    CLOSE_TAG       reduce using rule 19 (cuerpo -> line .)
    LPAREN          reduce using rule 19 (cuerpo -> line .)
    IF              reduce using rule 19 (cuerpo -> line .)
    FOR             reduce using rule 19 (cuerpo -> line .)
    SWITCH          reduce using rule 19 (cuerpo -> line .)
    ID              reduce using rule 19 (cuerpo -> line .)
    FUNCTION        reduce using rule 19 (cuerpo -> line .)
    FN              reduce using rule 19 (cuerpo -> line .)
    ECHO            reduce using rule 19 (cuerpo -> line .)
    PRINT           reduce using rule 19 (cuerpo -> line .)
    INTEGER         reduce using rule 19 (cuerpo -> line .)
    FLOAT           reduce using rule 19 (cuerpo -> line .)
    STRING          reduce using rule 19 (cuerpo -> line .)
    $end            reduce using rule 19 (cuerpo -> line .)
    RCURLY          reduce using rule 19 (cuerpo -> line .)
    CONTINUE        reduce using rule 19 (cuerpo -> line .)
    SEMICOLON       reduce using rule 19 (cuerpo -> line .)
    BREAK           reduce using rule 19 (cuerpo -> line .)


state 20

    (20) cuerpo -> print .

    OPEN_TAG        reduce using rule 20 (cuerpo -> print .)
    CLOSE_TAG       reduce using rule 20 (cuerpo -> print .)
    LPAREN          reduce using rule 20 (cuerpo -> print .)
    IF              reduce using rule 20 (cuerpo -> print .)
    FOR             reduce using rule 20 (cuerpo -> print .)
    SWITCH          reduce using rule 20 (cuerpo -> print .)
    ID              reduce using rule 20 (cuerpo -> print .)
    FUNCTION        reduce using rule 20 (cuerpo -> print .)
    FN              reduce using rule 20 (cuerpo -> print .)
    ECHO            reduce using rule 20 (cuerpo -> print .)
    PRINT           reduce using rule 20 (cuerpo -> print .)
    INTEGER         reduce using rule 20 (cuerpo -> print .)
    FLOAT           reduce using rule 20 (cuerpo -> print .)
    STRING          reduce using rule 20 (cuerpo -> print .)
    $end            reduce using rule 20 (cuerpo -> print .)
    RCURLY          reduce using rule 20 (cuerpo -> print .)
    CONTINUE        reduce using rule 20 (cuerpo -> print .)
    SEMICOLON       reduce using rule 20 (cuerpo -> print .)
    BREAK           reduce using rule 20 (cuerpo -> print .)


state 21

    (21) cuerpo -> logicalCondition .

    OPEN_TAG        reduce using rule 21 (cuerpo -> logicalCondition .)
    CLOSE_TAG       reduce using rule 21 (cuerpo -> logicalCondition .)
    LPAREN          reduce using rule 21 (cuerpo -> logicalCondition .)
    IF              reduce using rule 21 (cuerpo -> logicalCondition .)
    FOR             reduce using rule 21 (cuerpo -> logicalCondition .)
    SWITCH          reduce using rule 21 (cuerpo -> logicalCondition .)
    ID              reduce using rule 21 (cuerpo -> logicalCondition .)
    FUNCTION        reduce using rule 21 (cuerpo -> logicalCondition .)
    FN              reduce using rule 21 (cuerpo -> logicalCondition .)
    ECHO            reduce using rule 21 (cuerpo -> logicalCondition .)
    PRINT           reduce using rule 21 (cuerpo -> logicalCondition .)
    INTEGER         reduce using rule 21 (cuerpo -> logicalCondition .)
    FLOAT           reduce using rule 21 (cuerpo -> logicalCondition .)
    STRING          reduce using rule 21 (cuerpo -> logicalCondition .)
    $end            reduce using rule 21 (cuerpo -> logicalCondition .)
    RCURLY          reduce using rule 21 (cuerpo -> logicalCondition .)
    CONTINUE        reduce using rule 21 (cuerpo -> logicalCondition .)
    SEMICOLON       reduce using rule 21 (cuerpo -> logicalCondition .)
    BREAK           reduce using rule 21 (cuerpo -> logicalCondition .)


state 22

    (22) cuerpo -> OPEN_TAG .

    OPEN_TAG        reduce using rule 22 (cuerpo -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 22 (cuerpo -> OPEN_TAG .)
    LPAREN          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    IF              reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FOR             reduce using rule 22 (cuerpo -> OPEN_TAG .)
    SWITCH          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    ID              reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FUNCTION        reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FN              reduce using rule 22 (cuerpo -> OPEN_TAG .)
    ECHO            reduce using rule 22 (cuerpo -> OPEN_TAG .)
    PRINT           reduce using rule 22 (cuerpo -> OPEN_TAG .)
    INTEGER         reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FLOAT           reduce using rule 22 (cuerpo -> OPEN_TAG .)
    STRING          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    $end            reduce using rule 22 (cuerpo -> OPEN_TAG .)
    RCURLY          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    CONTINUE        reduce using rule 22 (cuerpo -> OPEN_TAG .)
    SEMICOLON       reduce using rule 22 (cuerpo -> OPEN_TAG .)
    BREAK           reduce using rule 22 (cuerpo -> OPEN_TAG .)


state 23

    (23) cuerpo -> CLOSE_TAG .

    OPEN_TAG        reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    LPAREN          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    IF              reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FOR             reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    SWITCH          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    ID              reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FUNCTION        reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FN              reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    ECHO            reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    PRINT           reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    INTEGER         reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FLOAT           reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    STRING          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    $end            reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    RCURLY          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    CONTINUE        reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    SEMICOLON       reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    BREAK           reduce using rule 23 (cuerpo -> CLOSE_TAG .)


state 24

    (69) arithmeticExpression -> value .
    (100) stringConcatenation -> value . CONCAT value
    (101) stringConcatenation -> value . CONCAT stringConcatenation
    (93) comparingValue -> value . comparingSign value
    (86) comparingSign -> . IS_EQUAL
    (87) comparingSign -> . IDENTICAL
    (88) comparingSign -> . NOTEQUAL
    (89) comparingSign -> . LESSTHAN
    (90) comparingSign -> . GREATERTHAN
    (91) comparingSign -> . LESSEQUALTHAN
    (92) comparingSign -> . GREATEREQUALTHAN

    PLUS            reduce using rule 69 (arithmeticExpression -> value .)
    MINUS           reduce using rule 69 (arithmeticExpression -> value .)
    TIMES           reduce using rule 69 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 69 (arithmeticExpression -> value .)
    MOD             reduce using rule 69 (arithmeticExpression -> value .)
    EXP             reduce using rule 69 (arithmeticExpression -> value .)
    OPEN_TAG        reduce using rule 69 (arithmeticExpression -> value .)
    CLOSE_TAG       reduce using rule 69 (arithmeticExpression -> value .)
    LPAREN          reduce using rule 69 (arithmeticExpression -> value .)
    IF              reduce using rule 69 (arithmeticExpression -> value .)
    FOR             reduce using rule 69 (arithmeticExpression -> value .)
    SWITCH          reduce using rule 69 (arithmeticExpression -> value .)
    ID              reduce using rule 69 (arithmeticExpression -> value .)
    FUNCTION        reduce using rule 69 (arithmeticExpression -> value .)
    FN              reduce using rule 69 (arithmeticExpression -> value .)
    ECHO            reduce using rule 69 (arithmeticExpression -> value .)
    PRINT           reduce using rule 69 (arithmeticExpression -> value .)
    INTEGER         reduce using rule 69 (arithmeticExpression -> value .)
    FLOAT           reduce using rule 69 (arithmeticExpression -> value .)
    STRING          reduce using rule 69 (arithmeticExpression -> value .)
    $end            reduce using rule 69 (arithmeticExpression -> value .)
    RCURLY          reduce using rule 69 (arithmeticExpression -> value .)
    CONTINUE        reduce using rule 69 (arithmeticExpression -> value .)
    SEMICOLON       reduce using rule 69 (arithmeticExpression -> value .)
    BREAK           reduce using rule 69 (arithmeticExpression -> value .)
    CONCAT          shift and go to state 48
    IS_EQUAL        shift and go to state 50
    IDENTICAL       shift and go to state 51
    NOTEQUAL        shift and go to state 52
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUALTHAN   shift and go to state 55
    GREATEREQUALTHAN shift and go to state 56

    comparingSign                  shift and go to state 49

state 25

    (71) arithmeticExpression -> LPAREN . arithmeticExpression RPAREN
    (96) logicalCondition -> LPAREN . logicalCondition RPAREN
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (93) comparingValue -> . value comparingSign value

    LPAREN          shift and go to state 25
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arithmeticExpression           shift and go to state 57
    logicalCondition               shift and go to state 58
    value                          shift and go to state 59
    comparingValue                 shift and go to state 36

state 26

    (29) if_elseStatement -> IF . LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> IF . LPAREN logicalCondition RPAREN LCURLY ifStatementBody

    LPAREN          shift and go to state 61


state 27

    (34) forStatement -> FOR . LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY

    LPAREN          shift and go to state 62


state 28

    (24) switchStatement -> SWITCH . LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY

    LPAREN          shift and go to state 63


state 29

    (40) arrayAsignation -> ID . EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> ID . EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> ID . OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> ID . OBJOP POP SEMICOLON
    (68) fgets -> ID . EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> ID . EQUAL NEW STACK SEMICOLON
    (49) stackPush -> ID . OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> ID . OBJOP POP SEMICOLON
    (72) value -> ID .
    (84) variableAsignation -> ID . EQUAL value
    (85) variableAsignation -> ID . EQUAL arithmeticExpression

    EQUAL           shift and go to state 64
    OBJOP           shift and go to state 65
    CONCAT          reduce using rule 72 (value -> ID .)
    IS_EQUAL        reduce using rule 72 (value -> ID .)
    IDENTICAL       reduce using rule 72 (value -> ID .)
    NOTEQUAL        reduce using rule 72 (value -> ID .)
    LESSTHAN        reduce using rule 72 (value -> ID .)
    GREATERTHAN     reduce using rule 72 (value -> ID .)
    LESSEQUALTHAN   reduce using rule 72 (value -> ID .)
    GREATEREQUALTHAN reduce using rule 72 (value -> ID .)
    PLUS            reduce using rule 72 (value -> ID .)
    MINUS           reduce using rule 72 (value -> ID .)
    TIMES           reduce using rule 72 (value -> ID .)
    DIVIDE          reduce using rule 72 (value -> ID .)
    MOD             reduce using rule 72 (value -> ID .)
    EXP             reduce using rule 72 (value -> ID .)
    OPEN_TAG        reduce using rule 72 (value -> ID .)
    CLOSE_TAG       reduce using rule 72 (value -> ID .)
    LPAREN          reduce using rule 72 (value -> ID .)
    IF              reduce using rule 72 (value -> ID .)
    FOR             reduce using rule 72 (value -> ID .)
    SWITCH          reduce using rule 72 (value -> ID .)
    ID              reduce using rule 72 (value -> ID .)
    FUNCTION        reduce using rule 72 (value -> ID .)
    FN              reduce using rule 72 (value -> ID .)
    ECHO            reduce using rule 72 (value -> ID .)
    PRINT           reduce using rule 72 (value -> ID .)
    INTEGER         reduce using rule 72 (value -> ID .)
    FLOAT           reduce using rule 72 (value -> ID .)
    STRING          reduce using rule 72 (value -> ID .)
    $end            reduce using rule 72 (value -> ID .)
    RCURLY          reduce using rule 72 (value -> ID .)
    CONTINUE        reduce using rule 72 (value -> ID .)
    SEMICOLON       reduce using rule 72 (value -> ID .)
    BREAK           reduce using rule 72 (value -> ID .)


state 30

    (54) defineFunction -> FUNCTION . ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> FUNCTION . ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> FUNCTION . LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> FUNCTION . LPAREN arguments RPAREN LCURLY cuerpo RCURLY

    ID              shift and go to state 66
    LPAREN          shift and go to state 67


state 31

    (60) arrowFunction -> FN . LPAREN ID RPAREN FNARROW arrowBody SEMICOLON

    LPAREN          shift and go to state 68


state 32

    (63) echo -> ECHO . values SEMICOLON
    (66) values -> . value
    (67) values -> . values COMMA value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    values                         shift and go to state 69
    value                          shift and go to state 70

state 33

    (82) line -> variableAsignation . SEMICOLON

    SEMICOLON       shift and go to state 71


state 34

    (83) line -> stringConcatenation . SEMICOLON
    (102) stringConcatenation -> stringConcatenation . CONCAT value

    SEMICOLON       shift and go to state 72
    CONCAT          shift and go to state 73


state 35

    (64) print -> PRINT . LPAREN values RPAREN SEMICOLON
    (65) print -> PRINT . value SEMICOLON
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    LPAREN          shift and go to state 74
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 75

state 36

    (94) logicalCondition -> comparingValue .
    (95) logicalCondition -> comparingValue . conditionOperator comparingValue
    (97) conditionOperator -> . AND
    (98) conditionOperator -> . OR
    (99) conditionOperator -> . XOR

    OPEN_TAG        reduce using rule 94 (logicalCondition -> comparingValue .)
    CLOSE_TAG       reduce using rule 94 (logicalCondition -> comparingValue .)
    LPAREN          reduce using rule 94 (logicalCondition -> comparingValue .)
    IF              reduce using rule 94 (logicalCondition -> comparingValue .)
    FOR             reduce using rule 94 (logicalCondition -> comparingValue .)
    SWITCH          reduce using rule 94 (logicalCondition -> comparingValue .)
    ID              reduce using rule 94 (logicalCondition -> comparingValue .)
    FUNCTION        reduce using rule 94 (logicalCondition -> comparingValue .)
    FN              reduce using rule 94 (logicalCondition -> comparingValue .)
    ECHO            reduce using rule 94 (logicalCondition -> comparingValue .)
    PRINT           reduce using rule 94 (logicalCondition -> comparingValue .)
    INTEGER         reduce using rule 94 (logicalCondition -> comparingValue .)
    FLOAT           reduce using rule 94 (logicalCondition -> comparingValue .)
    STRING          reduce using rule 94 (logicalCondition -> comparingValue .)
    $end            reduce using rule 94 (logicalCondition -> comparingValue .)
    RPAREN          reduce using rule 94 (logicalCondition -> comparingValue .)
    RCURLY          reduce using rule 94 (logicalCondition -> comparingValue .)
    CONTINUE        reduce using rule 94 (logicalCondition -> comparingValue .)
    SEMICOLON       reduce using rule 94 (logicalCondition -> comparingValue .)
    BREAK           reduce using rule 94 (logicalCondition -> comparingValue .)
    AND             shift and go to state 77
    OR              shift and go to state 78
    XOR             shift and go to state 79

    conditionOperator              shift and go to state 76

state 37

    (73) value -> INTEGER .

    CONCAT          reduce using rule 73 (value -> INTEGER .)
    IS_EQUAL        reduce using rule 73 (value -> INTEGER .)
    IDENTICAL       reduce using rule 73 (value -> INTEGER .)
    NOTEQUAL        reduce using rule 73 (value -> INTEGER .)
    LESSTHAN        reduce using rule 73 (value -> INTEGER .)
    GREATERTHAN     reduce using rule 73 (value -> INTEGER .)
    LESSEQUALTHAN   reduce using rule 73 (value -> INTEGER .)
    GREATEREQUALTHAN reduce using rule 73 (value -> INTEGER .)
    PLUS            reduce using rule 73 (value -> INTEGER .)
    MINUS           reduce using rule 73 (value -> INTEGER .)
    TIMES           reduce using rule 73 (value -> INTEGER .)
    DIVIDE          reduce using rule 73 (value -> INTEGER .)
    MOD             reduce using rule 73 (value -> INTEGER .)
    EXP             reduce using rule 73 (value -> INTEGER .)
    OPEN_TAG        reduce using rule 73 (value -> INTEGER .)
    CLOSE_TAG       reduce using rule 73 (value -> INTEGER .)
    LPAREN          reduce using rule 73 (value -> INTEGER .)
    IF              reduce using rule 73 (value -> INTEGER .)
    FOR             reduce using rule 73 (value -> INTEGER .)
    SWITCH          reduce using rule 73 (value -> INTEGER .)
    ID              reduce using rule 73 (value -> INTEGER .)
    FUNCTION        reduce using rule 73 (value -> INTEGER .)
    FN              reduce using rule 73 (value -> INTEGER .)
    ECHO            reduce using rule 73 (value -> INTEGER .)
    PRINT           reduce using rule 73 (value -> INTEGER .)
    INTEGER         reduce using rule 73 (value -> INTEGER .)
    FLOAT           reduce using rule 73 (value -> INTEGER .)
    STRING          reduce using rule 73 (value -> INTEGER .)
    $end            reduce using rule 73 (value -> INTEGER .)
    RPAREN          reduce using rule 73 (value -> INTEGER .)
    SEMICOLON       reduce using rule 73 (value -> INTEGER .)
    COMMA           reduce using rule 73 (value -> INTEGER .)
    RCURLY          reduce using rule 73 (value -> INTEGER .)
    CONTINUE        reduce using rule 73 (value -> INTEGER .)
    BREAK           reduce using rule 73 (value -> INTEGER .)
    AND             reduce using rule 73 (value -> INTEGER .)
    OR              reduce using rule 73 (value -> INTEGER .)
    XOR             reduce using rule 73 (value -> INTEGER .)
    RSQUARE         reduce using rule 73 (value -> INTEGER .)
    COLON           reduce using rule 73 (value -> INTEGER .)


state 38

    (74) value -> FLOAT .

    CONCAT          reduce using rule 74 (value -> FLOAT .)
    IS_EQUAL        reduce using rule 74 (value -> FLOAT .)
    IDENTICAL       reduce using rule 74 (value -> FLOAT .)
    NOTEQUAL        reduce using rule 74 (value -> FLOAT .)
    LESSTHAN        reduce using rule 74 (value -> FLOAT .)
    GREATERTHAN     reduce using rule 74 (value -> FLOAT .)
    LESSEQUALTHAN   reduce using rule 74 (value -> FLOAT .)
    GREATEREQUALTHAN reduce using rule 74 (value -> FLOAT .)
    PLUS            reduce using rule 74 (value -> FLOAT .)
    MINUS           reduce using rule 74 (value -> FLOAT .)
    TIMES           reduce using rule 74 (value -> FLOAT .)
    DIVIDE          reduce using rule 74 (value -> FLOAT .)
    MOD             reduce using rule 74 (value -> FLOAT .)
    EXP             reduce using rule 74 (value -> FLOAT .)
    OPEN_TAG        reduce using rule 74 (value -> FLOAT .)
    CLOSE_TAG       reduce using rule 74 (value -> FLOAT .)
    LPAREN          reduce using rule 74 (value -> FLOAT .)
    IF              reduce using rule 74 (value -> FLOAT .)
    FOR             reduce using rule 74 (value -> FLOAT .)
    SWITCH          reduce using rule 74 (value -> FLOAT .)
    ID              reduce using rule 74 (value -> FLOAT .)
    FUNCTION        reduce using rule 74 (value -> FLOAT .)
    FN              reduce using rule 74 (value -> FLOAT .)
    ECHO            reduce using rule 74 (value -> FLOAT .)
    PRINT           reduce using rule 74 (value -> FLOAT .)
    INTEGER         reduce using rule 74 (value -> FLOAT .)
    FLOAT           reduce using rule 74 (value -> FLOAT .)
    STRING          reduce using rule 74 (value -> FLOAT .)
    $end            reduce using rule 74 (value -> FLOAT .)
    RPAREN          reduce using rule 74 (value -> FLOAT .)
    SEMICOLON       reduce using rule 74 (value -> FLOAT .)
    COMMA           reduce using rule 74 (value -> FLOAT .)
    RCURLY          reduce using rule 74 (value -> FLOAT .)
    CONTINUE        reduce using rule 74 (value -> FLOAT .)
    BREAK           reduce using rule 74 (value -> FLOAT .)
    AND             reduce using rule 74 (value -> FLOAT .)
    OR              reduce using rule 74 (value -> FLOAT .)
    XOR             reduce using rule 74 (value -> FLOAT .)
    RSQUARE         reduce using rule 74 (value -> FLOAT .)
    COLON           reduce using rule 74 (value -> FLOAT .)


state 39

    (75) value -> STRING .

    CONCAT          reduce using rule 75 (value -> STRING .)
    IS_EQUAL        reduce using rule 75 (value -> STRING .)
    IDENTICAL       reduce using rule 75 (value -> STRING .)
    NOTEQUAL        reduce using rule 75 (value -> STRING .)
    LESSTHAN        reduce using rule 75 (value -> STRING .)
    GREATERTHAN     reduce using rule 75 (value -> STRING .)
    LESSEQUALTHAN   reduce using rule 75 (value -> STRING .)
    GREATEREQUALTHAN reduce using rule 75 (value -> STRING .)
    PLUS            reduce using rule 75 (value -> STRING .)
    MINUS           reduce using rule 75 (value -> STRING .)
    TIMES           reduce using rule 75 (value -> STRING .)
    DIVIDE          reduce using rule 75 (value -> STRING .)
    MOD             reduce using rule 75 (value -> STRING .)
    EXP             reduce using rule 75 (value -> STRING .)
    OPEN_TAG        reduce using rule 75 (value -> STRING .)
    CLOSE_TAG       reduce using rule 75 (value -> STRING .)
    LPAREN          reduce using rule 75 (value -> STRING .)
    IF              reduce using rule 75 (value -> STRING .)
    FOR             reduce using rule 75 (value -> STRING .)
    SWITCH          reduce using rule 75 (value -> STRING .)
    ID              reduce using rule 75 (value -> STRING .)
    FUNCTION        reduce using rule 75 (value -> STRING .)
    FN              reduce using rule 75 (value -> STRING .)
    ECHO            reduce using rule 75 (value -> STRING .)
    PRINT           reduce using rule 75 (value -> STRING .)
    INTEGER         reduce using rule 75 (value -> STRING .)
    FLOAT           reduce using rule 75 (value -> STRING .)
    STRING          reduce using rule 75 (value -> STRING .)
    $end            reduce using rule 75 (value -> STRING .)
    RPAREN          reduce using rule 75 (value -> STRING .)
    SEMICOLON       reduce using rule 75 (value -> STRING .)
    COMMA           reduce using rule 75 (value -> STRING .)
    RCURLY          reduce using rule 75 (value -> STRING .)
    CONTINUE        reduce using rule 75 (value -> STRING .)
    BREAK           reduce using rule 75 (value -> STRING .)
    AND             reduce using rule 75 (value -> STRING .)
    OR              reduce using rule 75 (value -> STRING .)
    XOR             reduce using rule 75 (value -> STRING .)
    RSQUARE         reduce using rule 75 (value -> STRING .)
    COLON           reduce using rule 75 (value -> STRING .)


state 40

    (2) programa -> programa cuerpo .

    OPEN_TAG        reduce using rule 2 (programa -> programa cuerpo .)
    CLOSE_TAG       reduce using rule 2 (programa -> programa cuerpo .)
    LPAREN          reduce using rule 2 (programa -> programa cuerpo .)
    IF              reduce using rule 2 (programa -> programa cuerpo .)
    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    ID              reduce using rule 2 (programa -> programa cuerpo .)
    FUNCTION        reduce using rule 2 (programa -> programa cuerpo .)
    FN              reduce using rule 2 (programa -> programa cuerpo .)
    ECHO            reduce using rule 2 (programa -> programa cuerpo .)
    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    INTEGER         reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)
    RCURLY          reduce using rule 2 (programa -> programa cuerpo .)
    BREAK           reduce using rule 2 (programa -> programa cuerpo .)


state 41

    (70) arithmeticExpression -> arithmeticExpression arithmeticOperator . arithmeticExpression
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    LPAREN          shift and go to state 82
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arithmeticExpression           shift and go to state 80
    value                          shift and go to state 81

state 42

    (76) arithmeticOperator -> PLUS .

    LPAREN          reduce using rule 76 (arithmeticOperator -> PLUS .)
    ID              reduce using rule 76 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 76 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 76 (arithmeticOperator -> PLUS .)
    STRING          reduce using rule 76 (arithmeticOperator -> PLUS .)


state 43

    (77) arithmeticOperator -> MINUS .

    LPAREN          reduce using rule 77 (arithmeticOperator -> MINUS .)
    ID              reduce using rule 77 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 77 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 77 (arithmeticOperator -> MINUS .)
    STRING          reduce using rule 77 (arithmeticOperator -> MINUS .)


state 44

    (78) arithmeticOperator -> TIMES .

    LPAREN          reduce using rule 78 (arithmeticOperator -> TIMES .)
    ID              reduce using rule 78 (arithmeticOperator -> TIMES .)
    INTEGER         reduce using rule 78 (arithmeticOperator -> TIMES .)
    FLOAT           reduce using rule 78 (arithmeticOperator -> TIMES .)
    STRING          reduce using rule 78 (arithmeticOperator -> TIMES .)


state 45

    (79) arithmeticOperator -> DIVIDE .

    LPAREN          reduce using rule 79 (arithmeticOperator -> DIVIDE .)
    ID              reduce using rule 79 (arithmeticOperator -> DIVIDE .)
    INTEGER         reduce using rule 79 (arithmeticOperator -> DIVIDE .)
    FLOAT           reduce using rule 79 (arithmeticOperator -> DIVIDE .)
    STRING          reduce using rule 79 (arithmeticOperator -> DIVIDE .)


state 46

    (80) arithmeticOperator -> MOD .

    LPAREN          reduce using rule 80 (arithmeticOperator -> MOD .)
    ID              reduce using rule 80 (arithmeticOperator -> MOD .)
    INTEGER         reduce using rule 80 (arithmeticOperator -> MOD .)
    FLOAT           reduce using rule 80 (arithmeticOperator -> MOD .)
    STRING          reduce using rule 80 (arithmeticOperator -> MOD .)


state 47

    (81) arithmeticOperator -> EXP .

    LPAREN          reduce using rule 81 (arithmeticOperator -> EXP .)
    ID              reduce using rule 81 (arithmeticOperator -> EXP .)
    INTEGER         reduce using rule 81 (arithmeticOperator -> EXP .)
    FLOAT           reduce using rule 81 (arithmeticOperator -> EXP .)
    STRING          reduce using rule 81 (arithmeticOperator -> EXP .)


state 48

    (100) stringConcatenation -> value CONCAT . value
    (101) stringConcatenation -> value CONCAT . stringConcatenation
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 83
    stringConcatenation            shift and go to state 84

state 49

    (93) comparingValue -> value comparingSign . value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 85

state 50

    (86) comparingSign -> IS_EQUAL .

    ID              reduce using rule 86 (comparingSign -> IS_EQUAL .)
    INTEGER         reduce using rule 86 (comparingSign -> IS_EQUAL .)
    FLOAT           reduce using rule 86 (comparingSign -> IS_EQUAL .)
    STRING          reduce using rule 86 (comparingSign -> IS_EQUAL .)


state 51

    (87) comparingSign -> IDENTICAL .

    ID              reduce using rule 87 (comparingSign -> IDENTICAL .)
    INTEGER         reduce using rule 87 (comparingSign -> IDENTICAL .)
    FLOAT           reduce using rule 87 (comparingSign -> IDENTICAL .)
    STRING          reduce using rule 87 (comparingSign -> IDENTICAL .)


state 52

    (88) comparingSign -> NOTEQUAL .

    ID              reduce using rule 88 (comparingSign -> NOTEQUAL .)
    INTEGER         reduce using rule 88 (comparingSign -> NOTEQUAL .)
    FLOAT           reduce using rule 88 (comparingSign -> NOTEQUAL .)
    STRING          reduce using rule 88 (comparingSign -> NOTEQUAL .)


state 53

    (89) comparingSign -> LESSTHAN .

    ID              reduce using rule 89 (comparingSign -> LESSTHAN .)
    INTEGER         reduce using rule 89 (comparingSign -> LESSTHAN .)
    FLOAT           reduce using rule 89 (comparingSign -> LESSTHAN .)
    STRING          reduce using rule 89 (comparingSign -> LESSTHAN .)


state 54

    (90) comparingSign -> GREATERTHAN .

    ID              reduce using rule 90 (comparingSign -> GREATERTHAN .)
    INTEGER         reduce using rule 90 (comparingSign -> GREATERTHAN .)
    FLOAT           reduce using rule 90 (comparingSign -> GREATERTHAN .)
    STRING          reduce using rule 90 (comparingSign -> GREATERTHAN .)


state 55

    (91) comparingSign -> LESSEQUALTHAN .

    ID              reduce using rule 91 (comparingSign -> LESSEQUALTHAN .)
    INTEGER         reduce using rule 91 (comparingSign -> LESSEQUALTHAN .)
    FLOAT           reduce using rule 91 (comparingSign -> LESSEQUALTHAN .)
    STRING          reduce using rule 91 (comparingSign -> LESSEQUALTHAN .)


state 56

    (92) comparingSign -> GREATEREQUALTHAN .

    ID              reduce using rule 92 (comparingSign -> GREATEREQUALTHAN .)
    INTEGER         reduce using rule 92 (comparingSign -> GREATEREQUALTHAN .)
    FLOAT           reduce using rule 92 (comparingSign -> GREATEREQUALTHAN .)
    STRING          reduce using rule 92 (comparingSign -> GREATEREQUALTHAN .)


state 57

    (71) arithmeticExpression -> LPAREN arithmeticExpression . RPAREN
    (70) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (76) arithmeticOperator -> . PLUS
    (77) arithmeticOperator -> . MINUS
    (78) arithmeticOperator -> . TIMES
    (79) arithmeticOperator -> . DIVIDE
    (80) arithmeticOperator -> . MOD
    (81) arithmeticOperator -> . EXP

    RPAREN          shift and go to state 86
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    EXP             shift and go to state 47

    arithmeticOperator             shift and go to state 41

state 58

    (96) logicalCondition -> LPAREN logicalCondition . RPAREN

    RPAREN          shift and go to state 87


state 59

    (69) arithmeticExpression -> value .
    (93) comparingValue -> value . comparingSign value
    (86) comparingSign -> . IS_EQUAL
    (87) comparingSign -> . IDENTICAL
    (88) comparingSign -> . NOTEQUAL
    (89) comparingSign -> . LESSTHAN
    (90) comparingSign -> . GREATERTHAN
    (91) comparingSign -> . LESSEQUALTHAN
    (92) comparingSign -> . GREATEREQUALTHAN

    RPAREN          reduce using rule 69 (arithmeticExpression -> value .)
    PLUS            reduce using rule 69 (arithmeticExpression -> value .)
    MINUS           reduce using rule 69 (arithmeticExpression -> value .)
    TIMES           reduce using rule 69 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 69 (arithmeticExpression -> value .)
    MOD             reduce using rule 69 (arithmeticExpression -> value .)
    EXP             reduce using rule 69 (arithmeticExpression -> value .)
    IS_EQUAL        shift and go to state 50
    IDENTICAL       shift and go to state 51
    NOTEQUAL        shift and go to state 52
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUALTHAN   shift and go to state 55
    GREATEREQUALTHAN shift and go to state 56

    comparingSign                  shift and go to state 49

state 60

    (72) value -> ID .

    IS_EQUAL        reduce using rule 72 (value -> ID .)
    IDENTICAL       reduce using rule 72 (value -> ID .)
    NOTEQUAL        reduce using rule 72 (value -> ID .)
    LESSTHAN        reduce using rule 72 (value -> ID .)
    GREATERTHAN     reduce using rule 72 (value -> ID .)
    LESSEQUALTHAN   reduce using rule 72 (value -> ID .)
    GREATEREQUALTHAN reduce using rule 72 (value -> ID .)
    RPAREN          reduce using rule 72 (value -> ID .)
    PLUS            reduce using rule 72 (value -> ID .)
    MINUS           reduce using rule 72 (value -> ID .)
    TIMES           reduce using rule 72 (value -> ID .)
    DIVIDE          reduce using rule 72 (value -> ID .)
    MOD             reduce using rule 72 (value -> ID .)
    EXP             reduce using rule 72 (value -> ID .)
    SEMICOLON       reduce using rule 72 (value -> ID .)
    COMMA           reduce using rule 72 (value -> ID .)
    OPEN_TAG        reduce using rule 72 (value -> ID .)
    CLOSE_TAG       reduce using rule 72 (value -> ID .)
    LPAREN          reduce using rule 72 (value -> ID .)
    IF              reduce using rule 72 (value -> ID .)
    FOR             reduce using rule 72 (value -> ID .)
    SWITCH          reduce using rule 72 (value -> ID .)
    ID              reduce using rule 72 (value -> ID .)
    FUNCTION        reduce using rule 72 (value -> ID .)
    FN              reduce using rule 72 (value -> ID .)
    ECHO            reduce using rule 72 (value -> ID .)
    PRINT           reduce using rule 72 (value -> ID .)
    INTEGER         reduce using rule 72 (value -> ID .)
    FLOAT           reduce using rule 72 (value -> ID .)
    STRING          reduce using rule 72 (value -> ID .)
    $end            reduce using rule 72 (value -> ID .)
    RCURLY          reduce using rule 72 (value -> ID .)
    CONTINUE        reduce using rule 72 (value -> ID .)
    BREAK           reduce using rule 72 (value -> ID .)
    CONCAT          reduce using rule 72 (value -> ID .)
    AND             reduce using rule 72 (value -> ID .)
    OR              reduce using rule 72 (value -> ID .)
    XOR             reduce using rule 72 (value -> ID .)
    RSQUARE         reduce using rule 72 (value -> ID .)
    COLON           reduce using rule 72 (value -> ID .)


state 61

    (29) if_elseStatement -> IF LPAREN . logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> IF LPAREN . logicalCondition RPAREN LCURLY ifStatementBody
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (93) comparingValue -> . value comparingSign value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    logicalCondition               shift and go to state 89
    comparingValue                 shift and go to state 36
    value                          shift and go to state 90

state 62

    (34) forStatement -> FOR LPAREN . forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (35) forStatementCondition -> . SEMICOLON SEMICOLON
    (36) forStatementCondition -> . variableAsignation SEMICOLON SEMICOLON variableAsignation
    (37) forStatementCondition -> . variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression

    SEMICOLON       shift and go to state 92
    ID              shift and go to state 94

    forStatementCondition          shift and go to state 91
    variableAsignation             shift and go to state 93

state 63

    (24) switchStatement -> SWITCH LPAREN . value RPAREN LCURLY switchCases switchDefault RCURLY
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 95

state 64

    (40) arrayAsignation -> ID EQUAL . arrayDeclaration SEMICOLON
    (51) queueDeclaration -> ID EQUAL . NEW QUEUE SEMICOLON
    (68) fgets -> ID EQUAL . FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> ID EQUAL . NEW STACK SEMICOLON
    (84) variableAsignation -> ID EQUAL . value
    (85) variableAsignation -> ID EQUAL . arithmeticExpression
    (41) arrayDeclaration -> . ARRAY arraysValues RPAREN
    (42) arrayDeclaration -> . LSQUARE arraysValues RSQUARE
    (43) arrayDeclaration -> . arrayValue
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (46) arrayValue -> . ARRAY values RPAREN
    (47) arrayValue -> . LSQUARE values RSQUARE

    NEW             shift and go to state 97
    FGETS           shift and go to state 98
    ARRAY           shift and go to state 101
    LSQUARE         shift and go to state 102
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    LPAREN          shift and go to state 82

    arrayDeclaration               shift and go to state 96
    value                          shift and go to state 99
    arithmeticExpression           shift and go to state 100
    arrayValue                     shift and go to state 103

state 65

    (52) queueEnqueue -> ID OBJOP . PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> ID OBJOP . POP SEMICOLON
    (49) stackPush -> ID OBJOP . PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> ID OBJOP . POP SEMICOLON

    PUSH            shift and go to state 104
    POP             shift and go to state 105


state 66

    (54) defineFunction -> FUNCTION ID . LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> FUNCTION ID . LPAREN RPAREN LCURLY cuerpo RCURLY

    LPAREN          shift and go to state 106


state 67

    (58) anonymousFunction -> FUNCTION LPAREN . RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> FUNCTION LPAREN . arguments RPAREN LCURLY cuerpo RCURLY
    (56) arguments -> . ID
    (57) arguments -> . ID COMMA arguments

    RPAREN          shift and go to state 107
    ID              shift and go to state 109

    arguments                      shift and go to state 108

state 68

    (60) arrowFunction -> FN LPAREN . ID RPAREN FNARROW arrowBody SEMICOLON

    ID              shift and go to state 110


state 69

    (63) echo -> ECHO values . SEMICOLON
    (67) values -> values . COMMA value

    SEMICOLON       shift and go to state 111
    COMMA           shift and go to state 112


state 70

    (66) values -> value .

    SEMICOLON       reduce using rule 66 (values -> value .)
    COMMA           reduce using rule 66 (values -> value .)
    RPAREN          reduce using rule 66 (values -> value .)
    RSQUARE         reduce using rule 66 (values -> value .)


state 71

    (82) line -> variableAsignation SEMICOLON .

    OPEN_TAG        reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    CLOSE_TAG       reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    LPAREN          reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    IF              reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    FOR             reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    SWITCH          reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    ID              reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    FUNCTION        reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    FN              reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    ECHO            reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    PRINT           reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    INTEGER         reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    FLOAT           reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    STRING          reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    $end            reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    RCURLY          reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    CONTINUE        reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    SEMICOLON       reduce using rule 82 (line -> variableAsignation SEMICOLON .)
    BREAK           reduce using rule 82 (line -> variableAsignation SEMICOLON .)


state 72

    (83) line -> stringConcatenation SEMICOLON .

    OPEN_TAG        reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    CLOSE_TAG       reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    LPAREN          reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    IF              reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    FOR             reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    SWITCH          reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    ID              reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    FUNCTION        reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    FN              reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    ECHO            reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    PRINT           reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    INTEGER         reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    FLOAT           reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    STRING          reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    $end            reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    RCURLY          reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    CONTINUE        reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    SEMICOLON       reduce using rule 83 (line -> stringConcatenation SEMICOLON .)
    BREAK           reduce using rule 83 (line -> stringConcatenation SEMICOLON .)


state 73

    (102) stringConcatenation -> stringConcatenation CONCAT . value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 113

state 74

    (64) print -> PRINT LPAREN . values RPAREN SEMICOLON
    (66) values -> . value
    (67) values -> . values COMMA value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    values                         shift and go to state 114
    value                          shift and go to state 70

state 75

    (65) print -> PRINT value . SEMICOLON

    SEMICOLON       shift and go to state 115


state 76

    (95) logicalCondition -> comparingValue conditionOperator . comparingValue
    (93) comparingValue -> . value comparingSign value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparingValue                 shift and go to state 116
    value                          shift and go to state 90

state 77

    (97) conditionOperator -> AND .

    ID              reduce using rule 97 (conditionOperator -> AND .)
    INTEGER         reduce using rule 97 (conditionOperator -> AND .)
    FLOAT           reduce using rule 97 (conditionOperator -> AND .)
    STRING          reduce using rule 97 (conditionOperator -> AND .)


state 78

    (98) conditionOperator -> OR .

    ID              reduce using rule 98 (conditionOperator -> OR .)
    INTEGER         reduce using rule 98 (conditionOperator -> OR .)
    FLOAT           reduce using rule 98 (conditionOperator -> OR .)
    STRING          reduce using rule 98 (conditionOperator -> OR .)


state 79

    (99) conditionOperator -> XOR .

    ID              reduce using rule 99 (conditionOperator -> XOR .)
    INTEGER         reduce using rule 99 (conditionOperator -> XOR .)
    FLOAT           reduce using rule 99 (conditionOperator -> XOR .)
    STRING          reduce using rule 99 (conditionOperator -> XOR .)


state 80

    (70) arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .
    (70) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (76) arithmeticOperator -> . PLUS
    (77) arithmeticOperator -> . MINUS
    (78) arithmeticOperator -> . TIMES
    (79) arithmeticOperator -> . DIVIDE
    (80) arithmeticOperator -> . MOD
    (81) arithmeticOperator -> . EXP

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
    OPEN_TAG        reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    CLOSE_TAG       reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    LPAREN          reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    IF              reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FOR             reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    SWITCH          reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    ID              reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FUNCTION        reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FN              reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    ECHO            reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    PRINT           reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    INTEGER         reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FLOAT           reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    STRING          reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    $end            reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    RPAREN          reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    SEMICOLON       reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    RCURLY          reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    CONTINUE        reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    BREAK           reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    EXP             shift and go to state 47

  ! PLUS            [ reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! MINUS           [ reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! TIMES           [ reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! DIVIDE          [ reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! MOD             [ reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! EXP             [ reduce using rule 70 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]

    arithmeticOperator             shift and go to state 41

state 81

    (69) arithmeticExpression -> value .

    PLUS            reduce using rule 69 (arithmeticExpression -> value .)
    MINUS           reduce using rule 69 (arithmeticExpression -> value .)
    TIMES           reduce using rule 69 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 69 (arithmeticExpression -> value .)
    MOD             reduce using rule 69 (arithmeticExpression -> value .)
    EXP             reduce using rule 69 (arithmeticExpression -> value .)
    OPEN_TAG        reduce using rule 69 (arithmeticExpression -> value .)
    CLOSE_TAG       reduce using rule 69 (arithmeticExpression -> value .)
    LPAREN          reduce using rule 69 (arithmeticExpression -> value .)
    IF              reduce using rule 69 (arithmeticExpression -> value .)
    FOR             reduce using rule 69 (arithmeticExpression -> value .)
    SWITCH          reduce using rule 69 (arithmeticExpression -> value .)
    ID              reduce using rule 69 (arithmeticExpression -> value .)
    FUNCTION        reduce using rule 69 (arithmeticExpression -> value .)
    FN              reduce using rule 69 (arithmeticExpression -> value .)
    ECHO            reduce using rule 69 (arithmeticExpression -> value .)
    PRINT           reduce using rule 69 (arithmeticExpression -> value .)
    INTEGER         reduce using rule 69 (arithmeticExpression -> value .)
    FLOAT           reduce using rule 69 (arithmeticExpression -> value .)
    STRING          reduce using rule 69 (arithmeticExpression -> value .)
    $end            reduce using rule 69 (arithmeticExpression -> value .)
    RPAREN          reduce using rule 69 (arithmeticExpression -> value .)
    SEMICOLON       reduce using rule 69 (arithmeticExpression -> value .)
    RCURLY          reduce using rule 69 (arithmeticExpression -> value .)
    CONTINUE        reduce using rule 69 (arithmeticExpression -> value .)
    BREAK           reduce using rule 69 (arithmeticExpression -> value .)


state 82

    (71) arithmeticExpression -> LPAREN . arithmeticExpression RPAREN
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    LPAREN          shift and go to state 82
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arithmeticExpression           shift and go to state 57
    value                          shift and go to state 81

state 83

    (100) stringConcatenation -> value CONCAT value .
    (100) stringConcatenation -> value . CONCAT value
    (101) stringConcatenation -> value . CONCAT stringConcatenation

  ! shift/reduce conflict for CONCAT resolved as shift
    SEMICOLON       reduce using rule 100 (stringConcatenation -> value CONCAT value .)
    CONCAT          shift and go to state 48

  ! CONCAT          [ reduce using rule 100 (stringConcatenation -> value CONCAT value .) ]


state 84

    (101) stringConcatenation -> value CONCAT stringConcatenation .
    (102) stringConcatenation -> stringConcatenation . CONCAT value

  ! shift/reduce conflict for CONCAT resolved as shift
    SEMICOLON       reduce using rule 101 (stringConcatenation -> value CONCAT stringConcatenation .)
    CONCAT          shift and go to state 73

  ! CONCAT          [ reduce using rule 101 (stringConcatenation -> value CONCAT stringConcatenation .) ]


state 85

    (93) comparingValue -> value comparingSign value .

    AND             reduce using rule 93 (comparingValue -> value comparingSign value .)
    OR              reduce using rule 93 (comparingValue -> value comparingSign value .)
    XOR             reduce using rule 93 (comparingValue -> value comparingSign value .)
    OPEN_TAG        reduce using rule 93 (comparingValue -> value comparingSign value .)
    CLOSE_TAG       reduce using rule 93 (comparingValue -> value comparingSign value .)
    LPAREN          reduce using rule 93 (comparingValue -> value comparingSign value .)
    IF              reduce using rule 93 (comparingValue -> value comparingSign value .)
    FOR             reduce using rule 93 (comparingValue -> value comparingSign value .)
    SWITCH          reduce using rule 93 (comparingValue -> value comparingSign value .)
    ID              reduce using rule 93 (comparingValue -> value comparingSign value .)
    FUNCTION        reduce using rule 93 (comparingValue -> value comparingSign value .)
    FN              reduce using rule 93 (comparingValue -> value comparingSign value .)
    ECHO            reduce using rule 93 (comparingValue -> value comparingSign value .)
    PRINT           reduce using rule 93 (comparingValue -> value comparingSign value .)
    INTEGER         reduce using rule 93 (comparingValue -> value comparingSign value .)
    FLOAT           reduce using rule 93 (comparingValue -> value comparingSign value .)
    STRING          reduce using rule 93 (comparingValue -> value comparingSign value .)
    $end            reduce using rule 93 (comparingValue -> value comparingSign value .)
    RPAREN          reduce using rule 93 (comparingValue -> value comparingSign value .)
    RCURLY          reduce using rule 93 (comparingValue -> value comparingSign value .)
    CONTINUE        reduce using rule 93 (comparingValue -> value comparingSign value .)
    SEMICOLON       reduce using rule 93 (comparingValue -> value comparingSign value .)
    BREAK           reduce using rule 93 (comparingValue -> value comparingSign value .)


state 86

    (71) arithmeticExpression -> LPAREN arithmeticExpression RPAREN .

    PLUS            reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    MINUS           reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    TIMES           reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    DIVIDE          reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    MOD             reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    EXP             reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    OPEN_TAG        reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    CLOSE_TAG       reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    LPAREN          reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    IF              reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FOR             reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    SWITCH          reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    ID              reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FUNCTION        reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FN              reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    ECHO            reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    PRINT           reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    INTEGER         reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FLOAT           reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    STRING          reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    $end            reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    RPAREN          reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    SEMICOLON       reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    RCURLY          reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    CONTINUE        reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    BREAK           reduce using rule 71 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)


state 87

    (96) logicalCondition -> LPAREN logicalCondition RPAREN .

    OPEN_TAG        reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    CLOSE_TAG       reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    LPAREN          reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    IF              reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FOR             reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    SWITCH          reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    ID              reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FUNCTION        reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FN              reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    ECHO            reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    PRINT           reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    INTEGER         reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FLOAT           reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    STRING          reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    $end            reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    RPAREN          reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    RCURLY          reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    CONTINUE        reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    SEMICOLON       reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    BREAK           reduce using rule 96 (logicalCondition -> LPAREN logicalCondition RPAREN .)


state 88

    (96) logicalCondition -> LPAREN . logicalCondition RPAREN
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (93) comparingValue -> . value comparingSign value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    LPAREN          shift and go to state 88
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    logicalCondition               shift and go to state 58
    comparingValue                 shift and go to state 36
    value                          shift and go to state 90

state 89

    (29) if_elseStatement -> IF LPAREN logicalCondition . RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> IF LPAREN logicalCondition . RPAREN LCURLY ifStatementBody

    RPAREN          shift and go to state 117


state 90

    (93) comparingValue -> value . comparingSign value
    (86) comparingSign -> . IS_EQUAL
    (87) comparingSign -> . IDENTICAL
    (88) comparingSign -> . NOTEQUAL
    (89) comparingSign -> . LESSTHAN
    (90) comparingSign -> . GREATERTHAN
    (91) comparingSign -> . LESSEQUALTHAN
    (92) comparingSign -> . GREATEREQUALTHAN

    IS_EQUAL        shift and go to state 50
    IDENTICAL       shift and go to state 51
    NOTEQUAL        shift and go to state 52
    LESSTHAN        shift and go to state 53
    GREATERTHAN     shift and go to state 54
    LESSEQUALTHAN   shift and go to state 55
    GREATEREQUALTHAN shift and go to state 56

    comparingSign                  shift and go to state 49

state 91

    (34) forStatement -> FOR LPAREN forStatementCondition . RPAREN LCURLY forStatementBody RCURLY

    RPAREN          shift and go to state 118


state 92

    (35) forStatementCondition -> SEMICOLON . SEMICOLON

    SEMICOLON       shift and go to state 119


state 93

    (36) forStatementCondition -> variableAsignation . SEMICOLON SEMICOLON variableAsignation
    (37) forStatementCondition -> variableAsignation . SEMICOLON comparingValue SEMICOLON variableAsignation

    SEMICOLON       shift and go to state 120


state 94

    (84) variableAsignation -> ID . EQUAL value
    (85) variableAsignation -> ID . EQUAL arithmeticExpression

    EQUAL           shift and go to state 121


state 95

    (24) switchStatement -> SWITCH LPAREN value . RPAREN LCURLY switchCases switchDefault RCURLY

    RPAREN          shift and go to state 122


state 96

    (40) arrayAsignation -> ID EQUAL arrayDeclaration . SEMICOLON

    SEMICOLON       shift and go to state 123


state 97

    (51) queueDeclaration -> ID EQUAL NEW . QUEUE SEMICOLON
    (48) stackDeclaration -> ID EQUAL NEW . STACK SEMICOLON

    QUEUE           shift and go to state 124
    STACK           shift and go to state 125


state 98

    (68) fgets -> ID EQUAL FGETS . LPAREN STDIN RPAREN SEMICOLON

    LPAREN          shift and go to state 126


state 99

    (84) variableAsignation -> ID EQUAL value .
    (69) arithmeticExpression -> value .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 69 (arithmeticExpression -> value .)
  ! reduce/reduce conflict for RPAREN resolved using rule 69 (arithmeticExpression -> value .)
    PLUS            reduce using rule 69 (arithmeticExpression -> value .)
    MINUS           reduce using rule 69 (arithmeticExpression -> value .)
    TIMES           reduce using rule 69 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 69 (arithmeticExpression -> value .)
    MOD             reduce using rule 69 (arithmeticExpression -> value .)
    EXP             reduce using rule 69 (arithmeticExpression -> value .)
    SEMICOLON       reduce using rule 69 (arithmeticExpression -> value .)
    RPAREN          reduce using rule 69 (arithmeticExpression -> value .)

  ! SEMICOLON       [ reduce using rule 84 (variableAsignation -> ID EQUAL value .) ]
  ! RPAREN          [ reduce using rule 84 (variableAsignation -> ID EQUAL value .) ]


state 100

    (85) variableAsignation -> ID EQUAL arithmeticExpression .
    (70) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (76) arithmeticOperator -> . PLUS
    (77) arithmeticOperator -> . MINUS
    (78) arithmeticOperator -> . TIMES
    (79) arithmeticOperator -> . DIVIDE
    (80) arithmeticOperator -> . MOD
    (81) arithmeticOperator -> . EXP

    SEMICOLON       reduce using rule 85 (variableAsignation -> ID EQUAL arithmeticExpression .)
    RPAREN          reduce using rule 85 (variableAsignation -> ID EQUAL arithmeticExpression .)
    PLUS            shift and go to state 42
    MINUS           shift and go to state 43
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45
    MOD             shift and go to state 46
    EXP             shift and go to state 47

    arithmeticOperator             shift and go to state 41

state 101

    (41) arrayDeclaration -> ARRAY . arraysValues RPAREN
    (46) arrayValue -> ARRAY . values RPAREN
    (44) arraysValues -> . arrayValue
    (45) arraysValues -> . arraysValues COMMA arrayValue
    (66) values -> . value
    (67) values -> . values COMMA value
    (46) arrayValue -> . ARRAY values RPAREN
    (47) arrayValue -> . LSQUARE values RSQUARE
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ARRAY           shift and go to state 127
    LSQUARE         shift and go to state 131
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arraysValues                   shift and go to state 128
    values                         shift and go to state 129
    arrayValue                     shift and go to state 130
    value                          shift and go to state 70

state 102

    (42) arrayDeclaration -> LSQUARE . arraysValues RSQUARE
    (47) arrayValue -> LSQUARE . values RSQUARE
    (44) arraysValues -> . arrayValue
    (45) arraysValues -> . arraysValues COMMA arrayValue
    (66) values -> . value
    (67) values -> . values COMMA value
    (46) arrayValue -> . ARRAY values RPAREN
    (47) arrayValue -> . LSQUARE values RSQUARE
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ARRAY           shift and go to state 127
    LSQUARE         shift and go to state 131
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arraysValues                   shift and go to state 132
    values                         shift and go to state 133
    arrayValue                     shift and go to state 130
    value                          shift and go to state 70

state 103

    (43) arrayDeclaration -> arrayValue .

    SEMICOLON       reduce using rule 43 (arrayDeclaration -> arrayValue .)


state 104

    (52) queueEnqueue -> ID OBJOP PUSH . LPAREN value RPAREN SEMICOLON
    (49) stackPush -> ID OBJOP PUSH . LPAREN value RPAREN SEMICOLON

    LPAREN          shift and go to state 134


state 105

    (53) queueDequeue -> ID OBJOP POP . SEMICOLON
    (50) stackPop -> ID OBJOP POP . SEMICOLON

    SEMICOLON       shift and go to state 135


state 106

    (54) defineFunction -> FUNCTION ID LPAREN . arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> FUNCTION ID LPAREN . RPAREN LCURLY cuerpo RCURLY
    (56) arguments -> . ID
    (57) arguments -> . ID COMMA arguments

    RPAREN          shift and go to state 137
    ID              shift and go to state 109

    arguments                      shift and go to state 136

state 107

    (58) anonymousFunction -> FUNCTION LPAREN RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 138


state 108

    (59) anonymousFunction -> FUNCTION LPAREN arguments . RPAREN LCURLY cuerpo RCURLY

    RPAREN          shift and go to state 139


state 109

    (56) arguments -> ID .
    (57) arguments -> ID . COMMA arguments

    RPAREN          reduce using rule 56 (arguments -> ID .)
    COMMA           shift and go to state 140


state 110

    (60) arrowFunction -> FN LPAREN ID . RPAREN FNARROW arrowBody SEMICOLON

    RPAREN          shift and go to state 141


state 111

    (63) echo -> ECHO values SEMICOLON .

    OPEN_TAG        reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    CLOSE_TAG       reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    LPAREN          reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    IF              reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    FOR             reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    SWITCH          reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    ID              reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    FUNCTION        reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    FN              reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    ECHO            reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    PRINT           reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    INTEGER         reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    FLOAT           reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    STRING          reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    $end            reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    RCURLY          reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    CONTINUE        reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    SEMICOLON       reduce using rule 63 (echo -> ECHO values SEMICOLON .)
    BREAK           reduce using rule 63 (echo -> ECHO values SEMICOLON .)


state 112

    (67) values -> values COMMA . value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 142

state 113

    (102) stringConcatenation -> stringConcatenation CONCAT value .

    SEMICOLON       reduce using rule 102 (stringConcatenation -> stringConcatenation CONCAT value .)
    CONCAT          reduce using rule 102 (stringConcatenation -> stringConcatenation CONCAT value .)


state 114

    (64) print -> PRINT LPAREN values . RPAREN SEMICOLON
    (67) values -> values . COMMA value

    RPAREN          shift and go to state 143
    COMMA           shift and go to state 112


state 115

    (65) print -> PRINT value SEMICOLON .

    OPEN_TAG        reduce using rule 65 (print -> PRINT value SEMICOLON .)
    CLOSE_TAG       reduce using rule 65 (print -> PRINT value SEMICOLON .)
    LPAREN          reduce using rule 65 (print -> PRINT value SEMICOLON .)
    IF              reduce using rule 65 (print -> PRINT value SEMICOLON .)
    FOR             reduce using rule 65 (print -> PRINT value SEMICOLON .)
    SWITCH          reduce using rule 65 (print -> PRINT value SEMICOLON .)
    ID              reduce using rule 65 (print -> PRINT value SEMICOLON .)
    FUNCTION        reduce using rule 65 (print -> PRINT value SEMICOLON .)
    FN              reduce using rule 65 (print -> PRINT value SEMICOLON .)
    ECHO            reduce using rule 65 (print -> PRINT value SEMICOLON .)
    PRINT           reduce using rule 65 (print -> PRINT value SEMICOLON .)
    INTEGER         reduce using rule 65 (print -> PRINT value SEMICOLON .)
    FLOAT           reduce using rule 65 (print -> PRINT value SEMICOLON .)
    STRING          reduce using rule 65 (print -> PRINT value SEMICOLON .)
    $end            reduce using rule 65 (print -> PRINT value SEMICOLON .)
    RCURLY          reduce using rule 65 (print -> PRINT value SEMICOLON .)
    CONTINUE        reduce using rule 65 (print -> PRINT value SEMICOLON .)
    SEMICOLON       reduce using rule 65 (print -> PRINT value SEMICOLON .)
    BREAK           reduce using rule 65 (print -> PRINT value SEMICOLON .)


state 116

    (95) logicalCondition -> comparingValue conditionOperator comparingValue .

    OPEN_TAG        reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    CLOSE_TAG       reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    LPAREN          reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    IF              reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FOR             reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    SWITCH          reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    ID              reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FUNCTION        reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FN              reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    ECHO            reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    PRINT           reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    INTEGER         reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FLOAT           reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    STRING          reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    $end            reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    RPAREN          reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    RCURLY          reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    CONTINUE        reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    SEMICOLON       reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    BREAK           reduce using rule 95 (logicalCondition -> comparingValue conditionOperator comparingValue .)


state 117

    (29) if_elseStatement -> IF LPAREN logicalCondition RPAREN . LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> IF LPAREN logicalCondition RPAREN . LCURLY ifStatementBody

    LCURLY          shift and go to state 144


state 118

    (34) forStatement -> FOR LPAREN forStatementCondition RPAREN . LCURLY forStatementBody RCURLY

    LCURLY          shift and go to state 145


state 119

    (35) forStatementCondition -> SEMICOLON SEMICOLON .

    RPAREN          reduce using rule 35 (forStatementCondition -> SEMICOLON SEMICOLON .)


state 120

    (36) forStatementCondition -> variableAsignation SEMICOLON . SEMICOLON variableAsignation
    (37) forStatementCondition -> variableAsignation SEMICOLON . comparingValue SEMICOLON variableAsignation
    (93) comparingValue -> . value comparingSign value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    SEMICOLON       shift and go to state 146
    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    comparingValue                 shift and go to state 147
    value                          shift and go to state 90

state 121

    (84) variableAsignation -> ID EQUAL . value
    (85) variableAsignation -> ID EQUAL . arithmeticExpression
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39
    LPAREN          shift and go to state 82

    value                          shift and go to state 99
    arithmeticExpression           shift and go to state 100

state 122

    (24) switchStatement -> SWITCH LPAREN value RPAREN . LCURLY switchCases switchDefault RCURLY

    LCURLY          shift and go to state 148


state 123

    (40) arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .

    OPEN_TAG        reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    CLOSE_TAG       reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    LPAREN          reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    IF              reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FOR             reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    SWITCH          reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    ID              reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FUNCTION        reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FN              reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    ECHO            reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    PRINT           reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    INTEGER         reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FLOAT           reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    STRING          reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    $end            reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    RCURLY          reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    CONTINUE        reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    SEMICOLON       reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    BREAK           reduce using rule 40 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)


state 124

    (51) queueDeclaration -> ID EQUAL NEW QUEUE . SEMICOLON

    SEMICOLON       shift and go to state 149


state 125

    (48) stackDeclaration -> ID EQUAL NEW STACK . SEMICOLON

    SEMICOLON       shift and go to state 150


state 126

    (68) fgets -> ID EQUAL FGETS LPAREN . STDIN RPAREN SEMICOLON

    STDIN           shift and go to state 151


state 127

    (46) arrayValue -> ARRAY . values RPAREN
    (66) values -> . value
    (67) values -> . values COMMA value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    values                         shift and go to state 129
    value                          shift and go to state 70

state 128

    (41) arrayDeclaration -> ARRAY arraysValues . RPAREN
    (45) arraysValues -> arraysValues . COMMA arrayValue

    RPAREN          shift and go to state 152
    COMMA           shift and go to state 153


state 129

    (46) arrayValue -> ARRAY values . RPAREN
    (67) values -> values . COMMA value

    RPAREN          shift and go to state 154
    COMMA           shift and go to state 112


state 130

    (44) arraysValues -> arrayValue .

    RPAREN          reduce using rule 44 (arraysValues -> arrayValue .)
    COMMA           reduce using rule 44 (arraysValues -> arrayValue .)
    RSQUARE         reduce using rule 44 (arraysValues -> arrayValue .)


state 131

    (47) arrayValue -> LSQUARE . values RSQUARE
    (66) values -> . value
    (67) values -> . values COMMA value
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    values                         shift and go to state 133
    value                          shift and go to state 70

state 132

    (42) arrayDeclaration -> LSQUARE arraysValues . RSQUARE
    (45) arraysValues -> arraysValues . COMMA arrayValue

    RSQUARE         shift and go to state 155
    COMMA           shift and go to state 153


state 133

    (47) arrayValue -> LSQUARE values . RSQUARE
    (67) values -> values . COMMA value

    RSQUARE         shift and go to state 156
    COMMA           shift and go to state 112


state 134

    (52) queueEnqueue -> ID OBJOP PUSH LPAREN . value RPAREN SEMICOLON
    (49) stackPush -> ID OBJOP PUSH LPAREN . value RPAREN SEMICOLON
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 157

state 135

    (53) queueDequeue -> ID OBJOP POP SEMICOLON .
    (50) stackPop -> ID OBJOP POP SEMICOLON .

  ! reduce/reduce conflict for OPEN_TAG resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for ID resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for RCURLY resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    OPEN_TAG        reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    CLOSE_TAG       reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    LPAREN          reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    IF              reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    FOR             reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    SWITCH          reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    ID              reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    FUNCTION        reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    FN              reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    ECHO            reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    PRINT           reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    INTEGER         reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    FLOAT           reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    STRING          reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    $end            reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    RCURLY          reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    CONTINUE        reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    SEMICOLON       reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)
    BREAK           reduce using rule 50 (stackPop -> ID OBJOP POP SEMICOLON .)

  ! OPEN_TAG        [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! CLOSE_TAG       [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! IF              [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FOR             [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! ID              [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FN              [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! ECHO            [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! PRINT           [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! STRING          [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! $end            [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! RCURLY          [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! BREAK           [ reduce using rule 53 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]


state 136

    (54) defineFunction -> FUNCTION ID LPAREN arguments . RPAREN LCURLY cuerpo RCURLY

    RPAREN          shift and go to state 158


state 137

    (55) defineFunction -> FUNCTION ID LPAREN RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 159


state 138

    (58) anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    cuerpo                         shift and go to state 160
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 139

    (59) anonymousFunction -> FUNCTION LPAREN arguments RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 161


state 140

    (57) arguments -> ID COMMA . arguments
    (56) arguments -> . ID
    (57) arguments -> . ID COMMA arguments

    ID              shift and go to state 109

    arguments                      shift and go to state 162

state 141

    (60) arrowFunction -> FN LPAREN ID RPAREN . FNARROW arrowBody SEMICOLON

    FNARROW         shift and go to state 163


state 142

    (67) values -> values COMMA value .

    SEMICOLON       reduce using rule 67 (values -> values COMMA value .)
    COMMA           reduce using rule 67 (values -> values COMMA value .)
    RPAREN          reduce using rule 67 (values -> values COMMA value .)
    RSQUARE         reduce using rule 67 (values -> values COMMA value .)


state 143

    (64) print -> PRINT LPAREN values RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 144

    (29) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY . ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY . ifStatementBody
    (31) ifStatementBody -> . cuerpo
    (32) ifStatementBody -> . cuerpo CONTINUE SEMICOLON
    (33) ifStatementBody -> . ifStatementBody cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    logicalCondition               shift and go to state 21
    ifStatementBody                shift and go to state 165
    cuerpo                         shift and go to state 166
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 145

    (34) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY . forStatementBody RCURLY
    (38) forStatementBody -> . cuerpo
    (39) forStatementBody -> . forStatementBody cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    forStatementBody               shift and go to state 167
    cuerpo                         shift and go to state 168
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 146

    (36) forStatementCondition -> variableAsignation SEMICOLON SEMICOLON . variableAsignation
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression

    ID              shift and go to state 94

    variableAsignation             shift and go to state 169

state 147

    (37) forStatementCondition -> variableAsignation SEMICOLON comparingValue . SEMICOLON variableAsignation

    SEMICOLON       shift and go to state 170


state 148

    (24) switchStatement -> SWITCH LPAREN value RPAREN LCURLY . switchCases switchDefault RCURLY
    (27) switchCases -> . switchCase
    (28) switchCases -> . switchCases switchCase
    (26) switchCase -> . CASE value COLON programa BREAK SEMICOLON

    CASE            shift and go to state 173

    switchCases                    shift and go to state 171
    switchCase                     shift and go to state 172

state 149

    (51) queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .

    OPEN_TAG        reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    CLOSE_TAG       reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    LPAREN          reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    IF              reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FOR             reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    SWITCH          reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    ID              reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FUNCTION        reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FN              reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    ECHO            reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    PRINT           reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    INTEGER         reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FLOAT           reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    STRING          reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    $end            reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    RCURLY          reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    CONTINUE        reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    SEMICOLON       reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    BREAK           reduce using rule 51 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)


state 150

    (48) stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .

    OPEN_TAG        reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    CLOSE_TAG       reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    LPAREN          reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    IF              reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FOR             reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    SWITCH          reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    ID              reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FUNCTION        reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FN              reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    ECHO            reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    PRINT           reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    INTEGER         reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FLOAT           reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    STRING          reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    $end            reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    RCURLY          reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    CONTINUE        reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    SEMICOLON       reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    BREAK           reduce using rule 48 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)


state 151

    (68) fgets -> ID EQUAL FGETS LPAREN STDIN . RPAREN SEMICOLON

    RPAREN          shift and go to state 174


state 152

    (41) arrayDeclaration -> ARRAY arraysValues RPAREN .

    SEMICOLON       reduce using rule 41 (arrayDeclaration -> ARRAY arraysValues RPAREN .)


state 153

    (45) arraysValues -> arraysValues COMMA . arrayValue
    (46) arrayValue -> . ARRAY values RPAREN
    (47) arrayValue -> . LSQUARE values RSQUARE

    ARRAY           shift and go to state 127
    LSQUARE         shift and go to state 131

    arrayValue                     shift and go to state 175

state 154

    (46) arrayValue -> ARRAY values RPAREN .

    SEMICOLON       reduce using rule 46 (arrayValue -> ARRAY values RPAREN .)
    RPAREN          reduce using rule 46 (arrayValue -> ARRAY values RPAREN .)
    COMMA           reduce using rule 46 (arrayValue -> ARRAY values RPAREN .)
    RSQUARE         reduce using rule 46 (arrayValue -> ARRAY values RPAREN .)


state 155

    (42) arrayDeclaration -> LSQUARE arraysValues RSQUARE .

    SEMICOLON       reduce using rule 42 (arrayDeclaration -> LSQUARE arraysValues RSQUARE .)


state 156

    (47) arrayValue -> LSQUARE values RSQUARE .

    SEMICOLON       reduce using rule 47 (arrayValue -> LSQUARE values RSQUARE .)
    RPAREN          reduce using rule 47 (arrayValue -> LSQUARE values RSQUARE .)
    COMMA           reduce using rule 47 (arrayValue -> LSQUARE values RSQUARE .)
    RSQUARE         reduce using rule 47 (arrayValue -> LSQUARE values RSQUARE .)


state 157

    (52) queueEnqueue -> ID OBJOP PUSH LPAREN value . RPAREN SEMICOLON
    (49) stackPush -> ID OBJOP PUSH LPAREN value . RPAREN SEMICOLON

    RPAREN          shift and go to state 176


state 158

    (54) defineFunction -> FUNCTION ID LPAREN arguments RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 177


state 159

    (55) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    cuerpo                         shift and go to state 178
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 160

    (58) anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 179


state 161

    (59) anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    cuerpo                         shift and go to state 180
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 162

    (57) arguments -> ID COMMA arguments .

    RPAREN          reduce using rule 57 (arguments -> ID COMMA arguments .)


state 163

    (60) arrowFunction -> FN LPAREN ID RPAREN FNARROW . arrowBody SEMICOLON
    (61) arrowBody -> . FN LPAREN ID RPAREN FNARROW arrowBody
    (62) arrowBody -> . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    FN              shift and go to state 181
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arrowBody                      shift and go to state 182
    cuerpo                         shift and go to state 183
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 164

    (64) print -> PRINT LPAREN values RPAREN SEMICOLON .

    OPEN_TAG        reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    LPAREN          reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    IF              reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FOR             reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    SWITCH          reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    ID              reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FN              reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    ECHO            reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    PRINT           reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    INTEGER         reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FLOAT           reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    STRING          reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    $end            reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    RCURLY          reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    BREAK           reduce using rule 64 (print -> PRINT LPAREN values RPAREN SEMICOLON .)


state 165

    (29) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody . RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .
    (33) ifStatementBody -> ifStatementBody . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for OPEN_TAG resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    RCURLY          shift and go to state 184
    $end            reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    CONTINUE        reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    SEMICOLON       reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    BREAK           reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

  ! OPEN_TAG        [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! CLOSE_TAG       [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! LPAREN          [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! IF              [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FOR             [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! SWITCH          [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! ID              [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FUNCTION        [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FN              [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! ECHO            [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! PRINT           [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! INTEGER         [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FLOAT           [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! STRING          [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! RCURLY          [ reduce using rule 30 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]

    logicalCondition               shift and go to state 21
    cuerpo                         shift and go to state 185
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 166

    (31) ifStatementBody -> cuerpo .
    (32) ifStatementBody -> cuerpo . CONTINUE SEMICOLON

  ! shift/reduce conflict for CONTINUE resolved as shift
    RCURLY          reduce using rule 31 (ifStatementBody -> cuerpo .)
    OPEN_TAG        reduce using rule 31 (ifStatementBody -> cuerpo .)
    CLOSE_TAG       reduce using rule 31 (ifStatementBody -> cuerpo .)
    LPAREN          reduce using rule 31 (ifStatementBody -> cuerpo .)
    IF              reduce using rule 31 (ifStatementBody -> cuerpo .)
    FOR             reduce using rule 31 (ifStatementBody -> cuerpo .)
    SWITCH          reduce using rule 31 (ifStatementBody -> cuerpo .)
    ID              reduce using rule 31 (ifStatementBody -> cuerpo .)
    FUNCTION        reduce using rule 31 (ifStatementBody -> cuerpo .)
    FN              reduce using rule 31 (ifStatementBody -> cuerpo .)
    ECHO            reduce using rule 31 (ifStatementBody -> cuerpo .)
    PRINT           reduce using rule 31 (ifStatementBody -> cuerpo .)
    INTEGER         reduce using rule 31 (ifStatementBody -> cuerpo .)
    FLOAT           reduce using rule 31 (ifStatementBody -> cuerpo .)
    STRING          reduce using rule 31 (ifStatementBody -> cuerpo .)
    $end            reduce using rule 31 (ifStatementBody -> cuerpo .)
    SEMICOLON       reduce using rule 31 (ifStatementBody -> cuerpo .)
    BREAK           reduce using rule 31 (ifStatementBody -> cuerpo .)
    CONTINUE        shift and go to state 186

  ! CONTINUE        [ reduce using rule 31 (ifStatementBody -> cuerpo .) ]


state 167

    (34) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody . RCURLY
    (39) forStatementBody -> forStatementBody . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    RCURLY          shift and go to state 187
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    cuerpo                         shift and go to state 188
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 168

    (38) forStatementBody -> cuerpo .

    RCURLY          reduce using rule 38 (forStatementBody -> cuerpo .)
    OPEN_TAG        reduce using rule 38 (forStatementBody -> cuerpo .)
    CLOSE_TAG       reduce using rule 38 (forStatementBody -> cuerpo .)
    LPAREN          reduce using rule 38 (forStatementBody -> cuerpo .)
    IF              reduce using rule 38 (forStatementBody -> cuerpo .)
    FOR             reduce using rule 38 (forStatementBody -> cuerpo .)
    SWITCH          reduce using rule 38 (forStatementBody -> cuerpo .)
    ID              reduce using rule 38 (forStatementBody -> cuerpo .)
    FUNCTION        reduce using rule 38 (forStatementBody -> cuerpo .)
    FN              reduce using rule 38 (forStatementBody -> cuerpo .)
    ECHO            reduce using rule 38 (forStatementBody -> cuerpo .)
    PRINT           reduce using rule 38 (forStatementBody -> cuerpo .)
    INTEGER         reduce using rule 38 (forStatementBody -> cuerpo .)
    FLOAT           reduce using rule 38 (forStatementBody -> cuerpo .)
    STRING          reduce using rule 38 (forStatementBody -> cuerpo .)


state 169

    (36) forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation .

    RPAREN          reduce using rule 36 (forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation .)


state 170

    (37) forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON . variableAsignation
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression

    ID              shift and go to state 94

    variableAsignation             shift and go to state 189

state 171

    (24) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases . switchDefault RCURLY
    (28) switchCases -> switchCases . switchCase
    (25) switchDefault -> . DEFAULT COLON programa
    (26) switchCase -> . CASE value COLON programa BREAK SEMICOLON

    DEFAULT         shift and go to state 192
    CASE            shift and go to state 173

    switchDefault                  shift and go to state 190
    switchCase                     shift and go to state 191

state 172

    (27) switchCases -> switchCase .

    DEFAULT         reduce using rule 27 (switchCases -> switchCase .)
    CASE            reduce using rule 27 (switchCases -> switchCase .)


state 173

    (26) switchCase -> CASE . value COLON programa BREAK SEMICOLON
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING

    ID              shift and go to state 60
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 193

state 174

    (68) fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 194


state 175

    (45) arraysValues -> arraysValues COMMA arrayValue .

    RPAREN          reduce using rule 45 (arraysValues -> arraysValues COMMA arrayValue .)
    COMMA           reduce using rule 45 (arraysValues -> arraysValues COMMA arrayValue .)
    RSQUARE         reduce using rule 45 (arraysValues -> arraysValues COMMA arrayValue .)


state 176

    (52) queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN . SEMICOLON
    (49) stackPush -> ID OBJOP PUSH LPAREN value RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 195


state 177

    (54) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    cuerpo                         shift and go to state 196
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 178

    (55) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 197


state 179

    (58) anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 58 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)


state 180

    (59) anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 198


state 181

    (61) arrowBody -> FN . LPAREN ID RPAREN FNARROW arrowBody
    (60) arrowFunction -> FN . LPAREN ID RPAREN FNARROW arrowBody SEMICOLON

    LPAREN          shift and go to state 199


state 182

    (60) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody . SEMICOLON

    SEMICOLON       shift and go to state 200


state 183

    (62) arrowBody -> cuerpo .

    SEMICOLON       reduce using rule 62 (arrowBody -> cuerpo .)


state 184

    (29) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY . ELSE ifStatementBody

    ELSE            shift and go to state 201


state 185

    (33) ifStatementBody -> ifStatementBody cuerpo .

    CONTINUE        reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    RCURLY          reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    OPEN_TAG        reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    CLOSE_TAG       reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    LPAREN          reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    IF              reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    FOR             reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    SWITCH          reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    ID              reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    FUNCTION        reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    FN              reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    ECHO            reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    PRINT           reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    INTEGER         reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    FLOAT           reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    STRING          reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    $end            reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    SEMICOLON       reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)
    BREAK           reduce using rule 33 (ifStatementBody -> ifStatementBody cuerpo .)


state 186

    (32) ifStatementBody -> cuerpo CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 202


state 187

    (34) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .

    OPEN_TAG        reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    CLOSE_TAG       reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    LPAREN          reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    IF              reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FOR             reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    SWITCH          reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    ID              reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FUNCTION        reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FN              reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    ECHO            reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    PRINT           reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    INTEGER         reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FLOAT           reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    STRING          reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    $end            reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    RCURLY          reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    CONTINUE        reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    SEMICOLON       reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    BREAK           reduce using rule 34 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)


state 188

    (39) forStatementBody -> forStatementBody cuerpo .

    RCURLY          reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    OPEN_TAG        reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    CLOSE_TAG       reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    LPAREN          reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    IF              reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    FOR             reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    SWITCH          reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    ID              reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    FUNCTION        reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    FN              reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    ECHO            reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    PRINT           reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    INTEGER         reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    FLOAT           reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)
    STRING          reduce using rule 39 (forStatementBody -> forStatementBody cuerpo .)


state 189

    (37) forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation .

    RPAREN          reduce using rule 37 (forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation .)


state 190

    (24) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault . RCURLY

    RCURLY          shift and go to state 203


state 191

    (28) switchCases -> switchCases switchCase .

    DEFAULT         reduce using rule 28 (switchCases -> switchCases switchCase .)
    CASE            reduce using rule 28 (switchCases -> switchCases switchCase .)


state 192

    (25) switchDefault -> DEFAULT . COLON programa

    COLON           shift and go to state 204


state 193

    (26) switchCase -> CASE value . COLON programa BREAK SEMICOLON

    COLON           shift and go to state 205


state 194

    (68) fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .

    OPEN_TAG        reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    IF              reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOR             reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ID              reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FN              reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ECHO            reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRINT           reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INTEGER         reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STRING          reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    $end            reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BREAK           reduce using rule 68 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)


state 195

    (52) queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .
    (49) stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .

  ! reduce/reduce conflict for OPEN_TAG resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ID resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RCURLY resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    OPEN_TAG        reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    LPAREN          reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    IF              reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FOR             reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    SWITCH          reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    ID              reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FN              reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    ECHO            reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    PRINT           reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    INTEGER         reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FLOAT           reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    STRING          reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    $end            reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    RCURLY          reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    BREAK           reduce using rule 49 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)

  ! OPEN_TAG        [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! CLOSE_TAG       [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! ID              [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! ECHO            [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! PRINT           [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! RCURLY          [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 52 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]


state 196

    (54) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 206


state 197

    (55) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 55 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)


state 198

    (59) anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 59 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)


state 199

    (61) arrowBody -> FN LPAREN . ID RPAREN FNARROW arrowBody
    (60) arrowFunction -> FN LPAREN . ID RPAREN FNARROW arrowBody SEMICOLON

    ID              shift and go to state 207


state 200

    (60) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .

    OPEN_TAG        reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    CLOSE_TAG       reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    LPAREN          reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    IF              reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FOR             reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    SWITCH          reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    ID              reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FUNCTION        reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FN              reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    ECHO            reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    PRINT           reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    INTEGER         reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FLOAT           reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    STRING          reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    $end            reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    RCURLY          reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    CONTINUE        reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    SEMICOLON       reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    BREAK           reduce using rule 60 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)


state 201

    (29) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE . ifStatementBody
    (31) ifStatementBody -> . cuerpo
    (32) ifStatementBody -> . cuerpo CONTINUE SEMICOLON
    (33) ifStatementBody -> . ifStatementBody cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    logicalCondition               shift and go to state 21
    ifStatementBody                shift and go to state 208
    cuerpo                         shift and go to state 166
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 202

    (32) ifStatementBody -> cuerpo CONTINUE SEMICOLON .

    CONTINUE        reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    RCURLY          reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    OPEN_TAG        reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    CLOSE_TAG       reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    IF              reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FOR             reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    ID              reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FN              reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    ECHO            reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    PRINT           reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    INTEGER         reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    STRING          reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    $end            reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    BREAK           reduce using rule 32 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)


state 203

    (24) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .

    OPEN_TAG        reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    CLOSE_TAG       reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    LPAREN          reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    IF              reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FOR             reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    SWITCH          reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    ID              reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FUNCTION        reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FN              reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    ECHO            reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    PRINT           reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    INTEGER         reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FLOAT           reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    STRING          reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    $end            reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    RCURLY          reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    CONTINUE        reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    SEMICOLON       reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    BREAK           reduce using rule 24 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)


state 204

    (25) switchDefault -> DEFAULT COLON . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    programa                       shift and go to state 209
    cuerpo                         shift and go to state 2
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 205

    (26) switchCase -> CASE value COLON . programa BREAK SEMICOLON
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 24
    programa                       shift and go to state 210
    cuerpo                         shift and go to state 2
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 206

    (54) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 54 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)


state 207

    (61) arrowBody -> FN LPAREN ID . RPAREN FNARROW arrowBody
    (60) arrowFunction -> FN LPAREN ID . RPAREN FNARROW arrowBody SEMICOLON

    RPAREN          shift and go to state 211


state 208

    (29) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .
    (33) ifStatementBody -> ifStatementBody . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

  ! shift/reduce conflict for OPEN_TAG resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .)
    RCURLY          reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .)
    CONTINUE        reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .)
    SEMICOLON       reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .)
    BREAK           reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .)
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

  ! OPEN_TAG        [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! CLOSE_TAG       [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! LPAREN          [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! IF              [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! FOR             [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! SWITCH          [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! ID              [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! FUNCTION        [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! FN              [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! ECHO            [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! PRINT           [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! INTEGER         [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! FLOAT           [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]
  ! STRING          [ reduce using rule 29 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody .) ]

    logicalCondition               shift and go to state 21
    cuerpo                         shift and go to state 185
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 209

    (25) switchDefault -> DEFAULT COLON programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    RCURLY          reduce using rule 25 (switchDefault -> DEFAULT COLON programa .)
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    cuerpo                         shift and go to state 40
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 210

    (26) switchCase -> CASE value COLON programa . BREAK SEMICOLON
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    BREAK           shift and go to state 212
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    FN              shift and go to state 31
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    value                          shift and go to state 24
    cuerpo                         shift and go to state 40
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 211

    (61) arrowBody -> FN LPAREN ID RPAREN . FNARROW arrowBody
    (60) arrowFunction -> FN LPAREN ID RPAREN . FNARROW arrowBody SEMICOLON

    FNARROW         shift and go to state 213


state 212

    (26) switchCase -> CASE value COLON programa BREAK . SEMICOLON

    SEMICOLON       shift and go to state 214


state 213

    (61) arrowBody -> FN LPAREN ID RPAREN FNARROW . arrowBody
    (60) arrowFunction -> FN LPAREN ID RPAREN FNARROW . arrowBody SEMICOLON
    (61) arrowBody -> . FN LPAREN ID RPAREN FNARROW arrowBody
    (62) arrowBody -> . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (69) arithmeticExpression -> . value
    (70) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (71) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (29) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE ifStatementBody
    (30) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (34) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (24) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (40) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (51) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (52) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (53) queueDequeue -> . ID OBJOP POP SEMICOLON
    (54) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (55) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (58) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (59) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (60) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (63) echo -> . ECHO values SEMICOLON
    (68) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (48) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (49) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (50) stackPop -> . ID OBJOP POP SEMICOLON
    (82) line -> . variableAsignation SEMICOLON
    (83) line -> . stringConcatenation SEMICOLON
    (64) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (65) print -> . PRINT value SEMICOLON
    (94) logicalCondition -> . comparingValue
    (95) logicalCondition -> . comparingValue conditionOperator comparingValue
    (96) logicalCondition -> . LPAREN logicalCondition RPAREN
    (72) value -> . ID
    (73) value -> . INTEGER
    (74) value -> . FLOAT
    (75) value -> . STRING
    (84) variableAsignation -> . ID EQUAL value
    (85) variableAsignation -> . ID EQUAL arithmeticExpression
    (100) stringConcatenation -> . value CONCAT value
    (101) stringConcatenation -> . value CONCAT stringConcatenation
    (102) stringConcatenation -> . stringConcatenation CONCAT value
    (93) comparingValue -> . value comparingSign value

    FN              shift and go to state 181
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    LPAREN          shift and go to state 25
    IF              shift and go to state 26
    FOR             shift and go to state 27
    SWITCH          shift and go to state 28
    ID              shift and go to state 29
    FUNCTION        shift and go to state 30
    ECHO            shift and go to state 32
    PRINT           shift and go to state 35
    INTEGER         shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 39

    arrowBody                      shift and go to state 215
    cuerpo                         shift and go to state 183
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    value                          shift and go to state 24
    variableAsignation             shift and go to state 33
    stringConcatenation            shift and go to state 34
    comparingValue                 shift and go to state 36

state 214

    (26) switchCase -> CASE value COLON programa BREAK SEMICOLON .

    DEFAULT         reduce using rule 26 (switchCase -> CASE value COLON programa BREAK SEMICOLON .)
    CASE            reduce using rule 26 (switchCase -> CASE value COLON programa BREAK SEMICOLON .)


state 215

    (61) arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody .
    (60) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 200

  ! SEMICOLON       [ reduce using rule 61 (arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for MOD in state 80 resolved as shift
WARNING: shift/reduce conflict for EXP in state 80 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 83 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 84 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 165 resolved as shift
WARNING: shift/reduce conflict for OPEN_TAG in state 165 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 165 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 165 resolved as shift
WARNING: shift/reduce conflict for IF in state 165 resolved as shift
WARNING: shift/reduce conflict for FOR in state 165 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 165 resolved as shift
WARNING: shift/reduce conflict for ID in state 165 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 165 resolved as shift
WARNING: shift/reduce conflict for FN in state 165 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 165 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 165 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 165 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 165 resolved as shift
WARNING: shift/reduce conflict for STRING in state 165 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 166 resolved as shift
WARNING: shift/reduce conflict for OPEN_TAG in state 208 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 208 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for FOR in state 208 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 208 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 208 resolved as shift
WARNING: shift/reduce conflict for FN in state 208 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 208 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 208 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 208 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 208 resolved as shift
WARNING: shift/reduce conflict for STRING in state 208 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 215 resolved as shift
WARNING: reduce/reduce conflict in state 99 resolved using rule (arithmeticExpression -> value)
WARNING: rejected rule (variableAsignation -> ID EQUAL value) in state 99
WARNING: reduce/reduce conflict in state 135 resolved using rule (stackPop -> ID OBJOP POP SEMICOLON)
WARNING: rejected rule (queueDequeue -> ID OBJOP POP SEMICOLON) in state 135
WARNING: reduce/reduce conflict in state 195 resolved using rule (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON)
WARNING: rejected rule (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON) in state 195
WARNING: Rule (variableAsignation -> ID EQUAL value) is never reduced
WARNING: Rule (queueDequeue -> ID OBJOP POP SEMICOLON) is never reduced
WARNING: Rule (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON) is never reduced
