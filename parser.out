Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BITAND
    BITNOT
    BITOR
    BOOL
    CALLABLE
    CATCH
    CLASS
    CLONE
    CONCATASSIGN
    CONST
    DECLARE
    DECREMENT
    DIE
    DIVIDEASSIGN
    DO
    DOC_COMMENT
    DOUBLEQUOTE
    ELSEIF
    EMPTY
    ENDWHILE
    ERRORCONTROL
    EVAL
    EXECUTION
    EXIT
    EXPASSIGN
    EXTENDS
    FINAL
    FINALLY
    FOREACH
    GLOBAL
    GOTO
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INCREMENT
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    LOGICALNOT
    MATCH
    MINUSASSIGN
    MODASSIGN
    NAMESPACE
    NULL
    PLUSASSIGN
    PRIVATE
    PROTECTED
    PUBLIC
    QUOTE
    REQUIRE
    REQUIRE_ONCE
    RETURN
    STATIC
    THROW
    TIMESASSIGN
    TRAIT
    TRY
    UNSET
    USE
    VAR
    WHILE
    YIELD
    YIELD_FROM
    __HALT_COMPILER

Grammar

Rule 0     S' -> programa
Rule 1     programa -> cuerpo
Rule 2     programa -> programa cuerpo
Rule 3     cuerpo -> arithmeticExpression
Rule 4     cuerpo -> if_elseStatement
Rule 5     cuerpo -> forStatement
Rule 6     cuerpo -> switchStatement
Rule 7     cuerpo -> arrayAsignation
Rule 8     cuerpo -> queueDeclaration
Rule 9     cuerpo -> queueEnqueue
Rule 10    cuerpo -> queueDequeue
Rule 11    cuerpo -> defineFunction
Rule 12    cuerpo -> anonymousFunction
Rule 13    cuerpo -> arrowFunction
Rule 14    cuerpo -> echo
Rule 15    cuerpo -> fgets
Rule 16    cuerpo -> stackDeclaration
Rule 17    cuerpo -> stackPush
Rule 18    cuerpo -> stackPop
Rule 19    cuerpo -> line
Rule 20    cuerpo -> print
Rule 21    cuerpo -> logicalCondition
Rule 22    cuerpo -> OPEN_TAG
Rule 23    cuerpo -> CLOSE_TAG
Rule 24    cuerpo -> stringConcatenation
Rule 25    cuerpo -> callFunction
Rule 26    switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
Rule 27    switchDefault -> DEFAULT COLON programa
Rule 28    switchCase -> CASE value COLON programa BREAK SEMICOLON
Rule 29    switchCases -> switchCase
Rule 30    switchCases -> switchCases switchCase
Rule 31    if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
Rule 32    if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
Rule 33    ifStatementBody -> cuerpo
Rule 34    ifStatementBody -> cuerpo CONTINUE SEMICOLON
Rule 35    ifStatementBody -> ifStatementBody cuerpo
Rule 36    forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
Rule 37    forStatementCondition -> SEMICOLON SEMICOLON
Rule 38    forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation
Rule 39    forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation
Rule 40    forStatementBody -> cuerpo
Rule 41    forStatementBody -> forStatementBody cuerpo
Rule 42    arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON
Rule 43    arrayDeclaration -> ARRAY arraysValues RPAREN
Rule 44    arrayDeclaration -> LSQUARE arraysValues RSQUARE
Rule 45    arrayDeclaration -> arrayValue
Rule 46    arraysValues -> arrayValue
Rule 47    arraysValues -> arraysValues COMMA arrayValue
Rule 48    arrayValue -> ARRAY values RPAREN
Rule 49    arrayValue -> LSQUARE values RSQUARE
Rule 50    stackDeclaration -> ID EQUAL NEW STACK SEMICOLON
Rule 51    stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
Rule 52    stackPop -> ID OBJOP POP SEMICOLON
Rule 53    queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON
Rule 54    queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
Rule 55    queueDequeue -> ID OBJOP POP SEMICOLON
Rule 56    defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
Rule 57    defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
Rule 58    arguments -> ID
Rule 59    arguments -> ID COMMA arguments
Rule 60    anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
Rule 61    anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
Rule 62    arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
Rule 63    arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody
Rule 64    arrowBody -> cuerpo
Rule 65    echo -> ECHO values SEMICOLON
Rule 66    print -> PRINT LPAREN values RPAREN SEMICOLON
Rule 67    print -> PRINT value SEMICOLON
Rule 68    values -> value
Rule 69    values -> values COMMA value
Rule 70    fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
Rule 71    arithmeticExpression -> value
Rule 72    arithmeticExpression -> STRING
Rule 73    arithmeticExpression -> LPAREN arithmeticExpression RPAREN
Rule 74    arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression
Rule 75    callFunction -> ID LPAREN RPAREN
Rule 76    callFunction -> ID LPAREN value RPAREN
Rule 77    value -> ID
Rule 78    value -> INTEGER
Rule 79    value -> FLOAT
Rule 80    value -> STRING
Rule 81    arithmeticOperator -> PLUS
Rule 82    arithmeticOperator -> MINUS
Rule 83    arithmeticOperator -> TIMES
Rule 84    arithmeticOperator -> DIVIDE
Rule 85    arithmeticOperator -> MOD
Rule 86    arithmeticOperator -> EXP
Rule 87    line -> variableAsignation SEMICOLON
Rule 88    variableAsignation -> ID EQUAL value
Rule 89    variableAsignation -> ID EQUAL arithmeticExpression
Rule 90    comparingSign -> IS_EQUAL
Rule 91    comparingSign -> IDENTICAL
Rule 92    comparingSign -> NOTEQUAL
Rule 93    comparingSign -> LESSTHAN
Rule 94    comparingSign -> GREATERTHAN
Rule 95    comparingSign -> LESSEQUALTHAN
Rule 96    comparingSign -> GREATEREQUALTHAN
Rule 97    comparingValue -> value comparingSign value
Rule 98    logicalCondition -> comparingValue
Rule 99    logicalCondition -> comparingValue conditionOperator comparingValue
Rule 100   logicalCondition -> LPAREN logicalCondition RPAREN
Rule 101   conditionOperator -> AND
Rule 102   conditionOperator -> OR
Rule 103   conditionOperator -> XOR
Rule 104   stringConcatenation -> value CONCAT value
Rule 105   stringConcatenation -> stringConcatenation CONCAT stringConcatenation

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 101
ARRAY                : 43 48
AS                   : 
BITAND               : 
BITNOT               : 
BITOR                : 
BOOL                 : 
BREAK                : 28
CALLABLE             : 
CASE                 : 28
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_TAG            : 23
COLON                : 27 28
COMMA                : 47 59 69
CONCAT               : 104 105
CONCATASSIGN         : 
CONST                : 
CONTINUE             : 34
DECLARE              : 
DECREMENT            : 
DEFAULT              : 27
DIE                  : 
DIVIDE               : 84
DIVIDEASSIGN         : 
DO                   : 
DOC_COMMENT          : 
DOUBLEQUOTE          : 
ECHO                 : 65
ELSE                 : 31
ELSEIF               : 
EMPTY                : 
ENDWHILE             : 
EQUAL                : 42 50 53 70 88 89
ERRORCONTROL         : 
EVAL                 : 
EXECUTION            : 
EXIT                 : 
EXP                  : 86
EXPASSIGN            : 
EXTENDS              : 
FGETS                : 70
FINAL                : 
FINALLY              : 
FLOAT                : 79
FN                   : 62 63
FNARROW              : 62 63
FOR                  : 36
FOREACH              : 
FUNCTION             : 56 57 60 61
GLOBAL               : 
GOTO                 : 
GREATEREQUALTHAN     : 96
GREATERTHAN          : 94
ID                   : 42 50 51 52 53 54 55 56 57 58 59 62 63 70 75 76 77 88 89
IDENTICAL            : 91
IF                   : 31 32
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREMENT            : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 78
INTERFACE            : 
ISSET                : 
IS_EQUAL             : 90
LCURLY               : 26 31 31 32 36 56 57 60 61
LESSEQUALTHAN        : 95
LESSTHAN             : 93
LIST                 : 
LOGICALNOT           : 
LPAREN               : 26 31 32 36 51 54 56 57 60 61 62 63 66 70 73 75 76 100
LSQUARE              : 44 49
MATCH                : 
MINUS                : 82
MINUSASSIGN          : 
MOD                  : 85
MODASSIGN            : 
NAMESPACE            : 
NEW                  : 50 53
NOTEQUAL             : 92
NULL                 : 
OBJOP                : 51 52 54 55
OPEN_TAG             : 22
OR                   : 102
PLUS                 : 81
PLUSASSIGN           : 
POP                  : 52 55
PRINT                : 66 67
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUSH                 : 51 54
QUEUE                : 53
QUOTE                : 
RCURLY               : 26 31 31 36 56 57 60 61
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 
RPAREN               : 26 31 32 36 43 48 51 54 56 57 60 61 62 63 66 70 73 75 76 100
RSQUARE              : 44 49
SEMICOLON            : 28 34 37 37 38 38 39 39 42 50 51 52 53 54 55 62 65 66 67 70 87
STACK                : 50
STATIC               : 
STDIN                : 70
STRING               : 72 80
SWITCH               : 26
THROW                : 
TIMES                : 83
TIMESASSIGN          : 
TRAIT                : 
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
WHILE                : 
XOR                  : 103
YIELD                : 
YIELD_FROM           : 
__HALT_COMPILER      : 
error                : 

Nonterminals, with rules where they appear

anonymousFunction    : 12
arguments            : 56 59 61
arithmeticExpression : 3 73 74 74 89
arithmeticOperator   : 74
arrayAsignation      : 7
arrayDeclaration     : 42
arrayValue           : 45 46 47
arraysValues         : 43 44 47
arrowBody            : 62 63
arrowFunction        : 13
callFunction         : 25
comparingSign        : 97
comparingValue       : 39 98 99 99
conditionOperator    : 99
cuerpo               : 1 2 33 34 35 40 41 56 57 60 61 64
defineFunction       : 11
echo                 : 14
fgets                : 15
forStatement         : 5
forStatementBody     : 36 41
forStatementCondition : 36
ifStatementBody      : 31 31 32 35
if_elseStatement     : 4
line                 : 19
logicalCondition     : 21 31 32 100
print                : 20
programa             : 2 27 28 0
queueDeclaration     : 8
queueDequeue         : 10
queueEnqueue         : 9
stackDeclaration     : 16
stackPop             : 18
stackPush            : 17
stringConcatenation  : 24 105 105
switchCase           : 29 30
switchCases          : 26 30
switchDefault        : 26
switchStatement      : 6
value                : 26 28 51 54 67 68 69 71 76 88 97 97 104 104
values               : 48 49 65 66 69
variableAsignation   : 38 38 39 39 87

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    programa                       shift and go to state 1
    cuerpo                         shift and go to state 2
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 1

    (0) S' -> programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    cuerpo                         shift and go to state 41
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 2

    (1) programa -> cuerpo .

    OPEN_TAG        reduce using rule 1 (programa -> cuerpo .)
    CLOSE_TAG       reduce using rule 1 (programa -> cuerpo .)
    STRING          reduce using rule 1 (programa -> cuerpo .)
    LPAREN          reduce using rule 1 (programa -> cuerpo .)
    IF              reduce using rule 1 (programa -> cuerpo .)
    FOR             reduce using rule 1 (programa -> cuerpo .)
    SWITCH          reduce using rule 1 (programa -> cuerpo .)
    ID              reduce using rule 1 (programa -> cuerpo .)
    FUNCTION        reduce using rule 1 (programa -> cuerpo .)
    FN              reduce using rule 1 (programa -> cuerpo .)
    ECHO            reduce using rule 1 (programa -> cuerpo .)
    PRINT           reduce using rule 1 (programa -> cuerpo .)
    INTEGER         reduce using rule 1 (programa -> cuerpo .)
    FLOAT           reduce using rule 1 (programa -> cuerpo .)
    $end            reduce using rule 1 (programa -> cuerpo .)
    RCURLY          reduce using rule 1 (programa -> cuerpo .)
    BREAK           reduce using rule 1 (programa -> cuerpo .)


state 3

    (3) cuerpo -> arithmeticExpression .
    (74) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (81) arithmeticOperator -> . PLUS
    (82) arithmeticOperator -> . MINUS
    (83) arithmeticOperator -> . TIMES
    (84) arithmeticOperator -> . DIVIDE
    (85) arithmeticOperator -> . MOD
    (86) arithmeticOperator -> . EXP

    OPEN_TAG        reduce using rule 3 (cuerpo -> arithmeticExpression .)
    CLOSE_TAG       reduce using rule 3 (cuerpo -> arithmeticExpression .)
    STRING          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    LPAREN          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    IF              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FOR             reduce using rule 3 (cuerpo -> arithmeticExpression .)
    SWITCH          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    ID              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FUNCTION        reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FN              reduce using rule 3 (cuerpo -> arithmeticExpression .)
    ECHO            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    PRINT           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    INTEGER         reduce using rule 3 (cuerpo -> arithmeticExpression .)
    FLOAT           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    $end            reduce using rule 3 (cuerpo -> arithmeticExpression .)
    RCURLY          reduce using rule 3 (cuerpo -> arithmeticExpression .)
    CONTINUE        reduce using rule 3 (cuerpo -> arithmeticExpression .)
    SEMICOLON       reduce using rule 3 (cuerpo -> arithmeticExpression .)
    BREAK           reduce using rule 3 (cuerpo -> arithmeticExpression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    EXP             shift and go to state 48

    arithmeticOperator             shift and go to state 42

state 4

    (4) cuerpo -> if_elseStatement .

    OPEN_TAG        reduce using rule 4 (cuerpo -> if_elseStatement .)
    CLOSE_TAG       reduce using rule 4 (cuerpo -> if_elseStatement .)
    STRING          reduce using rule 4 (cuerpo -> if_elseStatement .)
    LPAREN          reduce using rule 4 (cuerpo -> if_elseStatement .)
    IF              reduce using rule 4 (cuerpo -> if_elseStatement .)
    FOR             reduce using rule 4 (cuerpo -> if_elseStatement .)
    SWITCH          reduce using rule 4 (cuerpo -> if_elseStatement .)
    ID              reduce using rule 4 (cuerpo -> if_elseStatement .)
    FUNCTION        reduce using rule 4 (cuerpo -> if_elseStatement .)
    FN              reduce using rule 4 (cuerpo -> if_elseStatement .)
    ECHO            reduce using rule 4 (cuerpo -> if_elseStatement .)
    PRINT           reduce using rule 4 (cuerpo -> if_elseStatement .)
    INTEGER         reduce using rule 4 (cuerpo -> if_elseStatement .)
    FLOAT           reduce using rule 4 (cuerpo -> if_elseStatement .)
    $end            reduce using rule 4 (cuerpo -> if_elseStatement .)
    RCURLY          reduce using rule 4 (cuerpo -> if_elseStatement .)
    CONTINUE        reduce using rule 4 (cuerpo -> if_elseStatement .)
    SEMICOLON       reduce using rule 4 (cuerpo -> if_elseStatement .)
    BREAK           reduce using rule 4 (cuerpo -> if_elseStatement .)


state 5

    (5) cuerpo -> forStatement .

    OPEN_TAG        reduce using rule 5 (cuerpo -> forStatement .)
    CLOSE_TAG       reduce using rule 5 (cuerpo -> forStatement .)
    STRING          reduce using rule 5 (cuerpo -> forStatement .)
    LPAREN          reduce using rule 5 (cuerpo -> forStatement .)
    IF              reduce using rule 5 (cuerpo -> forStatement .)
    FOR             reduce using rule 5 (cuerpo -> forStatement .)
    SWITCH          reduce using rule 5 (cuerpo -> forStatement .)
    ID              reduce using rule 5 (cuerpo -> forStatement .)
    FUNCTION        reduce using rule 5 (cuerpo -> forStatement .)
    FN              reduce using rule 5 (cuerpo -> forStatement .)
    ECHO            reduce using rule 5 (cuerpo -> forStatement .)
    PRINT           reduce using rule 5 (cuerpo -> forStatement .)
    INTEGER         reduce using rule 5 (cuerpo -> forStatement .)
    FLOAT           reduce using rule 5 (cuerpo -> forStatement .)
    $end            reduce using rule 5 (cuerpo -> forStatement .)
    RCURLY          reduce using rule 5 (cuerpo -> forStatement .)
    CONTINUE        reduce using rule 5 (cuerpo -> forStatement .)
    SEMICOLON       reduce using rule 5 (cuerpo -> forStatement .)
    BREAK           reduce using rule 5 (cuerpo -> forStatement .)


state 6

    (6) cuerpo -> switchStatement .

    OPEN_TAG        reduce using rule 6 (cuerpo -> switchStatement .)
    CLOSE_TAG       reduce using rule 6 (cuerpo -> switchStatement .)
    STRING          reduce using rule 6 (cuerpo -> switchStatement .)
    LPAREN          reduce using rule 6 (cuerpo -> switchStatement .)
    IF              reduce using rule 6 (cuerpo -> switchStatement .)
    FOR             reduce using rule 6 (cuerpo -> switchStatement .)
    SWITCH          reduce using rule 6 (cuerpo -> switchStatement .)
    ID              reduce using rule 6 (cuerpo -> switchStatement .)
    FUNCTION        reduce using rule 6 (cuerpo -> switchStatement .)
    FN              reduce using rule 6 (cuerpo -> switchStatement .)
    ECHO            reduce using rule 6 (cuerpo -> switchStatement .)
    PRINT           reduce using rule 6 (cuerpo -> switchStatement .)
    INTEGER         reduce using rule 6 (cuerpo -> switchStatement .)
    FLOAT           reduce using rule 6 (cuerpo -> switchStatement .)
    $end            reduce using rule 6 (cuerpo -> switchStatement .)
    RCURLY          reduce using rule 6 (cuerpo -> switchStatement .)
    CONTINUE        reduce using rule 6 (cuerpo -> switchStatement .)
    SEMICOLON       reduce using rule 6 (cuerpo -> switchStatement .)
    BREAK           reduce using rule 6 (cuerpo -> switchStatement .)


state 7

    (7) cuerpo -> arrayAsignation .

    OPEN_TAG        reduce using rule 7 (cuerpo -> arrayAsignation .)
    CLOSE_TAG       reduce using rule 7 (cuerpo -> arrayAsignation .)
    STRING          reduce using rule 7 (cuerpo -> arrayAsignation .)
    LPAREN          reduce using rule 7 (cuerpo -> arrayAsignation .)
    IF              reduce using rule 7 (cuerpo -> arrayAsignation .)
    FOR             reduce using rule 7 (cuerpo -> arrayAsignation .)
    SWITCH          reduce using rule 7 (cuerpo -> arrayAsignation .)
    ID              reduce using rule 7 (cuerpo -> arrayAsignation .)
    FUNCTION        reduce using rule 7 (cuerpo -> arrayAsignation .)
    FN              reduce using rule 7 (cuerpo -> arrayAsignation .)
    ECHO            reduce using rule 7 (cuerpo -> arrayAsignation .)
    PRINT           reduce using rule 7 (cuerpo -> arrayAsignation .)
    INTEGER         reduce using rule 7 (cuerpo -> arrayAsignation .)
    FLOAT           reduce using rule 7 (cuerpo -> arrayAsignation .)
    $end            reduce using rule 7 (cuerpo -> arrayAsignation .)
    RCURLY          reduce using rule 7 (cuerpo -> arrayAsignation .)
    CONTINUE        reduce using rule 7 (cuerpo -> arrayAsignation .)
    SEMICOLON       reduce using rule 7 (cuerpo -> arrayAsignation .)
    BREAK           reduce using rule 7 (cuerpo -> arrayAsignation .)


state 8

    (8) cuerpo -> queueDeclaration .

    OPEN_TAG        reduce using rule 8 (cuerpo -> queueDeclaration .)
    CLOSE_TAG       reduce using rule 8 (cuerpo -> queueDeclaration .)
    STRING          reduce using rule 8 (cuerpo -> queueDeclaration .)
    LPAREN          reduce using rule 8 (cuerpo -> queueDeclaration .)
    IF              reduce using rule 8 (cuerpo -> queueDeclaration .)
    FOR             reduce using rule 8 (cuerpo -> queueDeclaration .)
    SWITCH          reduce using rule 8 (cuerpo -> queueDeclaration .)
    ID              reduce using rule 8 (cuerpo -> queueDeclaration .)
    FUNCTION        reduce using rule 8 (cuerpo -> queueDeclaration .)
    FN              reduce using rule 8 (cuerpo -> queueDeclaration .)
    ECHO            reduce using rule 8 (cuerpo -> queueDeclaration .)
    PRINT           reduce using rule 8 (cuerpo -> queueDeclaration .)
    INTEGER         reduce using rule 8 (cuerpo -> queueDeclaration .)
    FLOAT           reduce using rule 8 (cuerpo -> queueDeclaration .)
    $end            reduce using rule 8 (cuerpo -> queueDeclaration .)
    RCURLY          reduce using rule 8 (cuerpo -> queueDeclaration .)
    CONTINUE        reduce using rule 8 (cuerpo -> queueDeclaration .)
    SEMICOLON       reduce using rule 8 (cuerpo -> queueDeclaration .)
    BREAK           reduce using rule 8 (cuerpo -> queueDeclaration .)


state 9

    (9) cuerpo -> queueEnqueue .

    OPEN_TAG        reduce using rule 9 (cuerpo -> queueEnqueue .)
    CLOSE_TAG       reduce using rule 9 (cuerpo -> queueEnqueue .)
    STRING          reduce using rule 9 (cuerpo -> queueEnqueue .)
    LPAREN          reduce using rule 9 (cuerpo -> queueEnqueue .)
    IF              reduce using rule 9 (cuerpo -> queueEnqueue .)
    FOR             reduce using rule 9 (cuerpo -> queueEnqueue .)
    SWITCH          reduce using rule 9 (cuerpo -> queueEnqueue .)
    ID              reduce using rule 9 (cuerpo -> queueEnqueue .)
    FUNCTION        reduce using rule 9 (cuerpo -> queueEnqueue .)
    FN              reduce using rule 9 (cuerpo -> queueEnqueue .)
    ECHO            reduce using rule 9 (cuerpo -> queueEnqueue .)
    PRINT           reduce using rule 9 (cuerpo -> queueEnqueue .)
    INTEGER         reduce using rule 9 (cuerpo -> queueEnqueue .)
    FLOAT           reduce using rule 9 (cuerpo -> queueEnqueue .)
    $end            reduce using rule 9 (cuerpo -> queueEnqueue .)
    RCURLY          reduce using rule 9 (cuerpo -> queueEnqueue .)
    CONTINUE        reduce using rule 9 (cuerpo -> queueEnqueue .)
    SEMICOLON       reduce using rule 9 (cuerpo -> queueEnqueue .)
    BREAK           reduce using rule 9 (cuerpo -> queueEnqueue .)


state 10

    (10) cuerpo -> queueDequeue .

    OPEN_TAG        reduce using rule 10 (cuerpo -> queueDequeue .)
    CLOSE_TAG       reduce using rule 10 (cuerpo -> queueDequeue .)
    STRING          reduce using rule 10 (cuerpo -> queueDequeue .)
    LPAREN          reduce using rule 10 (cuerpo -> queueDequeue .)
    IF              reduce using rule 10 (cuerpo -> queueDequeue .)
    FOR             reduce using rule 10 (cuerpo -> queueDequeue .)
    SWITCH          reduce using rule 10 (cuerpo -> queueDequeue .)
    ID              reduce using rule 10 (cuerpo -> queueDequeue .)
    FUNCTION        reduce using rule 10 (cuerpo -> queueDequeue .)
    FN              reduce using rule 10 (cuerpo -> queueDequeue .)
    ECHO            reduce using rule 10 (cuerpo -> queueDequeue .)
    PRINT           reduce using rule 10 (cuerpo -> queueDequeue .)
    INTEGER         reduce using rule 10 (cuerpo -> queueDequeue .)
    FLOAT           reduce using rule 10 (cuerpo -> queueDequeue .)
    $end            reduce using rule 10 (cuerpo -> queueDequeue .)
    RCURLY          reduce using rule 10 (cuerpo -> queueDequeue .)
    CONTINUE        reduce using rule 10 (cuerpo -> queueDequeue .)
    SEMICOLON       reduce using rule 10 (cuerpo -> queueDequeue .)
    BREAK           reduce using rule 10 (cuerpo -> queueDequeue .)


state 11

    (11) cuerpo -> defineFunction .

    OPEN_TAG        reduce using rule 11 (cuerpo -> defineFunction .)
    CLOSE_TAG       reduce using rule 11 (cuerpo -> defineFunction .)
    STRING          reduce using rule 11 (cuerpo -> defineFunction .)
    LPAREN          reduce using rule 11 (cuerpo -> defineFunction .)
    IF              reduce using rule 11 (cuerpo -> defineFunction .)
    FOR             reduce using rule 11 (cuerpo -> defineFunction .)
    SWITCH          reduce using rule 11 (cuerpo -> defineFunction .)
    ID              reduce using rule 11 (cuerpo -> defineFunction .)
    FUNCTION        reduce using rule 11 (cuerpo -> defineFunction .)
    FN              reduce using rule 11 (cuerpo -> defineFunction .)
    ECHO            reduce using rule 11 (cuerpo -> defineFunction .)
    PRINT           reduce using rule 11 (cuerpo -> defineFunction .)
    INTEGER         reduce using rule 11 (cuerpo -> defineFunction .)
    FLOAT           reduce using rule 11 (cuerpo -> defineFunction .)
    $end            reduce using rule 11 (cuerpo -> defineFunction .)
    RCURLY          reduce using rule 11 (cuerpo -> defineFunction .)
    CONTINUE        reduce using rule 11 (cuerpo -> defineFunction .)
    SEMICOLON       reduce using rule 11 (cuerpo -> defineFunction .)
    BREAK           reduce using rule 11 (cuerpo -> defineFunction .)


state 12

    (12) cuerpo -> anonymousFunction .

    OPEN_TAG        reduce using rule 12 (cuerpo -> anonymousFunction .)
    CLOSE_TAG       reduce using rule 12 (cuerpo -> anonymousFunction .)
    STRING          reduce using rule 12 (cuerpo -> anonymousFunction .)
    LPAREN          reduce using rule 12 (cuerpo -> anonymousFunction .)
    IF              reduce using rule 12 (cuerpo -> anonymousFunction .)
    FOR             reduce using rule 12 (cuerpo -> anonymousFunction .)
    SWITCH          reduce using rule 12 (cuerpo -> anonymousFunction .)
    ID              reduce using rule 12 (cuerpo -> anonymousFunction .)
    FUNCTION        reduce using rule 12 (cuerpo -> anonymousFunction .)
    FN              reduce using rule 12 (cuerpo -> anonymousFunction .)
    ECHO            reduce using rule 12 (cuerpo -> anonymousFunction .)
    PRINT           reduce using rule 12 (cuerpo -> anonymousFunction .)
    INTEGER         reduce using rule 12 (cuerpo -> anonymousFunction .)
    FLOAT           reduce using rule 12 (cuerpo -> anonymousFunction .)
    $end            reduce using rule 12 (cuerpo -> anonymousFunction .)
    RCURLY          reduce using rule 12 (cuerpo -> anonymousFunction .)
    CONTINUE        reduce using rule 12 (cuerpo -> anonymousFunction .)
    SEMICOLON       reduce using rule 12 (cuerpo -> anonymousFunction .)
    BREAK           reduce using rule 12 (cuerpo -> anonymousFunction .)


state 13

    (13) cuerpo -> arrowFunction .

    OPEN_TAG        reduce using rule 13 (cuerpo -> arrowFunction .)
    CLOSE_TAG       reduce using rule 13 (cuerpo -> arrowFunction .)
    STRING          reduce using rule 13 (cuerpo -> arrowFunction .)
    LPAREN          reduce using rule 13 (cuerpo -> arrowFunction .)
    IF              reduce using rule 13 (cuerpo -> arrowFunction .)
    FOR             reduce using rule 13 (cuerpo -> arrowFunction .)
    SWITCH          reduce using rule 13 (cuerpo -> arrowFunction .)
    ID              reduce using rule 13 (cuerpo -> arrowFunction .)
    FUNCTION        reduce using rule 13 (cuerpo -> arrowFunction .)
    FN              reduce using rule 13 (cuerpo -> arrowFunction .)
    ECHO            reduce using rule 13 (cuerpo -> arrowFunction .)
    PRINT           reduce using rule 13 (cuerpo -> arrowFunction .)
    INTEGER         reduce using rule 13 (cuerpo -> arrowFunction .)
    FLOAT           reduce using rule 13 (cuerpo -> arrowFunction .)
    $end            reduce using rule 13 (cuerpo -> arrowFunction .)
    RCURLY          reduce using rule 13 (cuerpo -> arrowFunction .)
    CONTINUE        reduce using rule 13 (cuerpo -> arrowFunction .)
    SEMICOLON       reduce using rule 13 (cuerpo -> arrowFunction .)
    BREAK           reduce using rule 13 (cuerpo -> arrowFunction .)


state 14

    (14) cuerpo -> echo .

    OPEN_TAG        reduce using rule 14 (cuerpo -> echo .)
    CLOSE_TAG       reduce using rule 14 (cuerpo -> echo .)
    STRING          reduce using rule 14 (cuerpo -> echo .)
    LPAREN          reduce using rule 14 (cuerpo -> echo .)
    IF              reduce using rule 14 (cuerpo -> echo .)
    FOR             reduce using rule 14 (cuerpo -> echo .)
    SWITCH          reduce using rule 14 (cuerpo -> echo .)
    ID              reduce using rule 14 (cuerpo -> echo .)
    FUNCTION        reduce using rule 14 (cuerpo -> echo .)
    FN              reduce using rule 14 (cuerpo -> echo .)
    ECHO            reduce using rule 14 (cuerpo -> echo .)
    PRINT           reduce using rule 14 (cuerpo -> echo .)
    INTEGER         reduce using rule 14 (cuerpo -> echo .)
    FLOAT           reduce using rule 14 (cuerpo -> echo .)
    $end            reduce using rule 14 (cuerpo -> echo .)
    RCURLY          reduce using rule 14 (cuerpo -> echo .)
    CONTINUE        reduce using rule 14 (cuerpo -> echo .)
    SEMICOLON       reduce using rule 14 (cuerpo -> echo .)
    BREAK           reduce using rule 14 (cuerpo -> echo .)


state 15

    (15) cuerpo -> fgets .

    OPEN_TAG        reduce using rule 15 (cuerpo -> fgets .)
    CLOSE_TAG       reduce using rule 15 (cuerpo -> fgets .)
    STRING          reduce using rule 15 (cuerpo -> fgets .)
    LPAREN          reduce using rule 15 (cuerpo -> fgets .)
    IF              reduce using rule 15 (cuerpo -> fgets .)
    FOR             reduce using rule 15 (cuerpo -> fgets .)
    SWITCH          reduce using rule 15 (cuerpo -> fgets .)
    ID              reduce using rule 15 (cuerpo -> fgets .)
    FUNCTION        reduce using rule 15 (cuerpo -> fgets .)
    FN              reduce using rule 15 (cuerpo -> fgets .)
    ECHO            reduce using rule 15 (cuerpo -> fgets .)
    PRINT           reduce using rule 15 (cuerpo -> fgets .)
    INTEGER         reduce using rule 15 (cuerpo -> fgets .)
    FLOAT           reduce using rule 15 (cuerpo -> fgets .)
    $end            reduce using rule 15 (cuerpo -> fgets .)
    RCURLY          reduce using rule 15 (cuerpo -> fgets .)
    CONTINUE        reduce using rule 15 (cuerpo -> fgets .)
    SEMICOLON       reduce using rule 15 (cuerpo -> fgets .)
    BREAK           reduce using rule 15 (cuerpo -> fgets .)


state 16

    (16) cuerpo -> stackDeclaration .

    OPEN_TAG        reduce using rule 16 (cuerpo -> stackDeclaration .)
    CLOSE_TAG       reduce using rule 16 (cuerpo -> stackDeclaration .)
    STRING          reduce using rule 16 (cuerpo -> stackDeclaration .)
    LPAREN          reduce using rule 16 (cuerpo -> stackDeclaration .)
    IF              reduce using rule 16 (cuerpo -> stackDeclaration .)
    FOR             reduce using rule 16 (cuerpo -> stackDeclaration .)
    SWITCH          reduce using rule 16 (cuerpo -> stackDeclaration .)
    ID              reduce using rule 16 (cuerpo -> stackDeclaration .)
    FUNCTION        reduce using rule 16 (cuerpo -> stackDeclaration .)
    FN              reduce using rule 16 (cuerpo -> stackDeclaration .)
    ECHO            reduce using rule 16 (cuerpo -> stackDeclaration .)
    PRINT           reduce using rule 16 (cuerpo -> stackDeclaration .)
    INTEGER         reduce using rule 16 (cuerpo -> stackDeclaration .)
    FLOAT           reduce using rule 16 (cuerpo -> stackDeclaration .)
    $end            reduce using rule 16 (cuerpo -> stackDeclaration .)
    RCURLY          reduce using rule 16 (cuerpo -> stackDeclaration .)
    CONTINUE        reduce using rule 16 (cuerpo -> stackDeclaration .)
    SEMICOLON       reduce using rule 16 (cuerpo -> stackDeclaration .)
    BREAK           reduce using rule 16 (cuerpo -> stackDeclaration .)


state 17

    (17) cuerpo -> stackPush .

    OPEN_TAG        reduce using rule 17 (cuerpo -> stackPush .)
    CLOSE_TAG       reduce using rule 17 (cuerpo -> stackPush .)
    STRING          reduce using rule 17 (cuerpo -> stackPush .)
    LPAREN          reduce using rule 17 (cuerpo -> stackPush .)
    IF              reduce using rule 17 (cuerpo -> stackPush .)
    FOR             reduce using rule 17 (cuerpo -> stackPush .)
    SWITCH          reduce using rule 17 (cuerpo -> stackPush .)
    ID              reduce using rule 17 (cuerpo -> stackPush .)
    FUNCTION        reduce using rule 17 (cuerpo -> stackPush .)
    FN              reduce using rule 17 (cuerpo -> stackPush .)
    ECHO            reduce using rule 17 (cuerpo -> stackPush .)
    PRINT           reduce using rule 17 (cuerpo -> stackPush .)
    INTEGER         reduce using rule 17 (cuerpo -> stackPush .)
    FLOAT           reduce using rule 17 (cuerpo -> stackPush .)
    $end            reduce using rule 17 (cuerpo -> stackPush .)
    RCURLY          reduce using rule 17 (cuerpo -> stackPush .)
    CONTINUE        reduce using rule 17 (cuerpo -> stackPush .)
    SEMICOLON       reduce using rule 17 (cuerpo -> stackPush .)
    BREAK           reduce using rule 17 (cuerpo -> stackPush .)


state 18

    (18) cuerpo -> stackPop .

    OPEN_TAG        reduce using rule 18 (cuerpo -> stackPop .)
    CLOSE_TAG       reduce using rule 18 (cuerpo -> stackPop .)
    STRING          reduce using rule 18 (cuerpo -> stackPop .)
    LPAREN          reduce using rule 18 (cuerpo -> stackPop .)
    IF              reduce using rule 18 (cuerpo -> stackPop .)
    FOR             reduce using rule 18 (cuerpo -> stackPop .)
    SWITCH          reduce using rule 18 (cuerpo -> stackPop .)
    ID              reduce using rule 18 (cuerpo -> stackPop .)
    FUNCTION        reduce using rule 18 (cuerpo -> stackPop .)
    FN              reduce using rule 18 (cuerpo -> stackPop .)
    ECHO            reduce using rule 18 (cuerpo -> stackPop .)
    PRINT           reduce using rule 18 (cuerpo -> stackPop .)
    INTEGER         reduce using rule 18 (cuerpo -> stackPop .)
    FLOAT           reduce using rule 18 (cuerpo -> stackPop .)
    $end            reduce using rule 18 (cuerpo -> stackPop .)
    RCURLY          reduce using rule 18 (cuerpo -> stackPop .)
    CONTINUE        reduce using rule 18 (cuerpo -> stackPop .)
    SEMICOLON       reduce using rule 18 (cuerpo -> stackPop .)
    BREAK           reduce using rule 18 (cuerpo -> stackPop .)


state 19

    (19) cuerpo -> line .

    OPEN_TAG        reduce using rule 19 (cuerpo -> line .)
    CLOSE_TAG       reduce using rule 19 (cuerpo -> line .)
    STRING          reduce using rule 19 (cuerpo -> line .)
    LPAREN          reduce using rule 19 (cuerpo -> line .)
    IF              reduce using rule 19 (cuerpo -> line .)
    FOR             reduce using rule 19 (cuerpo -> line .)
    SWITCH          reduce using rule 19 (cuerpo -> line .)
    ID              reduce using rule 19 (cuerpo -> line .)
    FUNCTION        reduce using rule 19 (cuerpo -> line .)
    FN              reduce using rule 19 (cuerpo -> line .)
    ECHO            reduce using rule 19 (cuerpo -> line .)
    PRINT           reduce using rule 19 (cuerpo -> line .)
    INTEGER         reduce using rule 19 (cuerpo -> line .)
    FLOAT           reduce using rule 19 (cuerpo -> line .)
    $end            reduce using rule 19 (cuerpo -> line .)
    RCURLY          reduce using rule 19 (cuerpo -> line .)
    CONTINUE        reduce using rule 19 (cuerpo -> line .)
    SEMICOLON       reduce using rule 19 (cuerpo -> line .)
    BREAK           reduce using rule 19 (cuerpo -> line .)


state 20

    (20) cuerpo -> print .

    OPEN_TAG        reduce using rule 20 (cuerpo -> print .)
    CLOSE_TAG       reduce using rule 20 (cuerpo -> print .)
    STRING          reduce using rule 20 (cuerpo -> print .)
    LPAREN          reduce using rule 20 (cuerpo -> print .)
    IF              reduce using rule 20 (cuerpo -> print .)
    FOR             reduce using rule 20 (cuerpo -> print .)
    SWITCH          reduce using rule 20 (cuerpo -> print .)
    ID              reduce using rule 20 (cuerpo -> print .)
    FUNCTION        reduce using rule 20 (cuerpo -> print .)
    FN              reduce using rule 20 (cuerpo -> print .)
    ECHO            reduce using rule 20 (cuerpo -> print .)
    PRINT           reduce using rule 20 (cuerpo -> print .)
    INTEGER         reduce using rule 20 (cuerpo -> print .)
    FLOAT           reduce using rule 20 (cuerpo -> print .)
    $end            reduce using rule 20 (cuerpo -> print .)
    RCURLY          reduce using rule 20 (cuerpo -> print .)
    CONTINUE        reduce using rule 20 (cuerpo -> print .)
    SEMICOLON       reduce using rule 20 (cuerpo -> print .)
    BREAK           reduce using rule 20 (cuerpo -> print .)


state 21

    (21) cuerpo -> logicalCondition .

    OPEN_TAG        reduce using rule 21 (cuerpo -> logicalCondition .)
    CLOSE_TAG       reduce using rule 21 (cuerpo -> logicalCondition .)
    STRING          reduce using rule 21 (cuerpo -> logicalCondition .)
    LPAREN          reduce using rule 21 (cuerpo -> logicalCondition .)
    IF              reduce using rule 21 (cuerpo -> logicalCondition .)
    FOR             reduce using rule 21 (cuerpo -> logicalCondition .)
    SWITCH          reduce using rule 21 (cuerpo -> logicalCondition .)
    ID              reduce using rule 21 (cuerpo -> logicalCondition .)
    FUNCTION        reduce using rule 21 (cuerpo -> logicalCondition .)
    FN              reduce using rule 21 (cuerpo -> logicalCondition .)
    ECHO            reduce using rule 21 (cuerpo -> logicalCondition .)
    PRINT           reduce using rule 21 (cuerpo -> logicalCondition .)
    INTEGER         reduce using rule 21 (cuerpo -> logicalCondition .)
    FLOAT           reduce using rule 21 (cuerpo -> logicalCondition .)
    $end            reduce using rule 21 (cuerpo -> logicalCondition .)
    RCURLY          reduce using rule 21 (cuerpo -> logicalCondition .)
    CONTINUE        reduce using rule 21 (cuerpo -> logicalCondition .)
    SEMICOLON       reduce using rule 21 (cuerpo -> logicalCondition .)
    BREAK           reduce using rule 21 (cuerpo -> logicalCondition .)


state 22

    (22) cuerpo -> OPEN_TAG .

    OPEN_TAG        reduce using rule 22 (cuerpo -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 22 (cuerpo -> OPEN_TAG .)
    STRING          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    LPAREN          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    IF              reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FOR             reduce using rule 22 (cuerpo -> OPEN_TAG .)
    SWITCH          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    ID              reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FUNCTION        reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FN              reduce using rule 22 (cuerpo -> OPEN_TAG .)
    ECHO            reduce using rule 22 (cuerpo -> OPEN_TAG .)
    PRINT           reduce using rule 22 (cuerpo -> OPEN_TAG .)
    INTEGER         reduce using rule 22 (cuerpo -> OPEN_TAG .)
    FLOAT           reduce using rule 22 (cuerpo -> OPEN_TAG .)
    $end            reduce using rule 22 (cuerpo -> OPEN_TAG .)
    RCURLY          reduce using rule 22 (cuerpo -> OPEN_TAG .)
    CONTINUE        reduce using rule 22 (cuerpo -> OPEN_TAG .)
    SEMICOLON       reduce using rule 22 (cuerpo -> OPEN_TAG .)
    BREAK           reduce using rule 22 (cuerpo -> OPEN_TAG .)


state 23

    (23) cuerpo -> CLOSE_TAG .

    OPEN_TAG        reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    STRING          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    LPAREN          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    IF              reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FOR             reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    SWITCH          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    ID              reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FUNCTION        reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FN              reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    ECHO            reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    PRINT           reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    INTEGER         reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    FLOAT           reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    $end            reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    RCURLY          reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    CONTINUE        reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    SEMICOLON       reduce using rule 23 (cuerpo -> CLOSE_TAG .)
    BREAK           reduce using rule 23 (cuerpo -> CLOSE_TAG .)


state 24

    (24) cuerpo -> stringConcatenation .
    (105) stringConcatenation -> stringConcatenation . CONCAT stringConcatenation

    OPEN_TAG        reduce using rule 24 (cuerpo -> stringConcatenation .)
    CLOSE_TAG       reduce using rule 24 (cuerpo -> stringConcatenation .)
    STRING          reduce using rule 24 (cuerpo -> stringConcatenation .)
    LPAREN          reduce using rule 24 (cuerpo -> stringConcatenation .)
    IF              reduce using rule 24 (cuerpo -> stringConcatenation .)
    FOR             reduce using rule 24 (cuerpo -> stringConcatenation .)
    SWITCH          reduce using rule 24 (cuerpo -> stringConcatenation .)
    ID              reduce using rule 24 (cuerpo -> stringConcatenation .)
    FUNCTION        reduce using rule 24 (cuerpo -> stringConcatenation .)
    FN              reduce using rule 24 (cuerpo -> stringConcatenation .)
    ECHO            reduce using rule 24 (cuerpo -> stringConcatenation .)
    PRINT           reduce using rule 24 (cuerpo -> stringConcatenation .)
    INTEGER         reduce using rule 24 (cuerpo -> stringConcatenation .)
    FLOAT           reduce using rule 24 (cuerpo -> stringConcatenation .)
    $end            reduce using rule 24 (cuerpo -> stringConcatenation .)
    RCURLY          reduce using rule 24 (cuerpo -> stringConcatenation .)
    CONTINUE        reduce using rule 24 (cuerpo -> stringConcatenation .)
    SEMICOLON       reduce using rule 24 (cuerpo -> stringConcatenation .)
    BREAK           reduce using rule 24 (cuerpo -> stringConcatenation .)
    CONCAT          shift and go to state 49


state 25

    (25) cuerpo -> callFunction .

    OPEN_TAG        reduce using rule 25 (cuerpo -> callFunction .)
    CLOSE_TAG       reduce using rule 25 (cuerpo -> callFunction .)
    STRING          reduce using rule 25 (cuerpo -> callFunction .)
    LPAREN          reduce using rule 25 (cuerpo -> callFunction .)
    IF              reduce using rule 25 (cuerpo -> callFunction .)
    FOR             reduce using rule 25 (cuerpo -> callFunction .)
    SWITCH          reduce using rule 25 (cuerpo -> callFunction .)
    ID              reduce using rule 25 (cuerpo -> callFunction .)
    FUNCTION        reduce using rule 25 (cuerpo -> callFunction .)
    FN              reduce using rule 25 (cuerpo -> callFunction .)
    ECHO            reduce using rule 25 (cuerpo -> callFunction .)
    PRINT           reduce using rule 25 (cuerpo -> callFunction .)
    INTEGER         reduce using rule 25 (cuerpo -> callFunction .)
    FLOAT           reduce using rule 25 (cuerpo -> callFunction .)
    $end            reduce using rule 25 (cuerpo -> callFunction .)
    RCURLY          reduce using rule 25 (cuerpo -> callFunction .)
    CONTINUE        reduce using rule 25 (cuerpo -> callFunction .)
    SEMICOLON       reduce using rule 25 (cuerpo -> callFunction .)
    BREAK           reduce using rule 25 (cuerpo -> callFunction .)


state 26

    (71) arithmeticExpression -> value .
    (104) stringConcatenation -> value . CONCAT value
    (97) comparingValue -> value . comparingSign value
    (90) comparingSign -> . IS_EQUAL
    (91) comparingSign -> . IDENTICAL
    (92) comparingSign -> . NOTEQUAL
    (93) comparingSign -> . LESSTHAN
    (94) comparingSign -> . GREATERTHAN
    (95) comparingSign -> . LESSEQUALTHAN
    (96) comparingSign -> . GREATEREQUALTHAN

    PLUS            reduce using rule 71 (arithmeticExpression -> value .)
    MINUS           reduce using rule 71 (arithmeticExpression -> value .)
    TIMES           reduce using rule 71 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 71 (arithmeticExpression -> value .)
    MOD             reduce using rule 71 (arithmeticExpression -> value .)
    EXP             reduce using rule 71 (arithmeticExpression -> value .)
    OPEN_TAG        reduce using rule 71 (arithmeticExpression -> value .)
    CLOSE_TAG       reduce using rule 71 (arithmeticExpression -> value .)
    STRING          reduce using rule 71 (arithmeticExpression -> value .)
    LPAREN          reduce using rule 71 (arithmeticExpression -> value .)
    IF              reduce using rule 71 (arithmeticExpression -> value .)
    FOR             reduce using rule 71 (arithmeticExpression -> value .)
    SWITCH          reduce using rule 71 (arithmeticExpression -> value .)
    ID              reduce using rule 71 (arithmeticExpression -> value .)
    FUNCTION        reduce using rule 71 (arithmeticExpression -> value .)
    FN              reduce using rule 71 (arithmeticExpression -> value .)
    ECHO            reduce using rule 71 (arithmeticExpression -> value .)
    PRINT           reduce using rule 71 (arithmeticExpression -> value .)
    INTEGER         reduce using rule 71 (arithmeticExpression -> value .)
    FLOAT           reduce using rule 71 (arithmeticExpression -> value .)
    $end            reduce using rule 71 (arithmeticExpression -> value .)
    RCURLY          reduce using rule 71 (arithmeticExpression -> value .)
    CONTINUE        reduce using rule 71 (arithmeticExpression -> value .)
    SEMICOLON       reduce using rule 71 (arithmeticExpression -> value .)
    BREAK           reduce using rule 71 (arithmeticExpression -> value .)
    CONCAT          shift and go to state 50
    IS_EQUAL        shift and go to state 52
    IDENTICAL       shift and go to state 53
    NOTEQUAL        shift and go to state 54
    LESSTHAN        shift and go to state 55
    GREATERTHAN     shift and go to state 56
    LESSEQUALTHAN   shift and go to state 57
    GREATEREQUALTHAN shift and go to state 58

    comparingSign                  shift and go to state 51

state 27

    (72) arithmeticExpression -> STRING .
    (80) value -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for TIMES resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for OPEN_TAG resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for IF resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for SWITCH resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for FN resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for ECHO resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for PRINT resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for INTEGER resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for FLOAT resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for RCURLY resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for BREAK resolved using rule 72 (arithmeticExpression -> STRING .)
    PLUS            reduce using rule 72 (arithmeticExpression -> STRING .)
    MINUS           reduce using rule 72 (arithmeticExpression -> STRING .)
    TIMES           reduce using rule 72 (arithmeticExpression -> STRING .)
    DIVIDE          reduce using rule 72 (arithmeticExpression -> STRING .)
    MOD             reduce using rule 72 (arithmeticExpression -> STRING .)
    EXP             reduce using rule 72 (arithmeticExpression -> STRING .)
    OPEN_TAG        reduce using rule 72 (arithmeticExpression -> STRING .)
    CLOSE_TAG       reduce using rule 72 (arithmeticExpression -> STRING .)
    STRING          reduce using rule 72 (arithmeticExpression -> STRING .)
    LPAREN          reduce using rule 72 (arithmeticExpression -> STRING .)
    IF              reduce using rule 72 (arithmeticExpression -> STRING .)
    FOR             reduce using rule 72 (arithmeticExpression -> STRING .)
    SWITCH          reduce using rule 72 (arithmeticExpression -> STRING .)
    ID              reduce using rule 72 (arithmeticExpression -> STRING .)
    FUNCTION        reduce using rule 72 (arithmeticExpression -> STRING .)
    FN              reduce using rule 72 (arithmeticExpression -> STRING .)
    ECHO            reduce using rule 72 (arithmeticExpression -> STRING .)
    PRINT           reduce using rule 72 (arithmeticExpression -> STRING .)
    INTEGER         reduce using rule 72 (arithmeticExpression -> STRING .)
    FLOAT           reduce using rule 72 (arithmeticExpression -> STRING .)
    $end            reduce using rule 72 (arithmeticExpression -> STRING .)
    RPAREN          reduce using rule 72 (arithmeticExpression -> STRING .)
    SEMICOLON       reduce using rule 72 (arithmeticExpression -> STRING .)
    RCURLY          reduce using rule 72 (arithmeticExpression -> STRING .)
    CONTINUE        reduce using rule 72 (arithmeticExpression -> STRING .)
    BREAK           reduce using rule 72 (arithmeticExpression -> STRING .)
    CONCAT          reduce using rule 80 (value -> STRING .)
    IS_EQUAL        reduce using rule 80 (value -> STRING .)
    IDENTICAL       reduce using rule 80 (value -> STRING .)
    NOTEQUAL        reduce using rule 80 (value -> STRING .)
    LESSTHAN        reduce using rule 80 (value -> STRING .)
    GREATERTHAN     reduce using rule 80 (value -> STRING .)
    LESSEQUALTHAN   reduce using rule 80 (value -> STRING .)
    GREATEREQUALTHAN reduce using rule 80 (value -> STRING .)

  ! PLUS            [ reduce using rule 80 (value -> STRING .) ]
  ! MINUS           [ reduce using rule 80 (value -> STRING .) ]
  ! TIMES           [ reduce using rule 80 (value -> STRING .) ]
  ! DIVIDE          [ reduce using rule 80 (value -> STRING .) ]
  ! MOD             [ reduce using rule 80 (value -> STRING .) ]
  ! EXP             [ reduce using rule 80 (value -> STRING .) ]
  ! OPEN_TAG        [ reduce using rule 80 (value -> STRING .) ]
  ! CLOSE_TAG       [ reduce using rule 80 (value -> STRING .) ]
  ! STRING          [ reduce using rule 80 (value -> STRING .) ]
  ! LPAREN          [ reduce using rule 80 (value -> STRING .) ]
  ! IF              [ reduce using rule 80 (value -> STRING .) ]
  ! FOR             [ reduce using rule 80 (value -> STRING .) ]
  ! SWITCH          [ reduce using rule 80 (value -> STRING .) ]
  ! ID              [ reduce using rule 80 (value -> STRING .) ]
  ! FUNCTION        [ reduce using rule 80 (value -> STRING .) ]
  ! FN              [ reduce using rule 80 (value -> STRING .) ]
  ! ECHO            [ reduce using rule 80 (value -> STRING .) ]
  ! PRINT           [ reduce using rule 80 (value -> STRING .) ]
  ! INTEGER         [ reduce using rule 80 (value -> STRING .) ]
  ! FLOAT           [ reduce using rule 80 (value -> STRING .) ]
  ! $end            [ reduce using rule 80 (value -> STRING .) ]
  ! RPAREN          [ reduce using rule 80 (value -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 80 (value -> STRING .) ]
  ! RCURLY          [ reduce using rule 80 (value -> STRING .) ]
  ! CONTINUE        [ reduce using rule 80 (value -> STRING .) ]
  ! BREAK           [ reduce using rule 80 (value -> STRING .) ]


state 28

    (73) arithmeticExpression -> LPAREN . arithmeticExpression RPAREN
    (100) logicalCondition -> LPAREN . logicalCondition RPAREN
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (97) comparingValue -> . value comparingSign value

    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    arithmeticExpression           shift and go to state 59
    logicalCondition               shift and go to state 60
    value                          shift and go to state 61
    comparingValue                 shift and go to state 38

state 29

    (31) if_elseStatement -> IF . LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> IF . LPAREN logicalCondition RPAREN LCURLY ifStatementBody

    LPAREN          shift and go to state 63


state 30

    (36) forStatement -> FOR . LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY

    LPAREN          shift and go to state 64


state 31

    (26) switchStatement -> SWITCH . LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY

    LPAREN          shift and go to state 65


state 32

    (42) arrayAsignation -> ID . EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> ID . EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> ID . OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> ID . OBJOP POP SEMICOLON
    (70) fgets -> ID . EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> ID . EQUAL NEW STACK SEMICOLON
    (51) stackPush -> ID . OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> ID . OBJOP POP SEMICOLON
    (75) callFunction -> ID . LPAREN RPAREN
    (76) callFunction -> ID . LPAREN value RPAREN
    (77) value -> ID .
    (88) variableAsignation -> ID . EQUAL value
    (89) variableAsignation -> ID . EQUAL arithmeticExpression

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           shift and go to state 66
    OBJOP           shift and go to state 67
    LPAREN          shift and go to state 68
    CONCAT          reduce using rule 77 (value -> ID .)
    IS_EQUAL        reduce using rule 77 (value -> ID .)
    IDENTICAL       reduce using rule 77 (value -> ID .)
    NOTEQUAL        reduce using rule 77 (value -> ID .)
    LESSTHAN        reduce using rule 77 (value -> ID .)
    GREATERTHAN     reduce using rule 77 (value -> ID .)
    LESSEQUALTHAN   reduce using rule 77 (value -> ID .)
    GREATEREQUALTHAN reduce using rule 77 (value -> ID .)
    PLUS            reduce using rule 77 (value -> ID .)
    MINUS           reduce using rule 77 (value -> ID .)
    TIMES           reduce using rule 77 (value -> ID .)
    DIVIDE          reduce using rule 77 (value -> ID .)
    MOD             reduce using rule 77 (value -> ID .)
    EXP             reduce using rule 77 (value -> ID .)
    OPEN_TAG        reduce using rule 77 (value -> ID .)
    CLOSE_TAG       reduce using rule 77 (value -> ID .)
    STRING          reduce using rule 77 (value -> ID .)
    IF              reduce using rule 77 (value -> ID .)
    FOR             reduce using rule 77 (value -> ID .)
    SWITCH          reduce using rule 77 (value -> ID .)
    ID              reduce using rule 77 (value -> ID .)
    FUNCTION        reduce using rule 77 (value -> ID .)
    FN              reduce using rule 77 (value -> ID .)
    ECHO            reduce using rule 77 (value -> ID .)
    PRINT           reduce using rule 77 (value -> ID .)
    INTEGER         reduce using rule 77 (value -> ID .)
    FLOAT           reduce using rule 77 (value -> ID .)
    $end            reduce using rule 77 (value -> ID .)
    RCURLY          reduce using rule 77 (value -> ID .)
    CONTINUE        reduce using rule 77 (value -> ID .)
    SEMICOLON       reduce using rule 77 (value -> ID .)
    BREAK           reduce using rule 77 (value -> ID .)

  ! LPAREN          [ reduce using rule 77 (value -> ID .) ]


state 33

    (56) defineFunction -> FUNCTION . ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> FUNCTION . ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> FUNCTION . LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> FUNCTION . LPAREN arguments RPAREN LCURLY cuerpo RCURLY

    ID              shift and go to state 69
    LPAREN          shift and go to state 70


state 34

    (62) arrowFunction -> FN . LPAREN ID RPAREN FNARROW arrowBody SEMICOLON

    LPAREN          shift and go to state 71


state 35

    (65) echo -> ECHO . values SEMICOLON
    (68) values -> . value
    (69) values -> . values COMMA value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    values                         shift and go to state 72
    value                          shift and go to state 73

state 36

    (87) line -> variableAsignation . SEMICOLON

    SEMICOLON       shift and go to state 75


state 37

    (66) print -> PRINT . LPAREN values RPAREN SEMICOLON
    (67) print -> PRINT . value SEMICOLON
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    LPAREN          shift and go to state 76
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 77

state 38

    (98) logicalCondition -> comparingValue .
    (99) logicalCondition -> comparingValue . conditionOperator comparingValue
    (101) conditionOperator -> . AND
    (102) conditionOperator -> . OR
    (103) conditionOperator -> . XOR

    OPEN_TAG        reduce using rule 98 (logicalCondition -> comparingValue .)
    CLOSE_TAG       reduce using rule 98 (logicalCondition -> comparingValue .)
    STRING          reduce using rule 98 (logicalCondition -> comparingValue .)
    LPAREN          reduce using rule 98 (logicalCondition -> comparingValue .)
    IF              reduce using rule 98 (logicalCondition -> comparingValue .)
    FOR             reduce using rule 98 (logicalCondition -> comparingValue .)
    SWITCH          reduce using rule 98 (logicalCondition -> comparingValue .)
    ID              reduce using rule 98 (logicalCondition -> comparingValue .)
    FUNCTION        reduce using rule 98 (logicalCondition -> comparingValue .)
    FN              reduce using rule 98 (logicalCondition -> comparingValue .)
    ECHO            reduce using rule 98 (logicalCondition -> comparingValue .)
    PRINT           reduce using rule 98 (logicalCondition -> comparingValue .)
    INTEGER         reduce using rule 98 (logicalCondition -> comparingValue .)
    FLOAT           reduce using rule 98 (logicalCondition -> comparingValue .)
    $end            reduce using rule 98 (logicalCondition -> comparingValue .)
    RPAREN          reduce using rule 98 (logicalCondition -> comparingValue .)
    RCURLY          reduce using rule 98 (logicalCondition -> comparingValue .)
    CONTINUE        reduce using rule 98 (logicalCondition -> comparingValue .)
    SEMICOLON       reduce using rule 98 (logicalCondition -> comparingValue .)
    BREAK           reduce using rule 98 (logicalCondition -> comparingValue .)
    AND             shift and go to state 79
    OR              shift and go to state 80
    XOR             shift and go to state 81

    conditionOperator              shift and go to state 78

state 39

    (78) value -> INTEGER .

    CONCAT          reduce using rule 78 (value -> INTEGER .)
    IS_EQUAL        reduce using rule 78 (value -> INTEGER .)
    IDENTICAL       reduce using rule 78 (value -> INTEGER .)
    NOTEQUAL        reduce using rule 78 (value -> INTEGER .)
    LESSTHAN        reduce using rule 78 (value -> INTEGER .)
    GREATERTHAN     reduce using rule 78 (value -> INTEGER .)
    LESSEQUALTHAN   reduce using rule 78 (value -> INTEGER .)
    GREATEREQUALTHAN reduce using rule 78 (value -> INTEGER .)
    PLUS            reduce using rule 78 (value -> INTEGER .)
    MINUS           reduce using rule 78 (value -> INTEGER .)
    TIMES           reduce using rule 78 (value -> INTEGER .)
    DIVIDE          reduce using rule 78 (value -> INTEGER .)
    MOD             reduce using rule 78 (value -> INTEGER .)
    EXP             reduce using rule 78 (value -> INTEGER .)
    OPEN_TAG        reduce using rule 78 (value -> INTEGER .)
    CLOSE_TAG       reduce using rule 78 (value -> INTEGER .)
    STRING          reduce using rule 78 (value -> INTEGER .)
    LPAREN          reduce using rule 78 (value -> INTEGER .)
    IF              reduce using rule 78 (value -> INTEGER .)
    FOR             reduce using rule 78 (value -> INTEGER .)
    SWITCH          reduce using rule 78 (value -> INTEGER .)
    ID              reduce using rule 78 (value -> INTEGER .)
    FUNCTION        reduce using rule 78 (value -> INTEGER .)
    FN              reduce using rule 78 (value -> INTEGER .)
    ECHO            reduce using rule 78 (value -> INTEGER .)
    PRINT           reduce using rule 78 (value -> INTEGER .)
    INTEGER         reduce using rule 78 (value -> INTEGER .)
    FLOAT           reduce using rule 78 (value -> INTEGER .)
    $end            reduce using rule 78 (value -> INTEGER .)
    RPAREN          reduce using rule 78 (value -> INTEGER .)
    SEMICOLON       reduce using rule 78 (value -> INTEGER .)
    COMMA           reduce using rule 78 (value -> INTEGER .)
    RCURLY          reduce using rule 78 (value -> INTEGER .)
    CONTINUE        reduce using rule 78 (value -> INTEGER .)
    BREAK           reduce using rule 78 (value -> INTEGER .)
    AND             reduce using rule 78 (value -> INTEGER .)
    OR              reduce using rule 78 (value -> INTEGER .)
    XOR             reduce using rule 78 (value -> INTEGER .)
    RSQUARE         reduce using rule 78 (value -> INTEGER .)
    COLON           reduce using rule 78 (value -> INTEGER .)


state 40

    (79) value -> FLOAT .

    CONCAT          reduce using rule 79 (value -> FLOAT .)
    IS_EQUAL        reduce using rule 79 (value -> FLOAT .)
    IDENTICAL       reduce using rule 79 (value -> FLOAT .)
    NOTEQUAL        reduce using rule 79 (value -> FLOAT .)
    LESSTHAN        reduce using rule 79 (value -> FLOAT .)
    GREATERTHAN     reduce using rule 79 (value -> FLOAT .)
    LESSEQUALTHAN   reduce using rule 79 (value -> FLOAT .)
    GREATEREQUALTHAN reduce using rule 79 (value -> FLOAT .)
    PLUS            reduce using rule 79 (value -> FLOAT .)
    MINUS           reduce using rule 79 (value -> FLOAT .)
    TIMES           reduce using rule 79 (value -> FLOAT .)
    DIVIDE          reduce using rule 79 (value -> FLOAT .)
    MOD             reduce using rule 79 (value -> FLOAT .)
    EXP             reduce using rule 79 (value -> FLOAT .)
    OPEN_TAG        reduce using rule 79 (value -> FLOAT .)
    CLOSE_TAG       reduce using rule 79 (value -> FLOAT .)
    STRING          reduce using rule 79 (value -> FLOAT .)
    LPAREN          reduce using rule 79 (value -> FLOAT .)
    IF              reduce using rule 79 (value -> FLOAT .)
    FOR             reduce using rule 79 (value -> FLOAT .)
    SWITCH          reduce using rule 79 (value -> FLOAT .)
    ID              reduce using rule 79 (value -> FLOAT .)
    FUNCTION        reduce using rule 79 (value -> FLOAT .)
    FN              reduce using rule 79 (value -> FLOAT .)
    ECHO            reduce using rule 79 (value -> FLOAT .)
    PRINT           reduce using rule 79 (value -> FLOAT .)
    INTEGER         reduce using rule 79 (value -> FLOAT .)
    FLOAT           reduce using rule 79 (value -> FLOAT .)
    $end            reduce using rule 79 (value -> FLOAT .)
    RPAREN          reduce using rule 79 (value -> FLOAT .)
    SEMICOLON       reduce using rule 79 (value -> FLOAT .)
    COMMA           reduce using rule 79 (value -> FLOAT .)
    RCURLY          reduce using rule 79 (value -> FLOAT .)
    CONTINUE        reduce using rule 79 (value -> FLOAT .)
    BREAK           reduce using rule 79 (value -> FLOAT .)
    AND             reduce using rule 79 (value -> FLOAT .)
    OR              reduce using rule 79 (value -> FLOAT .)
    XOR             reduce using rule 79 (value -> FLOAT .)
    RSQUARE         reduce using rule 79 (value -> FLOAT .)
    COLON           reduce using rule 79 (value -> FLOAT .)


state 41

    (2) programa -> programa cuerpo .

    OPEN_TAG        reduce using rule 2 (programa -> programa cuerpo .)
    CLOSE_TAG       reduce using rule 2 (programa -> programa cuerpo .)
    STRING          reduce using rule 2 (programa -> programa cuerpo .)
    LPAREN          reduce using rule 2 (programa -> programa cuerpo .)
    IF              reduce using rule 2 (programa -> programa cuerpo .)
    FOR             reduce using rule 2 (programa -> programa cuerpo .)
    SWITCH          reduce using rule 2 (programa -> programa cuerpo .)
    ID              reduce using rule 2 (programa -> programa cuerpo .)
    FUNCTION        reduce using rule 2 (programa -> programa cuerpo .)
    FN              reduce using rule 2 (programa -> programa cuerpo .)
    ECHO            reduce using rule 2 (programa -> programa cuerpo .)
    PRINT           reduce using rule 2 (programa -> programa cuerpo .)
    INTEGER         reduce using rule 2 (programa -> programa cuerpo .)
    FLOAT           reduce using rule 2 (programa -> programa cuerpo .)
    $end            reduce using rule 2 (programa -> programa cuerpo .)
    RCURLY          reduce using rule 2 (programa -> programa cuerpo .)
    BREAK           reduce using rule 2 (programa -> programa cuerpo .)


state 42

    (74) arithmeticExpression -> arithmeticExpression arithmeticOperator . arithmeticExpression
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    STRING          shift and go to state 27
    LPAREN          shift and go to state 84
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    arithmeticExpression           shift and go to state 82
    value                          shift and go to state 83

state 43

    (81) arithmeticOperator -> PLUS .

    STRING          reduce using rule 81 (arithmeticOperator -> PLUS .)
    LPAREN          reduce using rule 81 (arithmeticOperator -> PLUS .)
    ID              reduce using rule 81 (arithmeticOperator -> PLUS .)
    INTEGER         reduce using rule 81 (arithmeticOperator -> PLUS .)
    FLOAT           reduce using rule 81 (arithmeticOperator -> PLUS .)


state 44

    (82) arithmeticOperator -> MINUS .

    STRING          reduce using rule 82 (arithmeticOperator -> MINUS .)
    LPAREN          reduce using rule 82 (arithmeticOperator -> MINUS .)
    ID              reduce using rule 82 (arithmeticOperator -> MINUS .)
    INTEGER         reduce using rule 82 (arithmeticOperator -> MINUS .)
    FLOAT           reduce using rule 82 (arithmeticOperator -> MINUS .)


state 45

    (83) arithmeticOperator -> TIMES .

    STRING          reduce using rule 83 (arithmeticOperator -> TIMES .)
    LPAREN          reduce using rule 83 (arithmeticOperator -> TIMES .)
    ID              reduce using rule 83 (arithmeticOperator -> TIMES .)
    INTEGER         reduce using rule 83 (arithmeticOperator -> TIMES .)
    FLOAT           reduce using rule 83 (arithmeticOperator -> TIMES .)


state 46

    (84) arithmeticOperator -> DIVIDE .

    STRING          reduce using rule 84 (arithmeticOperator -> DIVIDE .)
    LPAREN          reduce using rule 84 (arithmeticOperator -> DIVIDE .)
    ID              reduce using rule 84 (arithmeticOperator -> DIVIDE .)
    INTEGER         reduce using rule 84 (arithmeticOperator -> DIVIDE .)
    FLOAT           reduce using rule 84 (arithmeticOperator -> DIVIDE .)


state 47

    (85) arithmeticOperator -> MOD .

    STRING          reduce using rule 85 (arithmeticOperator -> MOD .)
    LPAREN          reduce using rule 85 (arithmeticOperator -> MOD .)
    ID              reduce using rule 85 (arithmeticOperator -> MOD .)
    INTEGER         reduce using rule 85 (arithmeticOperator -> MOD .)
    FLOAT           reduce using rule 85 (arithmeticOperator -> MOD .)


state 48

    (86) arithmeticOperator -> EXP .

    STRING          reduce using rule 86 (arithmeticOperator -> EXP .)
    LPAREN          reduce using rule 86 (arithmeticOperator -> EXP .)
    ID              reduce using rule 86 (arithmeticOperator -> EXP .)
    INTEGER         reduce using rule 86 (arithmeticOperator -> EXP .)
    FLOAT           reduce using rule 86 (arithmeticOperator -> EXP .)


state 49

    (105) stringConcatenation -> stringConcatenation CONCAT . stringConcatenation
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    stringConcatenation            shift and go to state 85
    value                          shift and go to state 86

state 50

    (104) stringConcatenation -> value CONCAT . value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 87

state 51

    (97) comparingValue -> value comparingSign . value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 88

state 52

    (90) comparingSign -> IS_EQUAL .

    ID              reduce using rule 90 (comparingSign -> IS_EQUAL .)
    INTEGER         reduce using rule 90 (comparingSign -> IS_EQUAL .)
    FLOAT           reduce using rule 90 (comparingSign -> IS_EQUAL .)
    STRING          reduce using rule 90 (comparingSign -> IS_EQUAL .)


state 53

    (91) comparingSign -> IDENTICAL .

    ID              reduce using rule 91 (comparingSign -> IDENTICAL .)
    INTEGER         reduce using rule 91 (comparingSign -> IDENTICAL .)
    FLOAT           reduce using rule 91 (comparingSign -> IDENTICAL .)
    STRING          reduce using rule 91 (comparingSign -> IDENTICAL .)


state 54

    (92) comparingSign -> NOTEQUAL .

    ID              reduce using rule 92 (comparingSign -> NOTEQUAL .)
    INTEGER         reduce using rule 92 (comparingSign -> NOTEQUAL .)
    FLOAT           reduce using rule 92 (comparingSign -> NOTEQUAL .)
    STRING          reduce using rule 92 (comparingSign -> NOTEQUAL .)


state 55

    (93) comparingSign -> LESSTHAN .

    ID              reduce using rule 93 (comparingSign -> LESSTHAN .)
    INTEGER         reduce using rule 93 (comparingSign -> LESSTHAN .)
    FLOAT           reduce using rule 93 (comparingSign -> LESSTHAN .)
    STRING          reduce using rule 93 (comparingSign -> LESSTHAN .)


state 56

    (94) comparingSign -> GREATERTHAN .

    ID              reduce using rule 94 (comparingSign -> GREATERTHAN .)
    INTEGER         reduce using rule 94 (comparingSign -> GREATERTHAN .)
    FLOAT           reduce using rule 94 (comparingSign -> GREATERTHAN .)
    STRING          reduce using rule 94 (comparingSign -> GREATERTHAN .)


state 57

    (95) comparingSign -> LESSEQUALTHAN .

    ID              reduce using rule 95 (comparingSign -> LESSEQUALTHAN .)
    INTEGER         reduce using rule 95 (comparingSign -> LESSEQUALTHAN .)
    FLOAT           reduce using rule 95 (comparingSign -> LESSEQUALTHAN .)
    STRING          reduce using rule 95 (comparingSign -> LESSEQUALTHAN .)


state 58

    (96) comparingSign -> GREATEREQUALTHAN .

    ID              reduce using rule 96 (comparingSign -> GREATEREQUALTHAN .)
    INTEGER         reduce using rule 96 (comparingSign -> GREATEREQUALTHAN .)
    FLOAT           reduce using rule 96 (comparingSign -> GREATEREQUALTHAN .)
    STRING          reduce using rule 96 (comparingSign -> GREATEREQUALTHAN .)


state 59

    (73) arithmeticExpression -> LPAREN arithmeticExpression . RPAREN
    (74) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (81) arithmeticOperator -> . PLUS
    (82) arithmeticOperator -> . MINUS
    (83) arithmeticOperator -> . TIMES
    (84) arithmeticOperator -> . DIVIDE
    (85) arithmeticOperator -> . MOD
    (86) arithmeticOperator -> . EXP

    RPAREN          shift and go to state 89
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    EXP             shift and go to state 48

    arithmeticOperator             shift and go to state 42

state 60

    (100) logicalCondition -> LPAREN logicalCondition . RPAREN

    RPAREN          shift and go to state 90


state 61

    (71) arithmeticExpression -> value .
    (97) comparingValue -> value . comparingSign value
    (90) comparingSign -> . IS_EQUAL
    (91) comparingSign -> . IDENTICAL
    (92) comparingSign -> . NOTEQUAL
    (93) comparingSign -> . LESSTHAN
    (94) comparingSign -> . GREATERTHAN
    (95) comparingSign -> . LESSEQUALTHAN
    (96) comparingSign -> . GREATEREQUALTHAN

    RPAREN          reduce using rule 71 (arithmeticExpression -> value .)
    PLUS            reduce using rule 71 (arithmeticExpression -> value .)
    MINUS           reduce using rule 71 (arithmeticExpression -> value .)
    TIMES           reduce using rule 71 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 71 (arithmeticExpression -> value .)
    MOD             reduce using rule 71 (arithmeticExpression -> value .)
    EXP             reduce using rule 71 (arithmeticExpression -> value .)
    IS_EQUAL        shift and go to state 52
    IDENTICAL       shift and go to state 53
    NOTEQUAL        shift and go to state 54
    LESSTHAN        shift and go to state 55
    GREATERTHAN     shift and go to state 56
    LESSEQUALTHAN   shift and go to state 57
    GREATEREQUALTHAN shift and go to state 58

    comparingSign                  shift and go to state 51

state 62

    (77) value -> ID .

    IS_EQUAL        reduce using rule 77 (value -> ID .)
    IDENTICAL       reduce using rule 77 (value -> ID .)
    NOTEQUAL        reduce using rule 77 (value -> ID .)
    LESSTHAN        reduce using rule 77 (value -> ID .)
    GREATERTHAN     reduce using rule 77 (value -> ID .)
    LESSEQUALTHAN   reduce using rule 77 (value -> ID .)
    GREATEREQUALTHAN reduce using rule 77 (value -> ID .)
    RPAREN          reduce using rule 77 (value -> ID .)
    PLUS            reduce using rule 77 (value -> ID .)
    MINUS           reduce using rule 77 (value -> ID .)
    TIMES           reduce using rule 77 (value -> ID .)
    DIVIDE          reduce using rule 77 (value -> ID .)
    MOD             reduce using rule 77 (value -> ID .)
    EXP             reduce using rule 77 (value -> ID .)
    SEMICOLON       reduce using rule 77 (value -> ID .)
    COMMA           reduce using rule 77 (value -> ID .)
    OPEN_TAG        reduce using rule 77 (value -> ID .)
    CLOSE_TAG       reduce using rule 77 (value -> ID .)
    STRING          reduce using rule 77 (value -> ID .)
    LPAREN          reduce using rule 77 (value -> ID .)
    IF              reduce using rule 77 (value -> ID .)
    FOR             reduce using rule 77 (value -> ID .)
    SWITCH          reduce using rule 77 (value -> ID .)
    ID              reduce using rule 77 (value -> ID .)
    FUNCTION        reduce using rule 77 (value -> ID .)
    FN              reduce using rule 77 (value -> ID .)
    ECHO            reduce using rule 77 (value -> ID .)
    PRINT           reduce using rule 77 (value -> ID .)
    INTEGER         reduce using rule 77 (value -> ID .)
    FLOAT           reduce using rule 77 (value -> ID .)
    $end            reduce using rule 77 (value -> ID .)
    RCURLY          reduce using rule 77 (value -> ID .)
    CONTINUE        reduce using rule 77 (value -> ID .)
    BREAK           reduce using rule 77 (value -> ID .)
    CONCAT          reduce using rule 77 (value -> ID .)
    AND             reduce using rule 77 (value -> ID .)
    OR              reduce using rule 77 (value -> ID .)
    XOR             reduce using rule 77 (value -> ID .)
    RSQUARE         reduce using rule 77 (value -> ID .)
    COLON           reduce using rule 77 (value -> ID .)


state 63

    (31) if_elseStatement -> IF LPAREN . logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> IF LPAREN . logicalCondition RPAREN LCURLY ifStatementBody
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (97) comparingValue -> . value comparingSign value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    LPAREN          shift and go to state 91
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    logicalCondition               shift and go to state 92
    comparingValue                 shift and go to state 38
    value                          shift and go to state 93

state 64

    (36) forStatement -> FOR LPAREN . forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (37) forStatementCondition -> . SEMICOLON SEMICOLON
    (38) forStatementCondition -> . variableAsignation SEMICOLON SEMICOLON variableAsignation
    (39) forStatementCondition -> . variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression

    SEMICOLON       shift and go to state 95
    ID              shift and go to state 97

    forStatementCondition          shift and go to state 94
    variableAsignation             shift and go to state 96

state 65

    (26) switchStatement -> SWITCH LPAREN . value RPAREN LCURLY switchCases switchDefault RCURLY
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 98

state 66

    (42) arrayAsignation -> ID EQUAL . arrayDeclaration SEMICOLON
    (53) queueDeclaration -> ID EQUAL . NEW QUEUE SEMICOLON
    (70) fgets -> ID EQUAL . FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> ID EQUAL . NEW STACK SEMICOLON
    (88) variableAsignation -> ID EQUAL . value
    (89) variableAsignation -> ID EQUAL . arithmeticExpression
    (43) arrayDeclaration -> . ARRAY arraysValues RPAREN
    (44) arrayDeclaration -> . LSQUARE arraysValues RSQUARE
    (45) arrayDeclaration -> . arrayValue
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (48) arrayValue -> . ARRAY values RPAREN
    (49) arrayValue -> . LSQUARE values RSQUARE

    NEW             shift and go to state 100
    FGETS           shift and go to state 101
    ARRAY           shift and go to state 104
    LSQUARE         shift and go to state 105
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 107
    LPAREN          shift and go to state 84

    arrayDeclaration               shift and go to state 99
    value                          shift and go to state 102
    arithmeticExpression           shift and go to state 103
    arrayValue                     shift and go to state 106

state 67

    (54) queueEnqueue -> ID OBJOP . PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> ID OBJOP . POP SEMICOLON
    (51) stackPush -> ID OBJOP . PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> ID OBJOP . POP SEMICOLON

    PUSH            shift and go to state 108
    POP             shift and go to state 109


state 68

    (75) callFunction -> ID LPAREN . RPAREN
    (76) callFunction -> ID LPAREN . value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    RPAREN          shift and go to state 110
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 111

state 69

    (56) defineFunction -> FUNCTION ID . LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> FUNCTION ID . LPAREN RPAREN LCURLY cuerpo RCURLY

    LPAREN          shift and go to state 112


state 70

    (60) anonymousFunction -> FUNCTION LPAREN . RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> FUNCTION LPAREN . arguments RPAREN LCURLY cuerpo RCURLY
    (58) arguments -> . ID
    (59) arguments -> . ID COMMA arguments

    RPAREN          shift and go to state 113
    ID              shift and go to state 115

    arguments                      shift and go to state 114

state 71

    (62) arrowFunction -> FN LPAREN . ID RPAREN FNARROW arrowBody SEMICOLON

    ID              shift and go to state 116


state 72

    (65) echo -> ECHO values . SEMICOLON
    (69) values -> values . COMMA value

    SEMICOLON       shift and go to state 117
    COMMA           shift and go to state 118


state 73

    (68) values -> value .

    SEMICOLON       reduce using rule 68 (values -> value .)
    COMMA           reduce using rule 68 (values -> value .)
    RPAREN          reduce using rule 68 (values -> value .)
    RSQUARE         reduce using rule 68 (values -> value .)


state 74

    (80) value -> STRING .

    SEMICOLON       reduce using rule 80 (value -> STRING .)
    COMMA           reduce using rule 80 (value -> STRING .)
    CONCAT          reduce using rule 80 (value -> STRING .)
    OPEN_TAG        reduce using rule 80 (value -> STRING .)
    CLOSE_TAG       reduce using rule 80 (value -> STRING .)
    STRING          reduce using rule 80 (value -> STRING .)
    LPAREN          reduce using rule 80 (value -> STRING .)
    IF              reduce using rule 80 (value -> STRING .)
    FOR             reduce using rule 80 (value -> STRING .)
    SWITCH          reduce using rule 80 (value -> STRING .)
    ID              reduce using rule 80 (value -> STRING .)
    FUNCTION        reduce using rule 80 (value -> STRING .)
    FN              reduce using rule 80 (value -> STRING .)
    ECHO            reduce using rule 80 (value -> STRING .)
    PRINT           reduce using rule 80 (value -> STRING .)
    INTEGER         reduce using rule 80 (value -> STRING .)
    FLOAT           reduce using rule 80 (value -> STRING .)
    $end            reduce using rule 80 (value -> STRING .)
    RCURLY          reduce using rule 80 (value -> STRING .)
    CONTINUE        reduce using rule 80 (value -> STRING .)
    BREAK           reduce using rule 80 (value -> STRING .)
    AND             reduce using rule 80 (value -> STRING .)
    OR              reduce using rule 80 (value -> STRING .)
    XOR             reduce using rule 80 (value -> STRING .)
    RPAREN          reduce using rule 80 (value -> STRING .)
    IS_EQUAL        reduce using rule 80 (value -> STRING .)
    IDENTICAL       reduce using rule 80 (value -> STRING .)
    NOTEQUAL        reduce using rule 80 (value -> STRING .)
    LESSTHAN        reduce using rule 80 (value -> STRING .)
    GREATERTHAN     reduce using rule 80 (value -> STRING .)
    LESSEQUALTHAN   reduce using rule 80 (value -> STRING .)
    GREATEREQUALTHAN reduce using rule 80 (value -> STRING .)
    RSQUARE         reduce using rule 80 (value -> STRING .)
    COLON           reduce using rule 80 (value -> STRING .)


state 75

    (87) line -> variableAsignation SEMICOLON .

    OPEN_TAG        reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    CLOSE_TAG       reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    STRING          reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    LPAREN          reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    IF              reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    FOR             reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    SWITCH          reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    ID              reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    FUNCTION        reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    FN              reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    ECHO            reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    PRINT           reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    INTEGER         reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    FLOAT           reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    $end            reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    RCURLY          reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    CONTINUE        reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    SEMICOLON       reduce using rule 87 (line -> variableAsignation SEMICOLON .)
    BREAK           reduce using rule 87 (line -> variableAsignation SEMICOLON .)


state 76

    (66) print -> PRINT LPAREN . values RPAREN SEMICOLON
    (68) values -> . value
    (69) values -> . values COMMA value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    values                         shift and go to state 119
    value                          shift and go to state 73

state 77

    (67) print -> PRINT value . SEMICOLON

    SEMICOLON       shift and go to state 120


state 78

    (99) logicalCondition -> comparingValue conditionOperator . comparingValue
    (97) comparingValue -> . value comparingSign value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    comparingValue                 shift and go to state 121
    value                          shift and go to state 93

state 79

    (101) conditionOperator -> AND .

    ID              reduce using rule 101 (conditionOperator -> AND .)
    INTEGER         reduce using rule 101 (conditionOperator -> AND .)
    FLOAT           reduce using rule 101 (conditionOperator -> AND .)
    STRING          reduce using rule 101 (conditionOperator -> AND .)


state 80

    (102) conditionOperator -> OR .

    ID              reduce using rule 102 (conditionOperator -> OR .)
    INTEGER         reduce using rule 102 (conditionOperator -> OR .)
    FLOAT           reduce using rule 102 (conditionOperator -> OR .)
    STRING          reduce using rule 102 (conditionOperator -> OR .)


state 81

    (103) conditionOperator -> XOR .

    ID              reduce using rule 103 (conditionOperator -> XOR .)
    INTEGER         reduce using rule 103 (conditionOperator -> XOR .)
    FLOAT           reduce using rule 103 (conditionOperator -> XOR .)
    STRING          reduce using rule 103 (conditionOperator -> XOR .)


state 82

    (74) arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .
    (74) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (81) arithmeticOperator -> . PLUS
    (82) arithmeticOperator -> . MINUS
    (83) arithmeticOperator -> . TIMES
    (84) arithmeticOperator -> . DIVIDE
    (85) arithmeticOperator -> . MOD
    (86) arithmeticOperator -> . EXP

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
    OPEN_TAG        reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    CLOSE_TAG       reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    STRING          reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    LPAREN          reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    IF              reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FOR             reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    SWITCH          reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    ID              reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FUNCTION        reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FN              reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    ECHO            reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    PRINT           reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    INTEGER         reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    FLOAT           reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    $end            reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    RPAREN          reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    SEMICOLON       reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    RCURLY          reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    CONTINUE        reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    BREAK           reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    EXP             shift and go to state 48

  ! PLUS            [ reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! MINUS           [ reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! TIMES           [ reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! DIVIDE          [ reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! MOD             [ reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]
  ! EXP             [ reduce using rule 74 (arithmeticExpression -> arithmeticExpression arithmeticOperator arithmeticExpression .) ]

    arithmeticOperator             shift and go to state 42

state 83

    (71) arithmeticExpression -> value .

    PLUS            reduce using rule 71 (arithmeticExpression -> value .)
    MINUS           reduce using rule 71 (arithmeticExpression -> value .)
    TIMES           reduce using rule 71 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 71 (arithmeticExpression -> value .)
    MOD             reduce using rule 71 (arithmeticExpression -> value .)
    EXP             reduce using rule 71 (arithmeticExpression -> value .)
    OPEN_TAG        reduce using rule 71 (arithmeticExpression -> value .)
    CLOSE_TAG       reduce using rule 71 (arithmeticExpression -> value .)
    STRING          reduce using rule 71 (arithmeticExpression -> value .)
    LPAREN          reduce using rule 71 (arithmeticExpression -> value .)
    IF              reduce using rule 71 (arithmeticExpression -> value .)
    FOR             reduce using rule 71 (arithmeticExpression -> value .)
    SWITCH          reduce using rule 71 (arithmeticExpression -> value .)
    ID              reduce using rule 71 (arithmeticExpression -> value .)
    FUNCTION        reduce using rule 71 (arithmeticExpression -> value .)
    FN              reduce using rule 71 (arithmeticExpression -> value .)
    ECHO            reduce using rule 71 (arithmeticExpression -> value .)
    PRINT           reduce using rule 71 (arithmeticExpression -> value .)
    INTEGER         reduce using rule 71 (arithmeticExpression -> value .)
    FLOAT           reduce using rule 71 (arithmeticExpression -> value .)
    $end            reduce using rule 71 (arithmeticExpression -> value .)
    RPAREN          reduce using rule 71 (arithmeticExpression -> value .)
    SEMICOLON       reduce using rule 71 (arithmeticExpression -> value .)
    RCURLY          reduce using rule 71 (arithmeticExpression -> value .)
    CONTINUE        reduce using rule 71 (arithmeticExpression -> value .)
    BREAK           reduce using rule 71 (arithmeticExpression -> value .)


state 84

    (73) arithmeticExpression -> LPAREN . arithmeticExpression RPAREN
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    STRING          shift and go to state 27
    LPAREN          shift and go to state 84
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    arithmeticExpression           shift and go to state 59
    value                          shift and go to state 83

state 85

    (105) stringConcatenation -> stringConcatenation CONCAT stringConcatenation .
    (105) stringConcatenation -> stringConcatenation . CONCAT stringConcatenation

  ! shift/reduce conflict for CONCAT resolved as shift
    OPEN_TAG        reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    CLOSE_TAG       reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    STRING          reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    LPAREN          reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    IF              reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    FOR             reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    SWITCH          reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    ID              reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    FUNCTION        reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    FN              reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    ECHO            reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    PRINT           reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    INTEGER         reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    FLOAT           reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    $end            reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    RCURLY          reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    CONTINUE        reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    SEMICOLON       reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    BREAK           reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .)
    CONCAT          shift and go to state 49

  ! CONCAT          [ reduce using rule 105 (stringConcatenation -> stringConcatenation CONCAT stringConcatenation .) ]


state 86

    (104) stringConcatenation -> value . CONCAT value

    CONCAT          shift and go to state 50


state 87

    (104) stringConcatenation -> value CONCAT value .

    CONCAT          reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    OPEN_TAG        reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    CLOSE_TAG       reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    STRING          reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    LPAREN          reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    IF              reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    FOR             reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    SWITCH          reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    ID              reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    FUNCTION        reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    FN              reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    ECHO            reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    PRINT           reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    INTEGER         reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    FLOAT           reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    $end            reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    RCURLY          reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    CONTINUE        reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    SEMICOLON       reduce using rule 104 (stringConcatenation -> value CONCAT value .)
    BREAK           reduce using rule 104 (stringConcatenation -> value CONCAT value .)


state 88

    (97) comparingValue -> value comparingSign value .

    AND             reduce using rule 97 (comparingValue -> value comparingSign value .)
    OR              reduce using rule 97 (comparingValue -> value comparingSign value .)
    XOR             reduce using rule 97 (comparingValue -> value comparingSign value .)
    OPEN_TAG        reduce using rule 97 (comparingValue -> value comparingSign value .)
    CLOSE_TAG       reduce using rule 97 (comparingValue -> value comparingSign value .)
    STRING          reduce using rule 97 (comparingValue -> value comparingSign value .)
    LPAREN          reduce using rule 97 (comparingValue -> value comparingSign value .)
    IF              reduce using rule 97 (comparingValue -> value comparingSign value .)
    FOR             reduce using rule 97 (comparingValue -> value comparingSign value .)
    SWITCH          reduce using rule 97 (comparingValue -> value comparingSign value .)
    ID              reduce using rule 97 (comparingValue -> value comparingSign value .)
    FUNCTION        reduce using rule 97 (comparingValue -> value comparingSign value .)
    FN              reduce using rule 97 (comparingValue -> value comparingSign value .)
    ECHO            reduce using rule 97 (comparingValue -> value comparingSign value .)
    PRINT           reduce using rule 97 (comparingValue -> value comparingSign value .)
    INTEGER         reduce using rule 97 (comparingValue -> value comparingSign value .)
    FLOAT           reduce using rule 97 (comparingValue -> value comparingSign value .)
    $end            reduce using rule 97 (comparingValue -> value comparingSign value .)
    RPAREN          reduce using rule 97 (comparingValue -> value comparingSign value .)
    RCURLY          reduce using rule 97 (comparingValue -> value comparingSign value .)
    CONTINUE        reduce using rule 97 (comparingValue -> value comparingSign value .)
    SEMICOLON       reduce using rule 97 (comparingValue -> value comparingSign value .)
    BREAK           reduce using rule 97 (comparingValue -> value comparingSign value .)


state 89

    (73) arithmeticExpression -> LPAREN arithmeticExpression RPAREN .

    PLUS            reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    MINUS           reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    TIMES           reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    DIVIDE          reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    MOD             reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    EXP             reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    OPEN_TAG        reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    CLOSE_TAG       reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    STRING          reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    LPAREN          reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    IF              reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FOR             reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    SWITCH          reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    ID              reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FUNCTION        reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FN              reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    ECHO            reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    PRINT           reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    INTEGER         reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    FLOAT           reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    $end            reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    RPAREN          reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    SEMICOLON       reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    RCURLY          reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    CONTINUE        reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)
    BREAK           reduce using rule 73 (arithmeticExpression -> LPAREN arithmeticExpression RPAREN .)


state 90

    (100) logicalCondition -> LPAREN logicalCondition RPAREN .

    OPEN_TAG        reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    CLOSE_TAG       reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    STRING          reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    LPAREN          reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    IF              reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FOR             reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    SWITCH          reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    ID              reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FUNCTION        reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FN              reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    ECHO            reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    PRINT           reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    INTEGER         reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    FLOAT           reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    $end            reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    RPAREN          reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    RCURLY          reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    CONTINUE        reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    SEMICOLON       reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)
    BREAK           reduce using rule 100 (logicalCondition -> LPAREN logicalCondition RPAREN .)


state 91

    (100) logicalCondition -> LPAREN . logicalCondition RPAREN
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (97) comparingValue -> . value comparingSign value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    LPAREN          shift and go to state 91
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    logicalCondition               shift and go to state 60
    comparingValue                 shift and go to state 38
    value                          shift and go to state 93

state 92

    (31) if_elseStatement -> IF LPAREN logicalCondition . RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> IF LPAREN logicalCondition . RPAREN LCURLY ifStatementBody

    RPAREN          shift and go to state 122


state 93

    (97) comparingValue -> value . comparingSign value
    (90) comparingSign -> . IS_EQUAL
    (91) comparingSign -> . IDENTICAL
    (92) comparingSign -> . NOTEQUAL
    (93) comparingSign -> . LESSTHAN
    (94) comparingSign -> . GREATERTHAN
    (95) comparingSign -> . LESSEQUALTHAN
    (96) comparingSign -> . GREATEREQUALTHAN

    IS_EQUAL        shift and go to state 52
    IDENTICAL       shift and go to state 53
    NOTEQUAL        shift and go to state 54
    LESSTHAN        shift and go to state 55
    GREATERTHAN     shift and go to state 56
    LESSEQUALTHAN   shift and go to state 57
    GREATEREQUALTHAN shift and go to state 58

    comparingSign                  shift and go to state 51

state 94

    (36) forStatement -> FOR LPAREN forStatementCondition . RPAREN LCURLY forStatementBody RCURLY

    RPAREN          shift and go to state 123


state 95

    (37) forStatementCondition -> SEMICOLON . SEMICOLON

    SEMICOLON       shift and go to state 124


state 96

    (38) forStatementCondition -> variableAsignation . SEMICOLON SEMICOLON variableAsignation
    (39) forStatementCondition -> variableAsignation . SEMICOLON comparingValue SEMICOLON variableAsignation

    SEMICOLON       shift and go to state 125


state 97

    (88) variableAsignation -> ID . EQUAL value
    (89) variableAsignation -> ID . EQUAL arithmeticExpression

    EQUAL           shift and go to state 126


state 98

    (26) switchStatement -> SWITCH LPAREN value . RPAREN LCURLY switchCases switchDefault RCURLY

    RPAREN          shift and go to state 127


state 99

    (42) arrayAsignation -> ID EQUAL arrayDeclaration . SEMICOLON

    SEMICOLON       shift and go to state 128


state 100

    (53) queueDeclaration -> ID EQUAL NEW . QUEUE SEMICOLON
    (50) stackDeclaration -> ID EQUAL NEW . STACK SEMICOLON

    QUEUE           shift and go to state 129
    STACK           shift and go to state 130


state 101

    (70) fgets -> ID EQUAL FGETS . LPAREN STDIN RPAREN SEMICOLON

    LPAREN          shift and go to state 131


state 102

    (88) variableAsignation -> ID EQUAL value .
    (71) arithmeticExpression -> value .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 71 (arithmeticExpression -> value .)
  ! reduce/reduce conflict for RPAREN resolved using rule 71 (arithmeticExpression -> value .)
    PLUS            reduce using rule 71 (arithmeticExpression -> value .)
    MINUS           reduce using rule 71 (arithmeticExpression -> value .)
    TIMES           reduce using rule 71 (arithmeticExpression -> value .)
    DIVIDE          reduce using rule 71 (arithmeticExpression -> value .)
    MOD             reduce using rule 71 (arithmeticExpression -> value .)
    EXP             reduce using rule 71 (arithmeticExpression -> value .)
    SEMICOLON       reduce using rule 71 (arithmeticExpression -> value .)
    RPAREN          reduce using rule 71 (arithmeticExpression -> value .)

  ! SEMICOLON       [ reduce using rule 88 (variableAsignation -> ID EQUAL value .) ]
  ! RPAREN          [ reduce using rule 88 (variableAsignation -> ID EQUAL value .) ]


state 103

    (89) variableAsignation -> ID EQUAL arithmeticExpression .
    (74) arithmeticExpression -> arithmeticExpression . arithmeticOperator arithmeticExpression
    (81) arithmeticOperator -> . PLUS
    (82) arithmeticOperator -> . MINUS
    (83) arithmeticOperator -> . TIMES
    (84) arithmeticOperator -> . DIVIDE
    (85) arithmeticOperator -> . MOD
    (86) arithmeticOperator -> . EXP

    SEMICOLON       reduce using rule 89 (variableAsignation -> ID EQUAL arithmeticExpression .)
    RPAREN          reduce using rule 89 (variableAsignation -> ID EQUAL arithmeticExpression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46
    MOD             shift and go to state 47
    EXP             shift and go to state 48

    arithmeticOperator             shift and go to state 42

state 104

    (43) arrayDeclaration -> ARRAY . arraysValues RPAREN
    (48) arrayValue -> ARRAY . values RPAREN
    (46) arraysValues -> . arrayValue
    (47) arraysValues -> . arraysValues COMMA arrayValue
    (68) values -> . value
    (69) values -> . values COMMA value
    (48) arrayValue -> . ARRAY values RPAREN
    (49) arrayValue -> . LSQUARE values RSQUARE
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ARRAY           shift and go to state 132
    LSQUARE         shift and go to state 136
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    arraysValues                   shift and go to state 133
    values                         shift and go to state 134
    arrayValue                     shift and go to state 135
    value                          shift and go to state 73

state 105

    (44) arrayDeclaration -> LSQUARE . arraysValues RSQUARE
    (49) arrayValue -> LSQUARE . values RSQUARE
    (46) arraysValues -> . arrayValue
    (47) arraysValues -> . arraysValues COMMA arrayValue
    (68) values -> . value
    (69) values -> . values COMMA value
    (48) arrayValue -> . ARRAY values RPAREN
    (49) arrayValue -> . LSQUARE values RSQUARE
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ARRAY           shift and go to state 132
    LSQUARE         shift and go to state 136
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    arraysValues                   shift and go to state 137
    values                         shift and go to state 138
    arrayValue                     shift and go to state 135
    value                          shift and go to state 73

state 106

    (45) arrayDeclaration -> arrayValue .

    SEMICOLON       reduce using rule 45 (arrayDeclaration -> arrayValue .)


state 107

    (80) value -> STRING .
    (72) arithmeticExpression -> STRING .

  ! reduce/reduce conflict for PLUS resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for MINUS resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for TIMES resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for MOD resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for EXP resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 72 (arithmeticExpression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (arithmeticExpression -> STRING .)
    PLUS            reduce using rule 72 (arithmeticExpression -> STRING .)
    MINUS           reduce using rule 72 (arithmeticExpression -> STRING .)
    TIMES           reduce using rule 72 (arithmeticExpression -> STRING .)
    DIVIDE          reduce using rule 72 (arithmeticExpression -> STRING .)
    MOD             reduce using rule 72 (arithmeticExpression -> STRING .)
    EXP             reduce using rule 72 (arithmeticExpression -> STRING .)
    SEMICOLON       reduce using rule 72 (arithmeticExpression -> STRING .)
    RPAREN          reduce using rule 72 (arithmeticExpression -> STRING .)

  ! SEMICOLON       [ reduce using rule 80 (value -> STRING .) ]
  ! PLUS            [ reduce using rule 80 (value -> STRING .) ]
  ! MINUS           [ reduce using rule 80 (value -> STRING .) ]
  ! TIMES           [ reduce using rule 80 (value -> STRING .) ]
  ! DIVIDE          [ reduce using rule 80 (value -> STRING .) ]
  ! MOD             [ reduce using rule 80 (value -> STRING .) ]
  ! EXP             [ reduce using rule 80 (value -> STRING .) ]
  ! RPAREN          [ reduce using rule 80 (value -> STRING .) ]


state 108

    (54) queueEnqueue -> ID OBJOP PUSH . LPAREN value RPAREN SEMICOLON
    (51) stackPush -> ID OBJOP PUSH . LPAREN value RPAREN SEMICOLON

    LPAREN          shift and go to state 139


state 109

    (55) queueDequeue -> ID OBJOP POP . SEMICOLON
    (52) stackPop -> ID OBJOP POP . SEMICOLON

    SEMICOLON       shift and go to state 140


state 110

    (75) callFunction -> ID LPAREN RPAREN .

    OPEN_TAG        reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    CLOSE_TAG       reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    STRING          reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    IF              reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    FOR             reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    SWITCH          reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    ID              reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    FUNCTION        reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    FN              reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    ECHO            reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    INTEGER         reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    FLOAT           reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    $end            reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    RCURLY          reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    CONTINUE        reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 75 (callFunction -> ID LPAREN RPAREN .)


state 111

    (76) callFunction -> ID LPAREN value . RPAREN

    RPAREN          shift and go to state 141


state 112

    (56) defineFunction -> FUNCTION ID LPAREN . arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> FUNCTION ID LPAREN . RPAREN LCURLY cuerpo RCURLY
    (58) arguments -> . ID
    (59) arguments -> . ID COMMA arguments

    RPAREN          shift and go to state 143
    ID              shift and go to state 115

    arguments                      shift and go to state 142

state 113

    (60) anonymousFunction -> FUNCTION LPAREN RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 144


state 114

    (61) anonymousFunction -> FUNCTION LPAREN arguments . RPAREN LCURLY cuerpo RCURLY

    RPAREN          shift and go to state 145


state 115

    (58) arguments -> ID .
    (59) arguments -> ID . COMMA arguments

    RPAREN          reduce using rule 58 (arguments -> ID .)
    COMMA           shift and go to state 146


state 116

    (62) arrowFunction -> FN LPAREN ID . RPAREN FNARROW arrowBody SEMICOLON

    RPAREN          shift and go to state 147


state 117

    (65) echo -> ECHO values SEMICOLON .

    OPEN_TAG        reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    CLOSE_TAG       reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    STRING          reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    LPAREN          reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    IF              reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    FOR             reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    SWITCH          reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    ID              reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    FUNCTION        reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    FN              reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    ECHO            reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    PRINT           reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    INTEGER         reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    FLOAT           reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    $end            reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    RCURLY          reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    CONTINUE        reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    SEMICOLON       reduce using rule 65 (echo -> ECHO values SEMICOLON .)
    BREAK           reduce using rule 65 (echo -> ECHO values SEMICOLON .)


state 118

    (69) values -> values COMMA . value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 148

state 119

    (66) print -> PRINT LPAREN values . RPAREN SEMICOLON
    (69) values -> values . COMMA value

    RPAREN          shift and go to state 149
    COMMA           shift and go to state 118


state 120

    (67) print -> PRINT value SEMICOLON .

    OPEN_TAG        reduce using rule 67 (print -> PRINT value SEMICOLON .)
    CLOSE_TAG       reduce using rule 67 (print -> PRINT value SEMICOLON .)
    STRING          reduce using rule 67 (print -> PRINT value SEMICOLON .)
    LPAREN          reduce using rule 67 (print -> PRINT value SEMICOLON .)
    IF              reduce using rule 67 (print -> PRINT value SEMICOLON .)
    FOR             reduce using rule 67 (print -> PRINT value SEMICOLON .)
    SWITCH          reduce using rule 67 (print -> PRINT value SEMICOLON .)
    ID              reduce using rule 67 (print -> PRINT value SEMICOLON .)
    FUNCTION        reduce using rule 67 (print -> PRINT value SEMICOLON .)
    FN              reduce using rule 67 (print -> PRINT value SEMICOLON .)
    ECHO            reduce using rule 67 (print -> PRINT value SEMICOLON .)
    PRINT           reduce using rule 67 (print -> PRINT value SEMICOLON .)
    INTEGER         reduce using rule 67 (print -> PRINT value SEMICOLON .)
    FLOAT           reduce using rule 67 (print -> PRINT value SEMICOLON .)
    $end            reduce using rule 67 (print -> PRINT value SEMICOLON .)
    RCURLY          reduce using rule 67 (print -> PRINT value SEMICOLON .)
    CONTINUE        reduce using rule 67 (print -> PRINT value SEMICOLON .)
    SEMICOLON       reduce using rule 67 (print -> PRINT value SEMICOLON .)
    BREAK           reduce using rule 67 (print -> PRINT value SEMICOLON .)


state 121

    (99) logicalCondition -> comparingValue conditionOperator comparingValue .

    OPEN_TAG        reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    CLOSE_TAG       reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    STRING          reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    LPAREN          reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    IF              reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FOR             reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    SWITCH          reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    ID              reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FUNCTION        reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FN              reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    ECHO            reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    PRINT           reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    INTEGER         reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    FLOAT           reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    $end            reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    RPAREN          reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    RCURLY          reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    CONTINUE        reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    SEMICOLON       reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)
    BREAK           reduce using rule 99 (logicalCondition -> comparingValue conditionOperator comparingValue .)


state 122

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN . LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> IF LPAREN logicalCondition RPAREN . LCURLY ifStatementBody

    LCURLY          shift and go to state 150


state 123

    (36) forStatement -> FOR LPAREN forStatementCondition RPAREN . LCURLY forStatementBody RCURLY

    LCURLY          shift and go to state 151


state 124

    (37) forStatementCondition -> SEMICOLON SEMICOLON .

    RPAREN          reduce using rule 37 (forStatementCondition -> SEMICOLON SEMICOLON .)


state 125

    (38) forStatementCondition -> variableAsignation SEMICOLON . SEMICOLON variableAsignation
    (39) forStatementCondition -> variableAsignation SEMICOLON . comparingValue SEMICOLON variableAsignation
    (97) comparingValue -> . value comparingSign value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    SEMICOLON       shift and go to state 152
    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    comparingValue                 shift and go to state 153
    value                          shift and go to state 93

state 126

    (88) variableAsignation -> ID EQUAL . value
    (89) variableAsignation -> ID EQUAL . arithmeticExpression
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 107
    LPAREN          shift and go to state 84

    value                          shift and go to state 102
    arithmeticExpression           shift and go to state 103

state 127

    (26) switchStatement -> SWITCH LPAREN value RPAREN . LCURLY switchCases switchDefault RCURLY

    LCURLY          shift and go to state 154


state 128

    (42) arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .

    OPEN_TAG        reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    CLOSE_TAG       reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    STRING          reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    LPAREN          reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    IF              reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FOR             reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    SWITCH          reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    ID              reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FUNCTION        reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FN              reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    ECHO            reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    PRINT           reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    INTEGER         reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    FLOAT           reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    $end            reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    RCURLY          reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    CONTINUE        reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    SEMICOLON       reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)
    BREAK           reduce using rule 42 (arrayAsignation -> ID EQUAL arrayDeclaration SEMICOLON .)


state 129

    (53) queueDeclaration -> ID EQUAL NEW QUEUE . SEMICOLON

    SEMICOLON       shift and go to state 155


state 130

    (50) stackDeclaration -> ID EQUAL NEW STACK . SEMICOLON

    SEMICOLON       shift and go to state 156


state 131

    (70) fgets -> ID EQUAL FGETS LPAREN . STDIN RPAREN SEMICOLON

    STDIN           shift and go to state 157


state 132

    (48) arrayValue -> ARRAY . values RPAREN
    (68) values -> . value
    (69) values -> . values COMMA value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    values                         shift and go to state 134
    value                          shift and go to state 73

state 133

    (43) arrayDeclaration -> ARRAY arraysValues . RPAREN
    (47) arraysValues -> arraysValues . COMMA arrayValue

    RPAREN          shift and go to state 158
    COMMA           shift and go to state 159


state 134

    (48) arrayValue -> ARRAY values . RPAREN
    (69) values -> values . COMMA value

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 118


state 135

    (46) arraysValues -> arrayValue .

    RPAREN          reduce using rule 46 (arraysValues -> arrayValue .)
    COMMA           reduce using rule 46 (arraysValues -> arrayValue .)
    RSQUARE         reduce using rule 46 (arraysValues -> arrayValue .)


state 136

    (49) arrayValue -> LSQUARE . values RSQUARE
    (68) values -> . value
    (69) values -> . values COMMA value
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    values                         shift and go to state 138
    value                          shift and go to state 73

state 137

    (44) arrayDeclaration -> LSQUARE arraysValues . RSQUARE
    (47) arraysValues -> arraysValues . COMMA arrayValue

    RSQUARE         shift and go to state 161
    COMMA           shift and go to state 159


state 138

    (49) arrayValue -> LSQUARE values . RSQUARE
    (69) values -> values . COMMA value

    RSQUARE         shift and go to state 162
    COMMA           shift and go to state 118


state 139

    (54) queueEnqueue -> ID OBJOP PUSH LPAREN . value RPAREN SEMICOLON
    (51) stackPush -> ID OBJOP PUSH LPAREN . value RPAREN SEMICOLON
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 163

state 140

    (55) queueDequeue -> ID OBJOP POP SEMICOLON .
    (52) stackPop -> ID OBJOP POP SEMICOLON .

  ! reduce/reduce conflict for OPEN_TAG resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for ID resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for RCURLY resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    OPEN_TAG        reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    CLOSE_TAG       reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    STRING          reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    LPAREN          reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    IF              reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    FOR             reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    SWITCH          reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    ID              reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    FUNCTION        reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    FN              reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    ECHO            reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    PRINT           reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    INTEGER         reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    FLOAT           reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    $end            reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    RCURLY          reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    CONTINUE        reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    SEMICOLON       reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)
    BREAK           reduce using rule 52 (stackPop -> ID OBJOP POP SEMICOLON .)

  ! OPEN_TAG        [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! CLOSE_TAG       [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! STRING          [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! IF              [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FOR             [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! ID              [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FN              [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! ECHO            [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! PRINT           [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! $end            [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! RCURLY          [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]
  ! BREAK           [ reduce using rule 55 (queueDequeue -> ID OBJOP POP SEMICOLON .) ]


state 141

    (76) callFunction -> ID LPAREN value RPAREN .

    OPEN_TAG        reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    CLOSE_TAG       reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    STRING          reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    LPAREN          reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    IF              reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    FOR             reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    SWITCH          reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    ID              reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    FUNCTION        reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    FN              reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    ECHO            reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    PRINT           reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    INTEGER         reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    FLOAT           reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    $end            reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    RCURLY          reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    CONTINUE        reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    SEMICOLON       reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)
    BREAK           reduce using rule 76 (callFunction -> ID LPAREN value RPAREN .)


state 142

    (56) defineFunction -> FUNCTION ID LPAREN arguments . RPAREN LCURLY cuerpo RCURLY

    RPAREN          shift and go to state 164


state 143

    (57) defineFunction -> FUNCTION ID LPAREN RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 165


state 144

    (60) anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    cuerpo                         shift and go to state 166
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 145

    (61) anonymousFunction -> FUNCTION LPAREN arguments RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 167


state 146

    (59) arguments -> ID COMMA . arguments
    (58) arguments -> . ID
    (59) arguments -> . ID COMMA arguments

    ID              shift and go to state 115

    arguments                      shift and go to state 168

state 147

    (62) arrowFunction -> FN LPAREN ID RPAREN . FNARROW arrowBody SEMICOLON

    FNARROW         shift and go to state 169


state 148

    (69) values -> values COMMA value .

    SEMICOLON       reduce using rule 69 (values -> values COMMA value .)
    COMMA           reduce using rule 69 (values -> values COMMA value .)
    RPAREN          reduce using rule 69 (values -> values COMMA value .)
    RSQUARE         reduce using rule 69 (values -> values COMMA value .)


state 149

    (66) print -> PRINT LPAREN values RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 170


state 150

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY . ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY . ifStatementBody
    (33) ifStatementBody -> . cuerpo
    (34) ifStatementBody -> . cuerpo CONTINUE SEMICOLON
    (35) ifStatementBody -> . ifStatementBody cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    logicalCondition               shift and go to state 21
    ifStatementBody                shift and go to state 171
    cuerpo                         shift and go to state 172
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 151

    (36) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY . forStatementBody RCURLY
    (40) forStatementBody -> . cuerpo
    (41) forStatementBody -> . forStatementBody cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    forStatementBody               shift and go to state 173
    cuerpo                         shift and go to state 174
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 152

    (38) forStatementCondition -> variableAsignation SEMICOLON SEMICOLON . variableAsignation
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression

    ID              shift and go to state 97

    variableAsignation             shift and go to state 175

state 153

    (39) forStatementCondition -> variableAsignation SEMICOLON comparingValue . SEMICOLON variableAsignation

    SEMICOLON       shift and go to state 176


state 154

    (26) switchStatement -> SWITCH LPAREN value RPAREN LCURLY . switchCases switchDefault RCURLY
    (29) switchCases -> . switchCase
    (30) switchCases -> . switchCases switchCase
    (28) switchCase -> . CASE value COLON programa BREAK SEMICOLON

    CASE            shift and go to state 179

    switchCases                    shift and go to state 177
    switchCase                     shift and go to state 178

state 155

    (53) queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .

    OPEN_TAG        reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    CLOSE_TAG       reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    STRING          reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    LPAREN          reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    IF              reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FOR             reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    SWITCH          reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    ID              reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FUNCTION        reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FN              reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    ECHO            reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    PRINT           reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    INTEGER         reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    FLOAT           reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    $end            reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    RCURLY          reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    CONTINUE        reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    SEMICOLON       reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)
    BREAK           reduce using rule 53 (queueDeclaration -> ID EQUAL NEW QUEUE SEMICOLON .)


state 156

    (50) stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .

    OPEN_TAG        reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    CLOSE_TAG       reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    STRING          reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    LPAREN          reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    IF              reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FOR             reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    SWITCH          reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    ID              reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FUNCTION        reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FN              reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    ECHO            reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    PRINT           reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    INTEGER         reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    FLOAT           reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    $end            reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    RCURLY          reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    CONTINUE        reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    SEMICOLON       reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)
    BREAK           reduce using rule 50 (stackDeclaration -> ID EQUAL NEW STACK SEMICOLON .)


state 157

    (70) fgets -> ID EQUAL FGETS LPAREN STDIN . RPAREN SEMICOLON

    RPAREN          shift and go to state 180


state 158

    (43) arrayDeclaration -> ARRAY arraysValues RPAREN .

    SEMICOLON       reduce using rule 43 (arrayDeclaration -> ARRAY arraysValues RPAREN .)


state 159

    (47) arraysValues -> arraysValues COMMA . arrayValue
    (48) arrayValue -> . ARRAY values RPAREN
    (49) arrayValue -> . LSQUARE values RSQUARE

    ARRAY           shift and go to state 132
    LSQUARE         shift and go to state 136

    arrayValue                     shift and go to state 181

state 160

    (48) arrayValue -> ARRAY values RPAREN .

    SEMICOLON       reduce using rule 48 (arrayValue -> ARRAY values RPAREN .)
    RPAREN          reduce using rule 48 (arrayValue -> ARRAY values RPAREN .)
    COMMA           reduce using rule 48 (arrayValue -> ARRAY values RPAREN .)
    RSQUARE         reduce using rule 48 (arrayValue -> ARRAY values RPAREN .)


state 161

    (44) arrayDeclaration -> LSQUARE arraysValues RSQUARE .

    SEMICOLON       reduce using rule 44 (arrayDeclaration -> LSQUARE arraysValues RSQUARE .)


state 162

    (49) arrayValue -> LSQUARE values RSQUARE .

    SEMICOLON       reduce using rule 49 (arrayValue -> LSQUARE values RSQUARE .)
    RPAREN          reduce using rule 49 (arrayValue -> LSQUARE values RSQUARE .)
    COMMA           reduce using rule 49 (arrayValue -> LSQUARE values RSQUARE .)
    RSQUARE         reduce using rule 49 (arrayValue -> LSQUARE values RSQUARE .)


state 163

    (54) queueEnqueue -> ID OBJOP PUSH LPAREN value . RPAREN SEMICOLON
    (51) stackPush -> ID OBJOP PUSH LPAREN value . RPAREN SEMICOLON

    RPAREN          shift and go to state 182


state 164

    (56) defineFunction -> FUNCTION ID LPAREN arguments RPAREN . LCURLY cuerpo RCURLY

    LCURLY          shift and go to state 183


state 165

    (57) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    cuerpo                         shift and go to state 184
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 166

    (60) anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 185


state 167

    (61) anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    cuerpo                         shift and go to state 186
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 168

    (59) arguments -> ID COMMA arguments .

    RPAREN          reduce using rule 59 (arguments -> ID COMMA arguments .)


state 169

    (62) arrowFunction -> FN LPAREN ID RPAREN FNARROW . arrowBody SEMICOLON
    (63) arrowBody -> . FN LPAREN ID RPAREN FNARROW arrowBody
    (64) arrowBody -> . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    FN              shift and go to state 187
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    arrowBody                      shift and go to state 188
    cuerpo                         shift and go to state 189
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 170

    (66) print -> PRINT LPAREN values RPAREN SEMICOLON .

    OPEN_TAG        reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    STRING          reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    LPAREN          reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    IF              reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FOR             reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    SWITCH          reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    ID              reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FN              reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    ECHO            reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    PRINT           reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    INTEGER         reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    FLOAT           reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    $end            reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    RCURLY          reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)
    BREAK           reduce using rule 66 (print -> PRINT LPAREN values RPAREN SEMICOLON .)


state 171

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody . RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .
    (35) ifStatementBody -> ifStatementBody . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

  ! shift/reduce conflict for RCURLY resolved as shift
  ! shift/reduce conflict for OPEN_TAG resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
    RCURLY          shift and go to state 190
    $end            reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    CONTINUE        reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    SEMICOLON       reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    BREAK           reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .)
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

  ! OPEN_TAG        [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! CLOSE_TAG       [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! STRING          [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! LPAREN          [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! IF              [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FOR             [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! SWITCH          [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! ID              [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FUNCTION        [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FN              [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! ECHO            [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! PRINT           [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! INTEGER         [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! FLOAT           [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]
  ! RCURLY          [ reduce using rule 32 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody .) ]

    logicalCondition               shift and go to state 21
    cuerpo                         shift and go to state 191
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 172

    (33) ifStatementBody -> cuerpo .
    (34) ifStatementBody -> cuerpo . CONTINUE SEMICOLON

  ! shift/reduce conflict for CONTINUE resolved as shift
    RCURLY          reduce using rule 33 (ifStatementBody -> cuerpo .)
    OPEN_TAG        reduce using rule 33 (ifStatementBody -> cuerpo .)
    CLOSE_TAG       reduce using rule 33 (ifStatementBody -> cuerpo .)
    STRING          reduce using rule 33 (ifStatementBody -> cuerpo .)
    LPAREN          reduce using rule 33 (ifStatementBody -> cuerpo .)
    IF              reduce using rule 33 (ifStatementBody -> cuerpo .)
    FOR             reduce using rule 33 (ifStatementBody -> cuerpo .)
    SWITCH          reduce using rule 33 (ifStatementBody -> cuerpo .)
    ID              reduce using rule 33 (ifStatementBody -> cuerpo .)
    FUNCTION        reduce using rule 33 (ifStatementBody -> cuerpo .)
    FN              reduce using rule 33 (ifStatementBody -> cuerpo .)
    ECHO            reduce using rule 33 (ifStatementBody -> cuerpo .)
    PRINT           reduce using rule 33 (ifStatementBody -> cuerpo .)
    INTEGER         reduce using rule 33 (ifStatementBody -> cuerpo .)
    FLOAT           reduce using rule 33 (ifStatementBody -> cuerpo .)
    $end            reduce using rule 33 (ifStatementBody -> cuerpo .)
    SEMICOLON       reduce using rule 33 (ifStatementBody -> cuerpo .)
    BREAK           reduce using rule 33 (ifStatementBody -> cuerpo .)
    CONTINUE        shift and go to state 192

  ! CONTINUE        [ reduce using rule 33 (ifStatementBody -> cuerpo .) ]


state 173

    (36) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody . RCURLY
    (41) forStatementBody -> forStatementBody . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    RCURLY          shift and go to state 193
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    cuerpo                         shift and go to state 194
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 174

    (40) forStatementBody -> cuerpo .

    RCURLY          reduce using rule 40 (forStatementBody -> cuerpo .)
    OPEN_TAG        reduce using rule 40 (forStatementBody -> cuerpo .)
    CLOSE_TAG       reduce using rule 40 (forStatementBody -> cuerpo .)
    STRING          reduce using rule 40 (forStatementBody -> cuerpo .)
    LPAREN          reduce using rule 40 (forStatementBody -> cuerpo .)
    IF              reduce using rule 40 (forStatementBody -> cuerpo .)
    FOR             reduce using rule 40 (forStatementBody -> cuerpo .)
    SWITCH          reduce using rule 40 (forStatementBody -> cuerpo .)
    ID              reduce using rule 40 (forStatementBody -> cuerpo .)
    FUNCTION        reduce using rule 40 (forStatementBody -> cuerpo .)
    FN              reduce using rule 40 (forStatementBody -> cuerpo .)
    ECHO            reduce using rule 40 (forStatementBody -> cuerpo .)
    PRINT           reduce using rule 40 (forStatementBody -> cuerpo .)
    INTEGER         reduce using rule 40 (forStatementBody -> cuerpo .)
    FLOAT           reduce using rule 40 (forStatementBody -> cuerpo .)


state 175

    (38) forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation .

    RPAREN          reduce using rule 38 (forStatementCondition -> variableAsignation SEMICOLON SEMICOLON variableAsignation .)


state 176

    (39) forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON . variableAsignation
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression

    ID              shift and go to state 97

    variableAsignation             shift and go to state 195

state 177

    (26) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases . switchDefault RCURLY
    (30) switchCases -> switchCases . switchCase
    (27) switchDefault -> . DEFAULT COLON programa
    (28) switchCase -> . CASE value COLON programa BREAK SEMICOLON

    DEFAULT         shift and go to state 198
    CASE            shift and go to state 179

    switchDefault                  shift and go to state 196
    switchCase                     shift and go to state 197

state 178

    (29) switchCases -> switchCase .

    DEFAULT         reduce using rule 29 (switchCases -> switchCase .)
    CASE            reduce using rule 29 (switchCases -> switchCase .)


state 179

    (28) switchCase -> CASE . value COLON programa BREAK SEMICOLON
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING

    ID              shift and go to state 62
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40
    STRING          shift and go to state 74

    value                          shift and go to state 199

state 180

    (70) fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 200


state 181

    (47) arraysValues -> arraysValues COMMA arrayValue .

    RPAREN          reduce using rule 47 (arraysValues -> arraysValues COMMA arrayValue .)
    COMMA           reduce using rule 47 (arraysValues -> arraysValues COMMA arrayValue .)
    RSQUARE         reduce using rule 47 (arraysValues -> arraysValues COMMA arrayValue .)


state 182

    (54) queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN . SEMICOLON
    (51) stackPush -> ID OBJOP PUSH LPAREN value RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 201


state 183

    (56) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY . cuerpo RCURLY
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    cuerpo                         shift and go to state 202
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 184

    (57) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 203


state 185

    (60) anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 60 (anonymousFunction -> FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY .)


state 186

    (61) anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 204


state 187

    (63) arrowBody -> FN . LPAREN ID RPAREN FNARROW arrowBody
    (62) arrowFunction -> FN . LPAREN ID RPAREN FNARROW arrowBody SEMICOLON

    LPAREN          shift and go to state 205


state 188

    (62) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody . SEMICOLON

    SEMICOLON       shift and go to state 206


state 189

    (64) arrowBody -> cuerpo .

    SEMICOLON       reduce using rule 64 (arrowBody -> cuerpo .)


state 190

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY . ELSE LCURLY ifStatementBody RCURLY

    ELSE            shift and go to state 207


state 191

    (35) ifStatementBody -> ifStatementBody cuerpo .

    CONTINUE        reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    RCURLY          reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    OPEN_TAG        reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    CLOSE_TAG       reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    STRING          reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    LPAREN          reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    IF              reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    FOR             reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    SWITCH          reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    ID              reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    FUNCTION        reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    FN              reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    ECHO            reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    PRINT           reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    INTEGER         reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    FLOAT           reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    $end            reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    SEMICOLON       reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)
    BREAK           reduce using rule 35 (ifStatementBody -> ifStatementBody cuerpo .)


state 192

    (34) ifStatementBody -> cuerpo CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 208


state 193

    (36) forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .

    OPEN_TAG        reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    CLOSE_TAG       reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    STRING          reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    LPAREN          reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    IF              reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FOR             reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    SWITCH          reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    ID              reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FUNCTION        reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FN              reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    ECHO            reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    PRINT           reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    INTEGER         reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    FLOAT           reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    $end            reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    RCURLY          reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    CONTINUE        reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    SEMICOLON       reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)
    BREAK           reduce using rule 36 (forStatement -> FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY .)


state 194

    (41) forStatementBody -> forStatementBody cuerpo .

    RCURLY          reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    OPEN_TAG        reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    CLOSE_TAG       reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    STRING          reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    LPAREN          reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    IF              reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    FOR             reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    SWITCH          reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    ID              reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    FUNCTION        reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    FN              reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    ECHO            reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    PRINT           reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    INTEGER         reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)
    FLOAT           reduce using rule 41 (forStatementBody -> forStatementBody cuerpo .)


state 195

    (39) forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation .

    RPAREN          reduce using rule 39 (forStatementCondition -> variableAsignation SEMICOLON comparingValue SEMICOLON variableAsignation .)


state 196

    (26) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault . RCURLY

    RCURLY          shift and go to state 209


state 197

    (30) switchCases -> switchCases switchCase .

    DEFAULT         reduce using rule 30 (switchCases -> switchCases switchCase .)
    CASE            reduce using rule 30 (switchCases -> switchCases switchCase .)


state 198

    (27) switchDefault -> DEFAULT . COLON programa

    COLON           shift and go to state 210


state 199

    (28) switchCase -> CASE value . COLON programa BREAK SEMICOLON

    COLON           shift and go to state 211


state 200

    (70) fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .

    OPEN_TAG        reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    STRING          reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    IF              reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FOR             reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SWITCH          reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ID              reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FN              reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    ECHO            reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    PRINT           reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    INTEGER         reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    FLOAT           reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    $end            reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    RCURLY          reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)
    BREAK           reduce using rule 70 (fgets -> ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON .)


state 201

    (54) queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .
    (51) stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .

  ! reduce/reduce conflict for OPEN_TAG resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ID resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FN resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for RCURLY resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    OPEN_TAG        reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    STRING          reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    LPAREN          reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    IF              reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FOR             reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    SWITCH          reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    ID              reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FN              reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    ECHO            reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    PRINT           reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    INTEGER         reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    FLOAT           reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    $end            reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    RCURLY          reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)
    BREAK           reduce using rule 51 (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .)

  ! OPEN_TAG        [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! CLOSE_TAG       [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! STRING          [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! IF              [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FOR             [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! ID              [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FN              [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! ECHO            [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! PRINT           [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! $end            [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! RCURLY          [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]
  ! BREAK           [ reduce using rule 54 (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON .) ]


state 202

    (56) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo . RCURLY

    RCURLY          shift and go to state 212


state 203

    (57) defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 57 (defineFunction -> FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY .)


state 204

    (61) anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 61 (anonymousFunction -> FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)


state 205

    (63) arrowBody -> FN LPAREN . ID RPAREN FNARROW arrowBody
    (62) arrowFunction -> FN LPAREN . ID RPAREN FNARROW arrowBody SEMICOLON

    ID              shift and go to state 213


state 206

    (62) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .

    OPEN_TAG        reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    CLOSE_TAG       reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    STRING          reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    LPAREN          reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    IF              reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FOR             reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    SWITCH          reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    ID              reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FUNCTION        reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FN              reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    ECHO            reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    PRINT           reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    INTEGER         reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    FLOAT           reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    $end            reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    RCURLY          reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    CONTINUE        reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    SEMICOLON       reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)
    BREAK           reduce using rule 62 (arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON .)


state 207

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE . LCURLY ifStatementBody RCURLY

    LCURLY          shift and go to state 214


state 208

    (34) ifStatementBody -> cuerpo CONTINUE SEMICOLON .

    CONTINUE        reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    RCURLY          reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    OPEN_TAG        reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    CLOSE_TAG       reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    STRING          reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    IF              reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FOR             reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    ID              reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FN              reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    ECHO            reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    PRINT           reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    INTEGER         reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    $end            reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)
    BREAK           reduce using rule 34 (ifStatementBody -> cuerpo CONTINUE SEMICOLON .)


state 209

    (26) switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .

    OPEN_TAG        reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    CLOSE_TAG       reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    STRING          reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    LPAREN          reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    IF              reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FOR             reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    SWITCH          reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    ID              reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FUNCTION        reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FN              reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    ECHO            reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    PRINT           reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    INTEGER         reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    FLOAT           reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    $end            reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    RCURLY          reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    CONTINUE        reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    SEMICOLON       reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)
    BREAK           reduce using rule 26 (switchStatement -> SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY .)


state 210

    (27) switchDefault -> DEFAULT COLON . programa
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    programa                       shift and go to state 215
    cuerpo                         shift and go to state 2
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 211

    (28) switchCase -> CASE value COLON . programa BREAK SEMICOLON
    (1) programa -> . cuerpo
    (2) programa -> . programa cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    value                          shift and go to state 26
    programa                       shift and go to state 216
    cuerpo                         shift and go to state 2
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 212

    (56) defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .

    OPEN_TAG        reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CLOSE_TAG       reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    STRING          reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    LPAREN          reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    IF              reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FOR             reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SWITCH          reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ID              reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FUNCTION        reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FN              reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    ECHO            reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    PRINT           reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    INTEGER         reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    FLOAT           reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    $end            reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    RCURLY          reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    CONTINUE        reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    SEMICOLON       reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)
    BREAK           reduce using rule 56 (defineFunction -> FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY .)


state 213

    (63) arrowBody -> FN LPAREN ID . RPAREN FNARROW arrowBody
    (62) arrowFunction -> FN LPAREN ID . RPAREN FNARROW arrowBody SEMICOLON

    RPAREN          shift and go to state 217


state 214

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY . ifStatementBody RCURLY
    (33) ifStatementBody -> . cuerpo
    (34) ifStatementBody -> . cuerpo CONTINUE SEMICOLON
    (35) ifStatementBody -> . ifStatementBody cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    logicalCondition               shift and go to state 21
    ifStatementBody                shift and go to state 218
    cuerpo                         shift and go to state 172
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 215

    (27) switchDefault -> DEFAULT COLON programa .
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    RCURLY          reduce using rule 27 (switchDefault -> DEFAULT COLON programa .)
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    cuerpo                         shift and go to state 41
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 216

    (28) switchCase -> CASE value COLON programa . BREAK SEMICOLON
    (2) programa -> programa . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    BREAK           shift and go to state 219
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    value                          shift and go to state 26
    cuerpo                         shift and go to state 41
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 217

    (63) arrowBody -> FN LPAREN ID RPAREN . FNARROW arrowBody
    (62) arrowFunction -> FN LPAREN ID RPAREN . FNARROW arrowBody SEMICOLON

    FNARROW         shift and go to state 220


state 218

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody . RCURLY
    (35) ifStatementBody -> ifStatementBody . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    RCURLY          shift and go to state 221
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    FN              shift and go to state 34
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    logicalCondition               shift and go to state 21
    cuerpo                         shift and go to state 191
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 219

    (28) switchCase -> CASE value COLON programa BREAK . SEMICOLON

    SEMICOLON       shift and go to state 222


state 220

    (63) arrowBody -> FN LPAREN ID RPAREN FNARROW . arrowBody
    (62) arrowFunction -> FN LPAREN ID RPAREN FNARROW . arrowBody SEMICOLON
    (63) arrowBody -> . FN LPAREN ID RPAREN FNARROW arrowBody
    (64) arrowBody -> . cuerpo
    (3) cuerpo -> . arithmeticExpression
    (4) cuerpo -> . if_elseStatement
    (5) cuerpo -> . forStatement
    (6) cuerpo -> . switchStatement
    (7) cuerpo -> . arrayAsignation
    (8) cuerpo -> . queueDeclaration
    (9) cuerpo -> . queueEnqueue
    (10) cuerpo -> . queueDequeue
    (11) cuerpo -> . defineFunction
    (12) cuerpo -> . anonymousFunction
    (13) cuerpo -> . arrowFunction
    (14) cuerpo -> . echo
    (15) cuerpo -> . fgets
    (16) cuerpo -> . stackDeclaration
    (17) cuerpo -> . stackPush
    (18) cuerpo -> . stackPop
    (19) cuerpo -> . line
    (20) cuerpo -> . print
    (21) cuerpo -> . logicalCondition
    (22) cuerpo -> . OPEN_TAG
    (23) cuerpo -> . CLOSE_TAG
    (24) cuerpo -> . stringConcatenation
    (25) cuerpo -> . callFunction
    (71) arithmeticExpression -> . value
    (72) arithmeticExpression -> . STRING
    (73) arithmeticExpression -> . LPAREN arithmeticExpression RPAREN
    (74) arithmeticExpression -> . arithmeticExpression arithmeticOperator arithmeticExpression
    (31) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY
    (32) if_elseStatement -> . IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody
    (36) forStatement -> . FOR LPAREN forStatementCondition RPAREN LCURLY forStatementBody RCURLY
    (26) switchStatement -> . SWITCH LPAREN value RPAREN LCURLY switchCases switchDefault RCURLY
    (42) arrayAsignation -> . ID EQUAL arrayDeclaration SEMICOLON
    (53) queueDeclaration -> . ID EQUAL NEW QUEUE SEMICOLON
    (54) queueEnqueue -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (55) queueDequeue -> . ID OBJOP POP SEMICOLON
    (56) defineFunction -> . FUNCTION ID LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (57) defineFunction -> . FUNCTION ID LPAREN RPAREN LCURLY cuerpo RCURLY
    (60) anonymousFunction -> . FUNCTION LPAREN RPAREN LCURLY cuerpo RCURLY
    (61) anonymousFunction -> . FUNCTION LPAREN arguments RPAREN LCURLY cuerpo RCURLY
    (62) arrowFunction -> . FN LPAREN ID RPAREN FNARROW arrowBody SEMICOLON
    (65) echo -> . ECHO values SEMICOLON
    (70) fgets -> . ID EQUAL FGETS LPAREN STDIN RPAREN SEMICOLON
    (50) stackDeclaration -> . ID EQUAL NEW STACK SEMICOLON
    (51) stackPush -> . ID OBJOP PUSH LPAREN value RPAREN SEMICOLON
    (52) stackPop -> . ID OBJOP POP SEMICOLON
    (87) line -> . variableAsignation SEMICOLON
    (66) print -> . PRINT LPAREN values RPAREN SEMICOLON
    (67) print -> . PRINT value SEMICOLON
    (98) logicalCondition -> . comparingValue
    (99) logicalCondition -> . comparingValue conditionOperator comparingValue
    (100) logicalCondition -> . LPAREN logicalCondition RPAREN
    (104) stringConcatenation -> . value CONCAT value
    (105) stringConcatenation -> . stringConcatenation CONCAT stringConcatenation
    (75) callFunction -> . ID LPAREN RPAREN
    (76) callFunction -> . ID LPAREN value RPAREN
    (77) value -> . ID
    (78) value -> . INTEGER
    (79) value -> . FLOAT
    (80) value -> . STRING
    (88) variableAsignation -> . ID EQUAL value
    (89) variableAsignation -> . ID EQUAL arithmeticExpression
    (97) comparingValue -> . value comparingSign value

    FN              shift and go to state 187
    OPEN_TAG        shift and go to state 22
    CLOSE_TAG       shift and go to state 23
    STRING          shift and go to state 27
    LPAREN          shift and go to state 28
    IF              shift and go to state 29
    FOR             shift and go to state 30
    SWITCH          shift and go to state 31
    ID              shift and go to state 32
    FUNCTION        shift and go to state 33
    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    INTEGER         shift and go to state 39
    FLOAT           shift and go to state 40

    arrowBody                      shift and go to state 223
    cuerpo                         shift and go to state 189
    arithmeticExpression           shift and go to state 3
    if_elseStatement               shift and go to state 4
    forStatement                   shift and go to state 5
    switchStatement                shift and go to state 6
    arrayAsignation                shift and go to state 7
    queueDeclaration               shift and go to state 8
    queueEnqueue                   shift and go to state 9
    queueDequeue                   shift and go to state 10
    defineFunction                 shift and go to state 11
    anonymousFunction              shift and go to state 12
    arrowFunction                  shift and go to state 13
    echo                           shift and go to state 14
    fgets                          shift and go to state 15
    stackDeclaration               shift and go to state 16
    stackPush                      shift and go to state 17
    stackPop                       shift and go to state 18
    line                           shift and go to state 19
    print                          shift and go to state 20
    logicalCondition               shift and go to state 21
    stringConcatenation            shift and go to state 24
    callFunction                   shift and go to state 25
    value                          shift and go to state 26
    variableAsignation             shift and go to state 36
    comparingValue                 shift and go to state 38

state 221

    (31) if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .

    OPEN_TAG        reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    CLOSE_TAG       reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    STRING          reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    LPAREN          reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    IF              reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    FOR             reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    SWITCH          reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    ID              reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    FUNCTION        reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    FN              reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    ECHO            reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    PRINT           reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    INTEGER         reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    FLOAT           reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    $end            reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    RCURLY          reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    CONTINUE        reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    SEMICOLON       reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)
    BREAK           reduce using rule 31 (if_elseStatement -> IF LPAREN logicalCondition RPAREN LCURLY ifStatementBody RCURLY ELSE LCURLY ifStatementBody RCURLY .)


state 222

    (28) switchCase -> CASE value COLON programa BREAK SEMICOLON .

    DEFAULT         reduce using rule 28 (switchCase -> CASE value COLON programa BREAK SEMICOLON .)
    CASE            reduce using rule 28 (switchCase -> CASE value COLON programa BREAK SEMICOLON .)


state 223

    (63) arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody .
    (62) arrowFunction -> FN LPAREN ID RPAREN FNARROW arrowBody . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 206

  ! SEMICOLON       [ reduce using rule 63 (arrowBody -> FN LPAREN ID RPAREN FNARROW arrowBody .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for MOD in state 82 resolved as shift
WARNING: shift/reduce conflict for EXP in state 82 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 85 resolved as shift
WARNING: shift/reduce conflict for RCURLY in state 171 resolved as shift
WARNING: shift/reduce conflict for OPEN_TAG in state 171 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 171 resolved as shift
WARNING: shift/reduce conflict for STRING in state 171 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 171 resolved as shift
WARNING: shift/reduce conflict for IF in state 171 resolved as shift
WARNING: shift/reduce conflict for FOR in state 171 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 171 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 171 resolved as shift
WARNING: shift/reduce conflict for FN in state 171 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 171 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 171 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 171 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 171 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 172 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 223 resolved as shift
WARNING: reduce/reduce conflict in state 27 resolved using rule (arithmeticExpression -> STRING)
WARNING: rejected rule (value -> STRING) in state 27
WARNING: reduce/reduce conflict in state 102 resolved using rule (arithmeticExpression -> value)
WARNING: rejected rule (variableAsignation -> ID EQUAL value) in state 102
WARNING: reduce/reduce conflict in state 107 resolved using rule (arithmeticExpression -> STRING)
WARNING: rejected rule (value -> STRING) in state 107
WARNING: reduce/reduce conflict in state 140 resolved using rule (stackPop -> ID OBJOP POP SEMICOLON)
WARNING: rejected rule (queueDequeue -> ID OBJOP POP SEMICOLON) in state 140
WARNING: reduce/reduce conflict in state 201 resolved using rule (stackPush -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON)
WARNING: rejected rule (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON) in state 201
WARNING: Rule (variableAsignation -> ID EQUAL value) is never reduced
WARNING: Rule (queueDequeue -> ID OBJOP POP SEMICOLON) is never reduced
WARNING: Rule (queueEnqueue -> ID OBJOP PUSH LPAREN value RPAREN SEMICOLON) is never reduced
